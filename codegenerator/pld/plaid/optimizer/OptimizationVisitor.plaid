package plaid.optimizer;

import plaid.ast.*;
import plaid.ast.visitor.ASTVisitor;

state OptimizationVisitor = ASTVisitor {
	method visitAnnotatedLetBinding(node) { //TODO: what is this?
	}
	
	method visitApplication(node) {
		
		node.f.accept(this);
		node.arguments.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitAssignment(node) {
	
		node.value.accept(this);
		match (node.target) {
			case Some {
				node.target.value.accept(this);
			}
			default {}
		}
	}
		
	method visitCast(node) {
//		match (node.theVar) {
//			case Some {
//				node.theVar.value.accept(this);
//			}
//			case None {}
//		};
//		node.body.accept(this);
	}
	
	method visitCase(node) {
	
//		match(node.qi) {
//			case QI {
//				node.qi.accept(this);
//			}
//			case None {
//			}
//		};
//		match(node.x) {
//			case ID {
//				node.x.accept(this)
//			}
//			case None {
//			}
//		};
		node.e.accept(this);
	}
	
	method visitChangeState(node) {
	
		node.e.accept(this);
		node.s.accept(this);
	}
	
	method visitCompilationUnit(node) {
		java.lang.System.out.println("enterCompilationUnit");
		
		node.decls.map(fn (d) => {
			d.accept(this);
		});
		
		node.imports.accept(this);
		java.lang.System.out.println("leaveCompilationUnit");
	}
	
	method visitDeclList(node) {
		
		node.decls.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitDereference(node) {
	
		node.left.accept(this);
		node.right.accept(this);
	}
	
	method visitDestructiveDereference(node) {
	
		node.left.accept(this);
		node.right.accept(this);		
	}
	
	method visitFieldDecl(node) {
	
		node.f.accept(this);
		//node.fieldType.accept(this); //visit type as part of this node
		node.e.accept(this);
	}
	
	method visitID(node) {
	}
	
	method visitImportList(node) {
	}
	
	method visitIntLiteral(node){
	}
	
	method visitJoin(node) {
	}
	
	method visitLambda(node) {	
		node.body.accept(new TailCallVisitor);
		
		node.arguments.map(fn (d) => {
			d.accept(this);
		});
		node.body.accept(this);
	}
	
	method visitLetBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
	}
	
	method visitMatch(node) {
	
		node.e.accept(this);
		node.caseList.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitMethodCall(node) {
		node.receiver.accept(this);
		node.methodName.accept(this);
		
		node.arguments.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitMethodDecl(node) {
		node.body.accept(new TailCallVisitor);
		
		node.body.accept(this);	
		node.arguments.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitMethodInvocation(node) {	//TODO: what is this?
	}
	
	method visitNewInstance(node) {
		node.s.accept(this);
	}
	
	method visitPermType(node) {
	}
	
	method visitQI(node) {
	}
	
	method visitSplit(node) {
	}
	

	method visitStateDecl(node) {	
		node.name.accept(this);
		node.stateDef.accept(this);
	}
	
	method visitStringLiteral(node) {
	}
	
	method visitUnitLiteral(node) {
	}
	
	method visitWith(node) {	
		node.s1.accept(this);
		node.s2.accept(this);
	}
}