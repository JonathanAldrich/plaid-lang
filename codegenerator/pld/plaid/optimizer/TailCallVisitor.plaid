package plaid.optimizer;

import plaid.ast.*;
import plaid.ast.visitor.ASTVisitor;

state TailCallVisitor = ASTVisitor {
	method visitCase(node) {
		node.e.accept(this);
	}
	
	method visitLetBinding(node) {
		node.body.accept(this);
	}
	
	method visitMatch(node) {	
		node.caseList.map(fn (d) => {
			d.accept(this);
		});
	}
	
	method visitApplication(node) {
		node.isTailCall = true;
	}
	
	method visitMethodCall(node) {
		node.isTailCall = true;
	}
	
	method visitAnnotatedLetBinding(node){}
	method visitAssignment(node){}
	method visitChangeState(node){}
	method visitCompilationUnit(node){}
	method visitDeclList(node){}
	method visitDereference(node){}
	method visitDestructiveDereference(node){}
	method visitDoubleLiteral(node){}
	method visitFieldDecl(node){}
	method visitID(node){}
	method visitImportList(node){}
	method visitIntLiteral(node){}
	method visitJoin(node){}
	method visitLambda(node){}
	method visitMethodDecl(node){}
	method visitMethodInvocation(node){}
	method visitNewInstance(node){}
	method visitPermType(node){}
	method visitQI(node){}
	method visitSplit(node){}
	method visitStateDecl(node){}
	method visitStringLiteral(node){}
	method visitUnitLiteral(node){}
	method visitWith(node){}
}

