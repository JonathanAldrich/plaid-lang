package plaid.codegenJavascript.fragments;

state LetBindingFragment {
	method visitLetBinding(node) {
		this.bindingCodeGen(node);
	}

	method visitTakeBinding(node) {
		this.bindingCodeGen(node);
	}
	
	method visitBorrowBinding(node) {
		this.bindingCodeGen(node);
	}

	method bindingCodeGen(node) {
		val /* ID */ y = this.y;
	
		this.setLocation(node.token);
		this.out.declareFinalVar(this.out.plaidObjectType, node.x.name);
		
		this.y = node.x;
		node.exp.accept(this);

		// We can't use this to decide whether the variable should be added to
		// the scope if we're switching to let normal form -- in LNF we also
		// want to add temporary variables inserted by the typechecker to the
		// scope.  This needs to be redesigned.
		
		if (!node.x.name.contains("$plaid")) {
			// set the immutability of the variable
			this.out.insertIntoScope(this.out.localScope, node.x.name, !node.mutable);
		};
		
		this.y = y;
		node.body.accept(this);
	}
}