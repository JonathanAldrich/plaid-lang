package plaid.codegenJavascript.fragments;

state LambdaFragment {
	method visitLambda(node) {
		this.setLocation(node.token);
		val /* ID */ y = this.y;
		
		var /*ID*/ freshID = this.idgen.getId();
		
		val /*ID*/ argID = ifElse (node.arguments.length() == 0) {
			new ID { val name = "_"; };
		} 
		{
			ifElse (node.arguments.length() == 1) {
				new ID { val name = node.arguments.head.value.name; };
			} 
			{
				new ID { val name = "pA1R$plaid"; val token = new None;};
				
			};
		};
		if(node.arguments.length() > 1){
			node <<- MethodDecl with{
  					override val token = node.token;
  					override val recursiveName = node.recursiveName;
  					override val body = this.getBodyWithPairExtractions(node.arguments, argID, 1, node.body);
  					override val arguments  = node.arguments;
  					override val lambdaType  = node.lambdaType;
			};
		};
		this.out.assignToNewLambda(y.name, argID.name);  //y = new lambda(...{ {
		this.out.declareVar(this.out.plaidObjectType, freshID.name);
		this.y = freshID;
		node.body.accept(this);
		this.out.ret(freshID.name);
		this.out.closeAnonymousDeclaration(); //}});");
	}
}