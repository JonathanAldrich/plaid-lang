package plaid.codegenJavascript.tests;

import plaid.printNodeNames.PrintVisitor;
import plaid.printNodeNames.NewVisitor;
import plaid.codegenJavascript.visitASTFromFile;
import plaid.codegenJavascript.viewASTNodeFieldsFromFile;
import plaid.codegenJavascript.visitASTFromFileList;

import plaid.collections.LinkedList;
import java.lang.System;

method main(args) {
	var ASTVisitor = new PrintVisitor;
	var ASTVisitor2 = new NewVisitor;

	var testList = new LinkedList;

	args.map(fn(x) => {
		testList.add(x);
	});

	ifElse(testList.listSize == 0) {
		testList.add("../compilerTests/specExamples/SCList/package.plaid");
		testList.add("../compilerTests/specExamples/SUAddH/package.plaid");
		testList.add("../compilerTests/specExamples/SUMatch/package.plaid");
		testList.add("../compilerTests/specExamples/SUMatchDim/package.plaid");
		testList.add("../compilerTests/specExamples/SUMatchInner/package.plaid");
		testList.add("../compilerTests/specExamples/SUMatchSuper/package.plaid");
		testList.add("../compilerTests/specExamples/SUMatchSuperInner/package.plaid");
		testList.add("../compilerTests/specExamples/SUMv/package.plaid");

		testList.do(fn(elm) => {
			var v1 = new PrintVisitor;
			var v2 = new NewVisitor;
			System.out.println("--- " + elm + " ---");
			visitASTFromFile(v1, v2, elm);
			System.out.println("\n");
		});
	}{
		var visitor = new PrintVisitor;
		var newVisitor = new NewVisitor;
		visitASTFromFileList(visitor, newVisitor, testList);
	};

}
