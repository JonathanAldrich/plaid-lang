package plaid.printNodeNames;

import plaid.ast.*;
import plaid.ast.visitor.ASTVisitor;
import plaid.metadataCreation.Node;
import plaid.metadataCreation.Tree;

state PrintVisitor = ASTVisitor {

	var debug=false;
	var newVariableNameNumber = 0;
	
	method generateNewVariableName() {
		newVariableNameNumber = newVariableNameNumber+1;
		"$plaidNewVar"+newVariableNameNumber;
	}
	
	method generateNewStateName(str) {
		"$plaidNewState_"+str;
	}

	method visitApplication(node) {
		if (debug) {
			java.lang.System.out.println("//I am an Application");
			java.lang.System.out.println ("   //f: " + node.f.toString());
			java.lang.System.out.println ("   //arguments: " + node.arguments.toString());
			java.lang.System.out.println ("   //isTailCall: " + node.isTailCall.toString());
		};
		
		//make a string (with argument values) from list of argument objects	
		var argumentsString="";
		if (node.arguments.length() > 0) {
			var nMinusOneArguments = node.arguments.subList(0,node.arguments.length() - 2);
			nMinusOneArguments.map(fn (a) => argumentsString=argumentsString+a.accept(this)+",");
			argumentsString=argumentsString+(node.arguments.get(node.arguments.length() - 1).accept(this));
		};
		//immediately emit code that assigns method call's value to the newVarName generated below
		var newVarName = generateNewVariableName();
		var funcCallString = "var "+newVarName+" = "+node.f.name+"("+argumentsString+");";
		//print the function call
		java.lang.System.out.println (funcCallString);
		//return the newVarName so that method call's value can be used by the method that called this one (this can be used just like an ID name)
		newVarName;
	}
	method visitAssignment(node) {
		if (debug) {
			java.lang.System.out.println("//I am an Assignment");
		};
		node.value.accept(this); 
		node.target.value.accept(this); 
	}
	method visitAtomicBlock(node) {
		if (debug) {
			java.lang.System.out.println("//I am an AtomicBlock");
		};
	}
	method visitBorrowBinding(node) {
		if (debug) {
			java.lang.System.out.println("//I am a BorrowBinding");
		};
		node.exp.accept(this); 
		node.body.accept(this); 
	}
	method visitCase(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Case");
		};
		//the one called below should only be called if this case is not the default case
		node.qi.value.accept(this); 
		node.e.accept(this); 
	}
	method visitCast(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Cast");
		};
		node.body.accept(this);
	}
	method visitChangeState(node) {
		if (debug) {
			java.lang.System.out.println("//I am a ChangeState");
		};
		node.e.accept(this); 
		node.s.accept(this); 
	}
	method visitCompilationUnit(node) {
		if (debug) {
			java.lang.System.out.println("//I am a CompilationUnit");	
		};
		node.imports.accept(this);
		node.decls.map(fn (d) => {
			d.accept(this);
		});
		java.lang.System.out.println("main();");
	}
	method visitDeclList(node) {
		if (debug) {
			java.lang.System.out.println("//I am a DeclList");
			/*
			node.decls.map(fn (d) => java.lang.System.out.println(d.toString()));
			java.lang.System.out.println("hi");
			//java.lang.System.out.println ("   //decls: " + node.decls.toString());
			*/
		};
		node.decls.map(fn (d) => d.accept(this));
	}
	method visitDereference(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Dereference");
			java.lang.System.out.println ("   //left: " + node.left.toString());
			java.lang.System.out.println ("   //right: " + node.right.toString());
		};
		node.left.accept(this); 
	}
	method visitDestructiveDereference(node) {
		if (debug) {
			java.lang.System.out.println("//I am a DestructiveDereference");
		};
	}
	method visitDoubleLiteral(node) {
		if (debug) {
			java.lang.System.out.println("//I am a DoubleLiteral");
			java.lang.System.out.println ("   //double: " + node.double);
		};
		node.double;
	}
	method visitFieldDecl(node) {
		if (debug) {
			java.lang.System.out.println("//I am a FieldDecl");
		};
		node.e.accept(this);
	}
	method visitGroupDecl(node) {
		if (debug) {
			java.lang.System.out.println("//I am a GroupDecl");
		};
	}
	method visitGroupParameter(node) {
		if (debug) {
			java.lang.System.out.println("//I am a GroupParameter");
		};
	}
	method visitID(node) {
		if (debug) {
			java.lang.System.out.println("//I am an ID");
			java.lang.System.out.println ("   //name: " + node.name);
		};
		node.name;
	}
	method visitImportList(node) {
		if (debug) {
			java.lang.System.out.println("//I am an ImportList");
		};
	}
	method visitIntLiteral(node) {
		if (debug) {
			java.lang.System.out.println("//I am an IntLiteral");
			java.lang.System.out.println ("   //integer: " + node.integer);
		};
		node.integer;
	}
	method visitJoin(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Join");
		};
		node.body.accept(this);
	}
	method visitLambda(node) {
	
		if (debug) {
			java.lang.System.out.println("//I am a Lambda");
			java.lang.System.out.println ("   //arguments: " + node.arguments.toString());
			java.lang.System.out.println ("   //body: " + node.body.toString());
			java.lang.System.out.println ("   //lambdaType: " + node.lambdaType.toString());
			java.lang.System.out.println ("   //recursiveName: " + node.recursiveName.toString());
		};
		node.body.accept(this); 
	}
	method visitLetBinding(node) {
		if (debug) {
			java.lang.System.out.println("//I am a LetBinding");
			java.lang.System.out.println ("   //x: " + node.x.toString());
			java.lang.System.out.println ("   //exp: " + node.exp.toString());
			java.lang.System.out.println ("   //body: " + node.body.toString());
			java.lang.System.out.println ("   //mutable: " + node.mutable.toString());
		};
		java.lang.System.out.println("var "+node.x.accept(this)+" = "+node.exp.accept(this)+";"); 
		node.body.accept(this); 
	}
	method visitMatch(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Match");
		};
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this);
		});
	}
	method visitMetaDereference(node) {
		if (debug) {
			java.lang.System.out.println("//I am a MetaDereference");
		};
	}
	method visitMetaTypeArgument(node) {
		if (debug) {
			java.lang.System.out.println("//I am a MetaTypeArgument");
		};
	}
	method visitMetaVariable(node) {
		if (debug) {
			java.lang.System.out.println("//I am a MetaVariable");
		};
	}
	method visitMethodCall(node) {
		if (debug) {
			java.lang.System.out.println("//I am a MethodCall");
			java.lang.System.out.println ("   //receiver: " + node.receiver.toString());
			java.lang.System.out.println ("   //methodName: " + node.methodName.toString());
			java.lang.System.out.println ("   //arguments: " + node.arguments.toString());
			java.lang.System.out.println ("   //isTailCall: " + node.isTailCall.toString());
		};
		//make a string (with argument values) from list of argument objects	
		var argumentsString="";
		if (node.arguments.length() > 0) {
			var nMinusOneArguments = node.arguments.subList(0,node.arguments.length() - 2);
			nMinusOneArguments.map(fn (a) => argumentsString=argumentsString+a.accept(this)+",");
			argumentsString=argumentsString+(node.arguments.get(node.arguments.length() - 1).accept(this));
		};
		//immediately emit code that assigns method call's value to the newVarName generated below
		var newVarName = generateNewVariableName();
		var mn = node.methodName.name;
		var funcCallString = "";
		ifElse ( mn=="+" || mn=="-" || mn=="*" ||mn=="/" ){
			funcCallString = "var "+newVarName+" = "+node.receiver.accept(this)+" "+node.methodName.name+" "+argumentsString+";";
		}
		{
			funcCallString = "var "+newVarName+" = "+node.receiver.accept(this)+"."+node.methodName.name+"("+argumentsString+");";
		};
		//print the function call
		java.lang.System.out.println (funcCallString);
		node.receiver.accept(this);
		//return the newVarName so that method call's value can be used by the method that called this one (this can be used just like an ID name)
		newVarName;
		
	}
	method visitMethodDecl(node) {
		if (debug) {
			java.lang.System.out.println("//I am a MethodDecl");
			java.lang.System.out.println ("   //name: " + node.name);
			java.lang.System.out.println ("   //body: " + node.body.toString());
			java.lang.System.out.println ("   //arguments: " + node.arguments.toString());
			java.lang.System.out.println ("   //abstractMethod: " + node.abstractMethod.toString());
			java.lang.System.out.println ("   //overrrides: " + node.overrides.toString());
			java.lang.System.out.println ("   //methodType: " + node.methodType.toString());
		};
		
		//make a strings (with argument values) from list of argument objects	
		var argumentsString="";
		if (node.arguments.length() > 0) {
			var nMinusOneArguments = node.arguments.subList(0,node.arguments.length() - 2);
			nMinusOneArguments.map(fn (a) => argumentsString=argumentsString+a.accept(this)+",");
			argumentsString=argumentsString+(node.arguments.get(node.arguments.length() - 1).accept(this));
		};
		java.lang.System.out.println ("function "+node.name+" ("+argumentsString+") {");
		java.lang.System.out.println ("return "+node.body.accept(this)+";"); 
		java.lang.System.out.println ("}");
	}
	method visitNewInstance(node) {
		if (debug) {
			java.lang.System.out.println("//I am a NewInstance");
		};
		node.s.accept(this); 
	}
	method visitQI(node) {
		if (debug) {
			java.lang.System.out.println("//I am a QI");
		};
		//if node.initState is Some
		//node.initState.value.accept(this);
		//if node.initState is DeclList
		//node.initState.accept(this); 
	}
	method visitSplitBlock(node) {
		if (debug) {
			java.lang.System.out.println("//I am a SplitBlock");
		};
	}
	method visitStateDecl(node) {
	
		if (debug) {
			java.lang.System.out.println("//I am a StateDecl");	
			java.lang.System.out.println ("   //name: " + node.name.toString());
			java.lang.System.out.println ("   //metaParams: " + node.metaParams.toString());
			java.lang.System.out.println ("   //caseOf: " + node.caseOf.toString());
			java.lang.System.out.println ("   //isCaseOf: " + node.isCaseOf.toString());
			java.lang.System.out.println ("   //stateType: " + node.stateType.toString());
			java.lang.System.out.println ("   //metaCaseOfArgs: " + node.metaCaseOfArgs.toString());
			java.lang.System.out.println ("   //stateDef has decls");
		};
		var currStateName = generateNewStateName(node.name.name);
		match(node.caseOf) { 
			case Some { 
				//the state is a case of some other state, stored in caseOf.value.toString()
				"case of " + this.caseOf.value.toString() + " " 
			} 
			case None { 
				//the state is not a case of any other state
				//create metadata string for creating Plaid state object in Javascript runtime
				var tree=new Tree;
				var treeNode = new Node;
				var emptyList = new plaid.lang.List { var head = new plaid.lang.Nil;};
				treeNode.setData(node.name.name, emptyList, true, tree.root);
				var md = tree.toMetadata(tree.root);
				//emit code for creating a new Plaid state
				java.lang.System.out.println("var "+currStateName+" = new PlaidState("+md+");");
			} 
		};
		
		
		node.stateDef.decls.map(fn (d) => {java.lang.System.out.print(currStateName+"['"+d.name+"'] = "); d.accept(this);});
		
		node.caseOf.value.accept(this);
		
		
		/*
		java.lang.System.out.println("StateDecl");
		node.name.accept(this);
		java.lang.System.out.println("MetaParameters");
        node.metaParams.map(fn (p) => p.accept(this));
        
		match (node.caseOf) {
            case plaid.lang.Some {
                java.lang.System.out.println("CaseOf");
			    node.caseOf.value.accept(this);
			    node.metaCaseOfArgs.map(fn (p) => p.accept(this));
            }
            default {}
		};
        node.stateDef.accept(this);
        */
        
	}
	method visitStringLiteral(node) {
		if (debug) {
			java.lang.System.out.println("//I am a StringLiteral");
		};
	}
	method visitsplitPerm(node) {
		if (debug) {
			java.lang.System.out.println("//I am a Split");
		};
		node.body.accept(this);
	}
	method visitTakeBinding(node) {
		if (debug) {
			java.lang.System.out.println("//I am a TakeBinding");
		};
		node.exp.accept(this); 
		node.body.accept(this); 
	}
	method visitTypeParameter(node) {
		if (debug) {
			java.lang.System.out.println("//I am a TypeParameter");
		};
	}
	method visitUnitLiteral(node) {
		if (debug) {
			java.lang.System.out.println("//I am a UnitLiteral");
		};
	}
	method visitUnpackerInnerGroups(node) {
		if (debug) {
			java.lang.System.out.println("//I am an UnpackerInnerGroups");
		};
	}
	method visitWith(node) {
		if (debug) {
			java.lang.System.out.println("//I am a With");
		};
		node.s1.accept(this);
		node.s2.accept(this); 
	}

}