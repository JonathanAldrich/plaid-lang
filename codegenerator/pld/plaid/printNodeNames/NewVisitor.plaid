package plaid.printNodeNames;

import plaid.ast.*;
import plaid.ast.visitor.ASTVisitor;

state NewVisitor = ASTVisitor {
	var statesToInstantiate = new plaid.lang.List { var head = new plaid.lang.Nil;};
	
	method generateNewStateName(str) {
		"plaidNewState_"+str;
	}
	
	method visitLetBinding(node) {
		this.printBinding(node);
	}
	
	method visitTakeBinding(node) {
		this.printBinding(node);
	}
	
	method visitBorrowBinding(node) {
		this.printBinding(node);
	}
	
	method printBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
	}
	
	method visitApplication(node) {
		node.f.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
	}
	
	method visitAssignment(node) {
        match (node.target) {
            case plaid.lang.Some {
			    node.target.value.accept(this);
            }
            default {}
		};
		node.field.accept(this);
		node.value.accept(this);
	}
	
	method visitAtomicBlock(node) {
		node.id.accept(this);
		node.body.accept(this);
	}
	
	method visitCase(node) {
		
		match (node.qi) {
			case Some {
				node.qi.value.accept(this);
			}
			
			case None {
			}
		};
		
		match (node.x) {
			case Some {
				node.x.value.accept(this);
			}
			
			case None {
			}
		};
		
		node.e.accept(this);
	}
	
	method visitChangeState(node) {
		node.e.accept(this);
		node.s.accept(this);
	}
	
	method visitCompilationUnit(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		node.imports.accept(this);
		statesToInstantiate;
	}
	
	method visitDeclList(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
	}
	
	method visitDereference(node) {
		node.left.accept(this);
		node.right.accept(this);
	}

	method visitDestructiveDereference(node) {
		node.left.accept(this);
		node.right.accept(this);
	}
	
	method visitDoubleLiteral(node) {
    }
    
	method visitFieldDecl(node) {
		node.f.accept(this);
		node.e.accept(this);
	}
	
	method visitGroupDecl(node) {
		node.id.accept(this);
	}

    method visitGroupParameter(node) {
        match (node.permission) {
            case plaid.ast.types.groupPermissions.UndefinedGroupPermission {
            }
            default {
			}
        };
    }
    	
	method visitID(node) {
	}
	
	method visitImportList(node) {
	}
	
	method visitIntLiteral(node) {
	}
	
	method visitLambda(node) {
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
	}
	
	method visitMatch(node) {
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this)
		});
	}
	
	   method visitMetaDereference(node) {
    }
	
	method visitMetaVariable(node) {
	}
	
	method visitMetaTypeArgument(node) {
	}
	
	method visitMethodCall(node) {
		node.receiver.accept(this);
		node.methodName.accept(this);
		node.arguments.map(fn (arg) => arg.accept(this));
	}
	
	method visitMethodDecl(node) {
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
	}
	
	method visitNewInstance(node) {
		node.s.accept(this);
		match(node.s){
			case QI{
				var stateName = node.s.accept(this);
				var found = false;
				statesToInstantiate.map(fn (d) => {
					if (d==stateName){
						found=true;
					}
				});
				if(!found){
					statesToInstantiate.add(stateName);
				};
			}
			default{}
		};
	}
	method visitPermType(node) {
	}
	
	method visitQI(node) {
		var returnString = node.qid.toString();
		match (node.initState) {
			case Some {
				node.initState.value.accept(this);
				returnString="";
			}
			
			case None {
				returnString = generateNewStateName(returnString);
			}
		};
		returnString;
	}
	
	method visitSplitBlock(node) {
		node.metaArgs.map(fn (arg) => arg.accept(this));
		node.body.map(fn (e) => e.accept(this));
	}
	
	method visitStateDecl(node) {
		node.name.accept(this);
        node.metaParams.map(fn (p) => p.accept(this));
		match (node.caseOf) {
            case plaid.lang.Some {
			    node.caseOf.value.accept(this);
			    node.metaCaseOfArgs.map(fn (p) => p.accept(this));
            }
            default {}
		};
        node.stateDef.accept(this);
	}
	
	method visitStringLiteral(node) {
	}
	
	method visitTypeParameter(node) {
	}
	
	method visitUnitLiteral(node) {
	}
	
	method visitUnpackInnerGroups(node) {
		node.body.accept(this);
	}
	
	method visitWith(node) {
		node.s1.accept(this);
		node.s2.accept(this);
	}
}