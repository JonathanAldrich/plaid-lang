package plaid.codegen.fragments;

state AssignmentFragment {	
	method visitAssignment(node) {
		val /* ID */ y = this.y;
		this.setLocation(node.token);
		val /* ID */ assignTo = this.idgen.getId();
		this.out.declareFinalVar(this.out.plaidObjectType, assignTo.name);
		
		this.y = assignTo;
		node.value.accept(this);
		
		// Generates (e.g.):
		// PlaidObject var$foo = local$c0pe.lookup('y')
		// local$c0pe.update('x', var$foo)
		if (node.target.isNull()) {
			// This is not allowed to happen, as we now require explicit
			// this dereferences.
			
			throw new Exception { val message = "Implicit this dereferences are not supported."; };
		};
		
		// we have a target, so we need to check if that particular 
		// field of the target is mutable and if so assign the new value
		// evaluate the target
		val /* ID */ temp = this.idgen.getId();
		this.out.declareFinalVar(this.out.plaidObjectType, temp.name);
		this.y = temp;
		node.target.accept(this);
		this.out.updateMember(temp.name, node.field.name, assignTo.name);
		this.out.assignToID(y.name, assignTo.name);
	
		this.out.updateVarDebugInfo(assignTo.name);
	}
}