package plaid.codegen.fragments;

state AssignmentFragment {	
	method visitAssignment(node) {
		val /* ID */ y = this.y;
		//this.out.setLocation(node.token); TODO: Why does this break?
		val /* ID */ assignTo = this.idgen.getId();
		this.out.declareFinalVar(this.out.plaidObjectType, assignTo.name);
		
		this.y = assignTo;
		node.value.accept(this);
		
		// Generates (e.g.):
		// PlaidObject var$foo = local$c0pe.lookup('y')
		// local$c0pe.update('x', var$foo)
		ifElse (node.target.isNull()) {
			// if we haven't seen it in this scope at all, then we must be 
			// referencing an instance field with an implicit "this"
			// need to make sure we've loaded it before
			this.out.lookupInCurrentScope(node.field.name);
			this.out.updateVarInScope(node.field.name, assignTo.name);
			this.out.assignToID(y.name, assignTo.name);
			
			this.out.updateVarDebugInfo(assignTo.name);
		} {
			// we have a target, so we need to check if that particular 
			// field of the target is mutable and if so assign the new value
			// evaluate the target
			val /* ID */ temp = this.idgen.getId();
			this.out.declareFinalVar(this.out.plaidObjectType, temp.name);
			this.y = temp;
			node.target.accept(this);
			this.out.updateMember(temp.name, node.field.name, assignTo.name);
			this.out.assignToID(y.name, assignTo.name);
	
			this.out.updateVarDebugInfo(assignTo.name);
		}
	}
}