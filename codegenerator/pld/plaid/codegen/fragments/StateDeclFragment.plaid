package plaid.codegen.fragments;

state StateDeclFragment {
	method handleTopLevelStateDecl(node) {
		var freshImports = this.idgen.getId();
		var theState = this.idgen.getId();
		val qid = new QI { val qid = this.packageName; };
		val thePackage = qid.toString();
		
		java.lang.System.out.println("Handling state " + node.name.name + " with package " + thePackage);
		
		val cc = plaid.compilerjava.CompilerConfiguration.new();
		cc.setPrettyPrint(true);
		cc.setDebugMode(false);
		cc.setOutputDir("testOutput/");
		this.out = this.jCodeGen.new(cc);
		
		// Package and needed imports
		this.out.declarePackage(thePackage);
		
		val repString = "";  // TODO

		this.out.topStateAnnotation(node.name.name, thePackage, repString);
		this.out.declarePublicClass(node.name.name);
		this.out.openBlock();
		
		// Generate code to create the package scope with imports.
		this.out.declarePublicStaticFinalVar("java.util.List<plaid.runtime.utils.Import>", freshImports.name);
		
		this.y = freshImports;
		this.imports.accept(this);
		
		this.out.declareGlobalScope(qid.toString(), freshImports.name);

		// Annotation for the prototype object representing the state.
		this.out.stateAnnotation(node.name.name);
		this.out.declarePublicStaticFinalVar(this.jCodeGen.plaidObjectType, node.name.name);
		
		this.out.openStaticBlock(); //static {
		this.out.declareLocalScope(this.jCodeGen.globalScope);
		this.out.declareFinalVar(this.jCodeGen.plaidStateType, theState.name);

		this.y = theState;
		node.stateDef.accept(this);
		
		this.out.assignToPrototype(node.name.name, theState.name);

		this.out.closeBlock(); // } (for static block to init prototype)
		this.out.closeBlock(); // } (for class Def)
		
		plaid.compilerjava.util.FileGen.createOutputFile(node.name.name, 
			cc.getOutputDir(), this.out.formatFile(), qid.toDirectoryName());
	}
	
	method visitStateDecl(node) {
		if (this.top) {
			this.top = false;
			this.handleTopLevelStateDecl(node);
		};
	}
}