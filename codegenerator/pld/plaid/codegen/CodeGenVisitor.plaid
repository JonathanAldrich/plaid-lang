package plaid.codegen;

import plaid.ast.*;
import plaid.ast.visitor.ASTVisitor;
import plaid.codegen.fragments.*;

state CodeGenVisitor = ASTVisitor
                       with ApplicationFragment
                       with AssignmentFragment
                       with CompilationUnitFragment
                       with DereferenceFragment
                       with FieldDeclFragment
                       with IDFragment
                       with ImportListFragment
                       with LambdaFragment
                       with LetBindingFragment
                       with LiteralFragment
                       with MethodDeclFragment
                       with StateDeclFragment {

	
	val jCodeGen = plaid.compilerjava.util.CodeGen;
	var /* CodeGen */ out = "";	// Java codegen helper object.
	var /* IdGen */ idgen = ""; // Plaid ID generator.

	// Additional fields for passing state around accept() calls.
	// Invariant: Assigned before accept() call, and copied to local variables
	// at the beginning of method call.
	// TODO: Reimplement using state change once that's working properly?
	var /* CompilationUnit */ currentCU;
	var /* QualifiedID */ packageName = "";
	var /* ImportList */ imports = "";
	var /* ID */ y = "";
	var /* Boolean */ top = false;

	method setLocation(token) {
		match (token) {
			case Some {
				val plaidToken = token.value;
				this.out.setLocation(this.currentCU.sourceFile, plaidToken.beginLine, plaidToken.beginColumn);
			}
			case None {
			}
		}
	}

	method visitCase(node) {
	
	}
	
	method visitChangeState(node) {
	
	}
	
	method visitDeclList(node) {
	
	}
	
	method visitMatch(node) {
	
	}
	
	method visitNewInstance(node) {
	
	}
	
	method visitQI(node) {
	
	}
	
	method visitWith(node) {
	
	}
}
