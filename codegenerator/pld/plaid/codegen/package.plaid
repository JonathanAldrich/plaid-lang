package plaid.codegen;

import plaid.ast.visitor.ASTViewer;
import plaid.ast.*;
import plaid.typechecker.*;
import plaid.typechecker.typecheckerMethods.*;

method main() {
	java.lang.System.out.println("1");
	val javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new("testInputs/simplePermClash/package.plaid")));
	java.lang.System.out.println("2");
	val translator = new ASTTranslator;
	java.lang.System.out.println("3");
	val plaidAST = translator.translateAST(javaAST);
	java.lang.System.out.println("4");
	val stTranslator = new StateTableBuilderVisitor;
	java.lang.System.out.println("5");
	plaidAST.accept(stTranslator);
	java.lang.System.out.println("6");
	stTranslator.stateTable.printTable();
	java.lang.System.out.println("7");
	stTranslator.initialContext.printContext();
	java.lang.System.out.println("8");
	
	// Bring AST to let normal form.
	plaidAST.accept(new LetNormalFormVisitor);
	java.lang.System.out.println("9");
	
	//plaidAST.accept(new ASTViewer);
	java.lang.System.out.println("10");
	
	// Run the type checking visitor.
	plaidAST.accept(typecheckerFactory(stTranslator.initialContext, stTranslator.stateTable));
	java.lang.System.out.println("11");
	
	java.lang.System.out.println("----------------");
	java.lang.System.out.println();
	plaidAST.accept(new TypecheckOutputVisitor);
	
	plaidAST.accept(new CodeGenVisitor);
}