package plaid.metadataCreation;

state Node {

  var tag="";
  var memberList = new plaid.lang.List { var head = new plaid.lang.Nil;};
  var isWith=true;
  var parentNode;
  var children = new plaid.lang.List { var head = new plaid.lang.Nil;};
  
  method setData( tagArg, memberListArg, isWithArg, parentNodeArg ){
  	this.tag=tagArg;
  	this.memberList=memberListArg;
  	this.isWith=isWithArg;
  	this.parentNode=parentNodeArg;
	parentNode.children.add(this);
  }
  
  /*creates a copy of the node on which it is called, with all fields the same, except the parent node, which is set to the node that is passed in as a parameter*/
  method copy(newParentNode){
  	var newNode = new Node;
  	newNode.setData(this.tag,this.memberList,this.isWith,newParentNode);
  	newNode;
  }
  
  method tags(){
  	var tagsList = new plaid.lang.List { var head = new plaid.lang.Nil;};
  	this.children.map(fn (a) => {
		tagsList = tagsHelper(a,tagsList);
	});
	tagsList;
  }
  
  method tagsHelper(node,tagsList){
  	var tagsToReturn = tagsList;
  	tagsToReturn.add(node.tag);
	node.children.map(fn (a) => {
		tagsToReturn = tagsHelper(a,tagsList);
	});
	tagsToReturn;
  }
  
  method members(){
  	var membersList = new plaid.lang.List { var head = new plaid.lang.Nil;};
  	this.children.map(fn (a) => {
		membersList = membersHelper(a,membersList);
	});
  	membersList;
  }
  
  method membersHelper(node,membersList){
  	var membersToReturn = membersList;
  	node.memberList.map(fn (a) => {
		membersList.add(a);
	});
	node.children.map(fn (a) => {
		membersToReturn = membersHelper(a,membersList);
	});
	membersToReturn;
  }
  
}