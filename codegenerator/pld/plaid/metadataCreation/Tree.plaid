package plaid.metadataCreation;

import plaid.metadataCreation.Node;

state Tree {

	var root = new Node;
	var targetNode = new plaid.lang.Nil;
	
	/*returns a copy of the tree on which it was called (in which each node is also a copy);targetNode is set equal to the node that corresponds to aNode, the node passed in as a parameter*/
	method copyTree(aNode){
		var newTree = new Tree;
		copyHelper(this.root, newTree.root, aNode, newTree);
		newTree;
	}
	
	method copyHelper(oldTreeNode, currTreeNode, aNode, newTree){
		oldTreeNode.children.map(fn (a) => {
			var newNode = a.copy(currTreeNode);
			this.copyHelper(a,newNode,aNode,newTree);
			if(aNode.tag==a.tag){
				newTree.targetNode = newNode;
			};
		});
	}
	
	method toMetadata(currRoot) {
  		var type="";
  		if (currRoot.isWith==true){
    		type="with";
  		};
  		var listToReturn = new plaid.lang.List { var head = new plaid.lang.Nil;};
  		listToReturn.add("'"+currRoot.tag+"'");
  		listToReturn.add(currRoot.memberList.toStringWithBrackets());
  		listToReturn.add("'"+type.toString()+"'");
  		var finalListToReturn = new plaid.lang.List { var head = new plaid.lang.Nil;};
  		finalListToReturn.add(listToReturn.toStringWithBrackets()); 		
  		currRoot.children.map(fn (a) => finalListToReturn.add(this.toMetadata(a)));
  		finalListToReturn.toStringWithBrackets();
	}
	
}