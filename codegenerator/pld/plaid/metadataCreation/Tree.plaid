package plaid.metadataCreation;

import plaid.metadataCreation.Node;

state Tree {

	var root = new Node;
	var targetNode = new plaid.lang.Nil;
	
	method linkedListToStringWithCommas(ll){
		var acc="[";
		var size = ll.size();
		var counter=0;
		ll.map(fn(s) => {
				match(s) {
					case LinkedList {
						acc=acc+(linkedListToStringWithCommas(s));
					}
					default {
						acc=acc+(s.toString());
					}
				};
				counter = counter+1;
				if (counter<size){
					acc=acc+(",");
				}
			});
		acc=acc+("]");
		acc;
	}
	
	/*returns a copy of the tree on which it was called (in which each node is also a copy);targetNode is set equal to the node that corresponds to aNode, the node passed in as a parameter*/
	method copyTree(aNode){
		var newTree = new Tree;
		copyHelper(this.root, newTree.root, aNode, newTree);
		newTree;
	}
	
	method copyHelper(oldTreeNode, currTreeNode, aNode, newTree){
		oldTreeNode.children.map(fn (a) => {
			var newNode = a.copy(currTreeNode);
			this.copyHelper(a,newNode,aNode,newTree);
			if(aNode.tag==a.tag){
				newTree.targetNode = newNode;
			};
		});
	}
	
	method toMetadata(currRoot) {
  		var type="";
  		if (currRoot.isWith==true){
    		type="with";
  		};
  		var listToReturn = new LinkedList;
  		listToReturn.addLast("'"+currRoot.tag+"'");
  		listToReturn.addLast( linkedListToStringWithCommas(currRoot.memberList) );
  		listToReturn.addLast("'"+type.toString()+"'");
  		var finalListToReturn = new LinkedList;
  		finalListToReturn.addLast( linkedListToStringWithCommas(listToReturn) ); 		
  		currRoot.children.map(fn (a) => finalListToReturn.addLast(this.toMetadata(a)));
  		linkedListToStringWithCommas(finalListToReturn);
	}
	
}