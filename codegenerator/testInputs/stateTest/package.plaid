package testInputs.stateTest;

var x = 10;

state Top {
	val x = 1;
	method getX() { this.x }
	method transition() { this <- Sub1 }
}

state Sub1 case of Top {
	method retX() { this.x }
	override method transition() { this <- Sub2 }
}

state Sub2 case of Top {
	method retX() { this.x + 1 }
}

state State1{
	val x = 1;
	method getX(){this.x;}
}

state State2{
	val y = 2;
	method getY(){this.y;}
}

state State1WithState2 = State1
						 with State2 {
					 	
}

method main() {
	val test = new Top;
	java.lang.System.out.println("this should be 1 : "+test.x);
	java.lang.System.out.println("this should be 1 : "+test.getX());
	test.transition();
	java.lang.System.out.println("this should be 1 : "+test.retX());
	match(test){
		case Sub1{
			java.lang.System.out.println("Sub1"); 
		}
		default {
			java.lang.System.out.println("default case");
		}
	};
	test.transition();
	java.lang.System.out.println("transition done");
	match(test){
		case Sub2{
			java.lang.System.out.println("This should be Sub2 : Sub2");
		}
		default {
			java.lang.System.out.println("default case");
		}	
	};
	java.lang.System.out.println("this should be 2 : "+test.retX());
	val st1 = new State1;
	java.lang.System.out.println("this should be 1 : "+st1.getX());
	val st1Withst2 = new State1WithState2;
	java.lang.System.out.println("this should be 2 : "+st1Withst2.getY());
	java.lang.System.out.println("this should be 10 : "+x);
}