package plaid.lang;

state ListCell {}

state Nil case of ListCell {
	method append(cell) {
		cell.copy()
	}
	
	method copy() {
		new Nil;
	}
}

state Cons case of ListCell {
	var value;
	var next;
	
	method append(cell) {
		next = next.append(cell);
		this
	}
	
	method copy() {
		new Cons { var value = this.value; var next = this.next.copy(); }
	}
}

state List {
	var head;
	
	method prepend(elem) {
		head = new Cons { var value = elem; var next = this.head; };
	}
	
	method append(list) {
		head = head.append(list.head);
	}
	
	method map(f) {
		new List { var head = this.mapHelper(f, this.head); }
	}
	
	method mapHelper(f, curr) {
		match (curr) {
			case Cons {
				val newVal = f(curr.value);
				new Cons with { var value = newVal; var next = mapHelper(f, curr.next); }
			}
			case Nil {
				curr
			}
			default {
				java.lang.System.out.println("bad");
			}
		};
	}
}