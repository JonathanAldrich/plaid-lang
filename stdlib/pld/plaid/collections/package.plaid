/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

method /*TreeSet<T>*/ makeTreeSet() {
	new TreeSet { val tree = makeAATree(); }
}

method /*TreeSet<T>*/ makeTreeSetWithOrder(immutable OrderProvider order) {
	new TreeSet { val tree = makeAATreeWithOrder(order); }
}

/* AATree constructors - not necessarily useful outwith the collections package,
 * as AATree is used as the backend of TreeSet and TreeMap, which are the real
 * public types.
 */
method /*T*/ unique AATree makeAATree() {
	new AATree {
		val explicitCompare = NONE;
	}
}

method /*T*/ unique AATree makeAATreeWithOrder(immutable OrderProvider op) {
	new AATree {
		val explicitCompare = createSome(op);
	}
}

method /*<T>*/ unique Array/*<T>*/ makeArray(immutable Int arrSize,/*immutable (immutable Int) -> T*/ populator) {
	val arr = new Array {
		contents = plaid.collections.JavaArrayWrapper.create(arrSize);
		contentsSize = arrSize;
	};

	var i = 0;
	while { i < arrSize } {
		arr.contents.set(i, populator(i));
		i = i + 1;
	};

	arr
}

method /*<T>*/ unique LinkedList/*<T>*/ makeLinkedList() {
	new LinkedList;
}