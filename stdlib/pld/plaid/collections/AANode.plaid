package plaid.collections;

state AANode {
	/* type T; */
	var /* Option<AANode<T>> */ left = new None;
	var /* Option<AANode<T>> */ right = new None;
	var /* Int */ level;
	var /* T */ data;

	method /* AANode */ skewOp() {
		printLine("performing skew");
		val top = this;
		left.map(fn(lNode) => {
			ifElse (level == lNode.level) {
				val newRoot = lNode;
				top.left = newRoot.right;
				newRoot.right = createSome(top);
				newRoot
			} {
				top
			}
		}).getOrElse(top)
	}

	method /* AANode */ splitOp() {
		printLine("performing split");
		val top = this;
		right.map(fn(rNode) => { 
			printLine("checking rrNode");
			rNode.right.map(fn(rrNode) => {
				printLine("checking level of rrNode");
				ifElse (level == rrNode.level) {
					val newRoot = rNode;
					top.right = newRoot.left;
					newRoot.left = createSome(top);
					newRoot.level = newRoot.level + 1;
					newRoot
				} {
					top
				}
			}).getOrElse(top)
		}).getOrElse(top)
	}

	method immutable String toString() {
		"AANode{level=" + level + ", left=" + left.toString() + ", right=" + right.toString() + "}"
	}
}