/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

/**
 * An implementation of Arne Andersson's simple balanced binary tree, with efficiency
 * theoretically equivalent to that of a red-black tree. Add and remove are O(log n)
 * worst case complexity. See the paper "Balanced search trees made simple" for more
 * information: http://user.it.uu.se/~arnea/abs/simp.html
 */
state AATree case of Collection {
	/* type T; */
	val /* Option<OrderProvider> */ explicitCompare;
	val /* T -> T -> T */ eqHandler = fn(newElem, oldElem) => { oldElem };

	var /* Option<AANode<T>> */ root = NONE;
	var /* Int */ elemCount = 0;

	/**
	 * Abstraction for comparison, which will either use the explicit comparator
	 * (if provided) or the order method provided on the Orderable elements
	 * directly.
	 */
	method immutable Ordering compare(/*T*/ a, /*T*/ b) {
		match(explicitCompare) {
			case Some {
				explicitCompare.getValue().order(a, b)
			}
			case None {
				// rely on the built in ordering for type T
				a.order(b)
			}
		}
	}

	/**
	 * Inserts an element into the tree, while maintaining balance. If the element already
	 * exists, the eqHandler function will decide what to do with the two equal values. By
	 * default, attempts to insert duplicate values will be ignored.
	 */
	method void add(elem) {
		var added = true;
		val addHelper = fn(nodeOpt) => {
			nodeOpt.map(fn(node) => {
				match(compare(elem, node.data)) {
					case OrdLessThan { node.left = addHelper(node.left) }
					case OrdGreaterThan { node.right = addHelper(node.right) }
					case OrdEqual { 
						node.data = eqHandler(elem, node.data);
						added = false;
					}
				};
				
				new Some { val value = node.skewOp().splitOp(); }
			}).getOrElse(new Some { 
				val value = new AANode { 
					var level = 1; 
					var data = elem;
				}; 
			})
		};
		root = addHelper(root);

		if(added) {
			elemCount = elemCount + 1;
		}
	}

	/**
	 * Removes an element from the tree, while maintaining balance.
	 */
	method immutable boolean remove(/*T*/ elem) {

		val findLeftmost = fn(node) => { node.left.map(fn(l) => { findLeftmost(l) }).getOrElse(node) };
		val findRightmost = fn(node) => { node.right.map(fn(r) => { findRightmost(r) }).getOrElse(node) };

		var removed = false;

		val removeHelper = fn(currentRootOpt, elemToDelete) => {
			currentRootOpt.flatMap(fn(currentRoot) => {
				match(compare(elemToDelete, currentRoot.data)) {
					case OrdLessThan {
						// element to remove may be to the left
						currentRoot.left = removeHelper(currentRoot.left, elemToDelete);
						createSome(currentRoot)
					}
					case OrdGreaterThan {
						// element to remove may be to the right
						currentRoot.right = removeHelper(currentRoot.right, elemToDelete);
						createSome(currentRoot)
					}
					case OrdEqual {
						// found the element to remove
						removed = true;

						ifElse(currentRoot.isLeaf()) {
							new None
						} {
							ifElse(currentRoot.left.hasValue()) {
								val predecessor = findRightmost(currentRoot.left.getValue());
								currentRoot.left = removeHelper(currentRoot.left, predecessor.data);
								currentRoot.data = predecessor.data;
								// XXX: createSome does not work here. Closure bug?
								createSome(currentRoot)
							} {
								val successor = findLeftmost(currentRoot.right.getValue());
								currentRoot.right = removeHelper(currentRoot.right, successor.data);
								currentRoot.data = successor.data;
								// XXX: createSome does not work here. Closure bug?
								createSome(currentRoot)
							};
						}
					}
				}
			}).map(fn(r) => { r.fixAfterRemove() })
		};

		root = removeHelper(root, elem);
		if(removed) {
			elemCount = elemCount - 1;
		};
		removed
	}

	/**
	 * Traverses the tree from least to greatest element in order, until
	 * the provided function returns false.
	 */
	method void inOrderTraverse(/*T -> boolean*/ f) {
		val traverseHelper = fn(nodeOpt) => {
			nodeOpt.map(fn(node) => {
				traverseHelper(node.left);
				if(f(node.data)) {
					traverseHelper(node.right);
				}
			})
		};

		traverseHelper(root);
	}

	method void do(f) {
		inOrderTraverse(fn(elem) => { f(elem); true });
	}

	method /*Option<T>*/ find(e) {
		val findHelper = fn(nodeOpt) => {
			nodeOpt.map(fn(node) => {
				match(compare(e, node.data)) {
					case OrdLessThan { findHelper(node.left) }
					case OrdEqual { node.data }
					case OrdGreaterThan { findHelper(node.right) }
				}
			})
		};

		findHelper(e);
	}

	method void size() {
		elemCount
	}
}
