/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

/**
 * A singly linked list of elements.
 */
state LinkedList case of Collection = {
	
	var head = new EndOfListNode;
	var listSize = 0;

	method reverseMap(f) {
		var resultList = new LinkedList;
		do(fn(elem) => { resultList.add(f(elem)); });
		resultList
	}

	method reverse() {
		reverseMap(fn(elem) => { elem })
	}

	method map(f) {
		reverseMap(f).reverse()
	}

	method doUntil(f) {
		var current = head;
		var done = false;
		while { !done } {
			match(current) {
				case ListValueNode {
					if(f(current.value)) {
						done = true;
					};

					current = current.tail;
				}
				default { 
					done = true;
				}
			}
		}
	}

	method immutable Integer size() {
		listSize
	}

	method immutable String toString() {
		"[" + reduce("", fn(acc, elem) => { acc + " " + elem.toString() }) + " ]"
	}

} with MutableCollection {
	method immutable Boolean add(e) {
		head = head.snoc(e);
		listSize = listSize + 1;
		true
	}

	method immutable Boolean filterUntil(condition, matcher) {
		var result = false;
		var last = NONE;
		var node = head;
		var done = false;
		while { !done } {
			match(node) {
				case EndOfListNode {
					done = true;
				}
				case ListValueNode {
					ifElse (matcher(node.value)) { 
						match(last) {
							case None { head = node.tail; }
							case Some { last.getValue().tail = node.tail; }
						};

						result = true;
						
						// check to see whether we should continue or not
						done = condition();
					} {
						last = makeSome(node);
					};

					node = node.tail;
				}
			}
		};

		result;
	}
}