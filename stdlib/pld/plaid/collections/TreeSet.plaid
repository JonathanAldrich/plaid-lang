/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

state TreeSet case of MutableCollection {
	
	val /*AATree*/ tree;

	method void do(f) {
		tree.inOrderTraverse(fn(elem) => { f(elem); true });
	}

	/*private*/ method mapHelper(newTree, f) {
		this.do(fn(elem) => {
			newTree.add(f(elem));
		});
	}

	// R *must* be a Comparable type. Not sure how to express
	// this in Plaid, also, this is likely breaks inheritance
	// wrt. the map method on Collection, which has no such
	// restriction as not all collection types are ordered.
	method /*TreeSet<R>>*/ map(/*T -> R*/ f) {
		mapHelper(makeTreeSet(), f)
	}

	method /*TreeSet<R>*/ mapWithOrder(/*T -> R*/ f, immutable OrderProvider order) {
		mapHelper(makeTreeSetWithOrder(order), f);
	}

	method find(/*T -> immutable Boolean*/ f) {
		val foundElem = NONE;
		tree.inOrderTraverse(fn(elem) => { ifElse(f(elem)) { foundElem = createSome(elem); false } { true } });
		foundElem;
	}

	method void add(/*T*/ e) {
		tree.add(e);
	}

	method immutable Boolean remove(/*T*/ e) {
		tree.remove(e);
	}

	method immutable Boolean contains(/*T*/ e) {
		tree.find(e).hasValue();
	}
}