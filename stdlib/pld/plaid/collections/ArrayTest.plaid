/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

import plaid.lang.testing.TestFactory;

state ArrayTest case of TestFactory {

	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		val identity = fn(x) => x;

		test("Create single element array", fn(ctx) => { 
			val array = makeArray(1, { 0 });
			ctx.assertTrue(array.get(0) == 0);
			array.set(0, 100);
			ctx.assertTrue(array.get(0) == 100);
		});

		test("Create multi element array with populator function", fn(ctx) => {
			val array = makeArray(100, identity);
			var index = 0;
			while { index < 100 } {
				ctx.assertTrue(array.get(index) == index);
				index = index + 1;
			};
		});

		test("Repeated assignment to cell", fn(ctx) => {
			val array = makeArray(10, { 0 });
			var index = 0;
			while { index < 10 } {
				ctx.assertTrue(array.set(index, 5) == 0);
				ctx.assertTrue(array.set(index, 10) == 5);
				ctx.assertTrue(array.set(index, 40) == 10);
				ctx.assertTrue(array.get(index) == 40);
				index = index + 1;
			}
		});

		test("Usage of map", fn(ctx) => {
			val array = makeArray(10, identity);
			val mapped = array.map(fn(x) => { x + 1 });
			ctx.assertTrue(mapped.size() == 10);
			var index = 0;
			while { index < 10 } {
				ctx.assertTrue(mapped.get(index) == index + 1);
				index = index + 1;
			};
		});

		test("Usage of do", fn(ctx) => {
			val array = makeArray(10, { 1 });
			var sum = 0;
			array.do(fn(x) => { sum = sum + x });
			ctx.assertTrue(sum == 10);
		});

		test("Usage of forall", fn(ctx) => {
			val array = makeArray(10, identity);
			ctx.assertTrue(array.forall(fn(x) => { x >= 0 }));
			array.set(0, -10);
			ctx.assertFalse(array.forall(fn(x) => { x >= 0 }));
		});

		test("Usage of find", fn(ctx) => {
			val array = makeArray(10, identity);
			val result = array.find(fn(x) => { x == 5 });
			match(result) {
				case None {
					ctx.fail();
				}
				case Some {
					ctx.assertTrue(result.getValue() == 5);
				}
			}
		});

		tests
	}
}