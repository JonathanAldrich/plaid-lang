package plaid.collections;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;

state ArrayTest case of TestFactory {

	method unique Test mktest(immutable String name, () -> immutable Boolean body) {
		new Test {
			val name = name;
			val body = body;
			var pass = true;

			method immutable String getName() { name }
			method immutable Boolean run() { 
				body(this);
				pass
			}

			method void assertFn(() -> immutable Boolean assertion) {
				pass = pass && assertion();
			}

			method void assertTrue(immutable Boolean assertion) {
				pass = pass && assertion;
			}

			method void assertFalse(immutable Boolean assertion) {
				pass = pass && (!assertion);
			}

			method void fail() {
				pass = false
			}
		}
	}

	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		val identity = fn(x) => x;

		test("Create single element array", fn(ctx) => { 
			val array = makeArray(1, { 0 });
			ctx.assertTrue(array.get(0) == 0);
			array.set(0, 100);
			ctx.assertTrue(array.get(0) == 100);
		});

		test("Create multi element array with populator function", fn(ctx) => {
			val array = makeArray(100, identity);
			var index = 0;
			while { index < 100 } {
				ctx.assertTrue(array.get(index) == index);
				index = index + 1;
			};
		});

		test("Repeated assignment to cell", fn(ctx) => {
			val array = makeArray(10, { 0 });
			var index = 0;
			while { index < 10 } {
				ctx.assertTrue(array.set(index, 5) == 0);
				ctx.assertTrue(array.set(index, 10) == 5);
				ctx.assertTrue(array.set(index, 40) == 10);
				ctx.assertTrue(array.get(index) == 40);
				index = index + 1;
			}
		});

		test("Usage of map", fn(ctx) => {
			val array = makeArray(10, identity);
			val mapped = array.map(fn(x) => { x + 1 });
			ctx.assertTrue(mapped.size() == 10);
			var index = 0;
			while { index < 10 } {
				ctx.assertTrue(mapped.get(index) == index + 1);
				index = index + 1;
			};
		});

		test("Usage of do", fn(ctx) => {
			val array = makeArray(10, { 1 });
			var sum = 0;
			array.do(fn(x) => { sum = sum + x });
			ctx.assertTrue(sum == 10);
		});

		test("Usage of forall", fn(ctx) => {
			val array = makeArray(10, identity);
			ctx.assertTrue(array.forall(fn(x) => { x >= 0 }));
			array.set(0, -10);
			ctx.assertFalse(array.forall(fn(x) => { x >= 0 }));
		});

		test("Usage of find", fn(ctx) => {
			val array = makeArray(10, identity);
			val result = array.find(fn(x) => { x == 5 });
			match(result) {
				case None {
					ctx.fail();
				}
				case Some {
					ctx.assertTrue(result.getValue() == 5);
				}
			}
		});

		tests
	}
}