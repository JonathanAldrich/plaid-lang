package plaid.collections;

import plaid.lang.testing.TestFactory;

state AATreeTest case of TestFactory {

	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		val intOrder = fn(a, b) => { 
			ifElse(a < b) {
				new LessThanCR
			} {
				ifElse(a == b) {
					new EqualCR
				} {
					new GreaterThanCR
				}
			}
		};

		test("check size after adding", fn(ctx) => {
			val tree = makeAATree(intOrder);
			ctx.assertTrue(0 == tree.size());
			tree.add(1);
			ctx.assertTrue(1 == tree.size());
			tree.add(2);
			ctx.assertTrue(2 == tree.size());
			tree.add(3);
			ctx.assertTrue(3 == tree.size());
			tree.add(2); // duplicate, will be ignored
			ctx.assertTrue(3 == tree.size());
		});

		test("add and remove all elements", fn(ctx) => {
			val tree = makeAATree(intOrder);
			printLine("begin add");
			ctx.assertTrue(0 == tree.size());
			tree.add(1);
			tree.add(2);
			tree.add(3);
			tree.add(4);
			tree.add(5);

			ctx.assertTrue(5 == tree.size());

			printLine("begin remove");
			ctx.assertTrue(tree.remove(3));
			ctx.assertTrue(tree.remove(2));
			ctx.assertTrue(tree.remove(5));
			ctx.assertTrue(tree.remove(4));
			ctx.assertTrue(tree.remove(1));

			printLine("check after remove");
			ctx.assertTrue(0 == tree.size());
		});

		tests
	}	
}