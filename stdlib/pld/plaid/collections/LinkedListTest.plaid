/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

import plaid.lang.testing.TestFactory;

state LinkedListTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		val makeSimpleList = fn() => {
			val list = makeLinkedList();
			list.add(1);
			list.add(2);
			list.add(3);
			list.add(4);

			// list is: [ 4 3 2 1 ]
			list
		};
	

		test("add inserts at front of list", fn(ctx) => {
			var list = makeSimpleList();
			ctx.assertTrue(list.size() == 4);

			var expected = 4;
			list.do(fn(elem) => { 
				ctx.assertTrue(expected == elem); 
				expected = expected - 1;
			});
		});

		test("addAll on linked list", fn(ctx) => {
			var list = makeSimpleList();
			var list2 = makeSimpleList();
			list.addAll(list2);

			ctx.assertTrue("[ 1 2 3 4 4 3 2 1 ]" == list.toString());
		});

		test("append on linked list", fn(ctx) => {
			var list = makeSimpleList();
			var list2 = makeSimpleList();
			list.append(list2);
			ctx.assertTrue("[ 4 3 2 1 4 3 2 1 ]" == list.toString());
			ctx.assertTrue("[ ]" == list2.toString());
		});

		test("toString on LinkedList", fn(ctx) => {
			val list = makeSimpleList();
			ctx.assertTrue("[ 4 3 2 1 ]" == list.toString());
		});


		test("reverseMap reverses relative ordering", fn(ctx) => {
			val list = makeSimpleList();
			val resultList = list.reverseMap(fn(elem) => { elem * 2 });
			ctx.assertTrue("[ 2 4 6 8 ]" == resultList.toString());
			ctx.assertTrue(4 == resultList.size());

			// original should not be touched
			ctx.assertTrue("[ 4 3 2 1 ]" == list.toString());
		});

		test("map preserves relative ordering", fn(ctx) => {
			val list = makeSimpleList();
			val resultList = list.map(fn(elem) => { elem * 2 });
			ctx.assertTrue("[ 8 6 4 2 ]" == resultList.toString());
			ctx.assertTrue("[ 4 3 2 1 ]" == list.toString());
		});

		test("reduce on linked list", fn(ctx) => {
			val list = makeSimpleList();
			ctx.assertTrue(list.reduce(0, fn(acc, x) => { acc + x }) == 10);
		});

		test("reduceLeft on linked list", fn(ctx) => {
			val list = makeSimpleList();
			
			// result should be (((0 - 4) - 3) - 2) - 1 = -10
			ctx.assertTrue(list.reduceLeft(0, fn(acc, x) => { acc - x }) == -10);
		});

		test("reduceLeft on empty linked list", fn(ctx) => {
			val list = makeLinkedList();
			ctx.assertTrue(list.reduceLeft(5, fn(acc, x) => { acc + x }) == 5);
		});

		test("reduceLeft on linked list", fn(ctx) => {
			val list = makeSimpleList();

			// result should be 4 - (3 - (2 - (1 - 0))) = 2
			ctx.assertTrue(list.reduceRight(fn(x, acc) => { x - acc }, 0) == 2);
		});

		test("reduceRight on empty linked list", fn(ctx) => {
			val list = makeLinkedList();
			ctx.assertTrue(list.reduceRight(fn(x, acc) => { x - acc }, 4) == 4);
		});

		test("reduceLeftInner on empty linked list", fn(ctx) => {
			val list = makeLinkedList();
			ctx.assertFalse(list.reduceLeftInner(fn(acc, x) => { acc + x}).hasValue());
		});

		test("reduceLeftInner on linked list", fn(ctx) => {
			val list = makeLinkedList();
			list.addLast("a");
			list.addLast("b");
			list.addLast("c");
			list.addLast("d");

			val result = list.reduceLeftInner(fn(acc, x) => { acc + ", " + x }).getValue();
			printLine(result);
			ctx.assertTrue("a, b, c, d" == result);
		});

		test("reduceRightInner on empty linked list", fn(ctx) => {
			val list = makeLinkedList();
			ctx.assertFalse(list.reduceRightInner(fn(x, acc) => { x - acc }).hasValue());
		});

		test("reduceRightInner on linked list", fn(ctx) => {
			val list = makeLinkedList();
			list.addLast("a");
			list.addLast("b");
			list.addLast("c");
			list.addLast("d");

			val result = list.reduceRightInner(fn(x, acc) => { "(" + x + " - " + acc + ")" }).getValue();
			printLine(result);
			ctx.assertTrue("(a - (b - (c - d)))" == result);
		});

		test("filter on linked list", fn(ctx) => {
			val list = makeSimpleList();
			ctx.assertTrue(list.filterAll(fn(elem) => { elem == 2 }));
			ctx.assertTrue("[ 4 3 1 ]" == list.toString());
			ctx.assertTrue(3 == list.size());
			
			ctx.assertFalse(list.filterAll(fn(elem) => { elem > 4 }));
			ctx.assertTrue(3 == list.size());

			ctx.assertTrue(list.filterAll(fn(elem) => { elem < 4 }));
			ctx.assertTrue("[ 4 ]" == list.toString());
			ctx.assertTrue(1 == list.size());
		});

		test("addLast on linked list", fn(ctx) => {
			val list = makeLinkedList();
			list.addLast(1);
			list.addLast(2);
			list.addLast(3);
			list.addLast(4);

			ctx.assertTrue("[ 1 2 3 4 ]" == list.toString());
			ctx.assertTrue(4 == list.size());
		});

		test("get on linked list", fn(ctx) => {
			val list = makeSimpleList();
			ctx.assertFalse(list.get(-100).hasValue());
			ctx.assertFalse(list.get(-1).hasValue());
			ctx.assertTrue(list.get(0).hasValue());
			ctx.assertTrue(list.get(0).getValue() == 4);
			ctx.assertTrue(list.get(3).hasValue());
			ctx.assertTrue(list.get(3).getValue() == 1);
			ctx.assertFalse(list.get(4).hasValue());
			ctx.assertFalse(list.get(100).hasValue());
		});

		test("zip on linked list", fn(ctx) => {
			val list = makeSimpleList();
			val list2 = makeSimpleList();
			list2.addLast(100);
			list2.addLast(101);


			val zipped = list.zip(list2);
			ctx.assertTrue(zipped.size() == 4);
			ctx.assertTrue("[ (4, 4) (3, 3) (2, 2) (1, 1) ]" == zipped.toString());
		});

		test("asIndexMap on linked list", fn(ctx) => {
			val list = makeSimpleList();
			val map = list.asIndexMap();

			ctx.assertTrue(4 == map.size());
			// printLine(">>>" + map.get(0).getValue());
			ctx.assertTrue(4 == map.get(0).getValue());
			ctx.assertTrue(3 == map.get(1).getValue());
			ctx.assertTrue(2 == map.get(2).getValue());
			ctx.assertTrue(1 == map.get(3).getValue());
		});


		tests
	}
}