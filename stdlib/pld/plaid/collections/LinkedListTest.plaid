/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

import plaid.lang.testing.TestFactory;

state LinkedListTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		val makeSimpleList = fn() => {
			val list = makeLinkedList();
			list.add(1);
			list.add(2);
			list.add(3);
			list.add(4);

			list
		};
	

		test("add inserts at front of list", fn(ctx) => {
			var list = makeSimpleList();
			ctx.assertTrue(list.size() == 4);

			var expected = 4;
			list.do(fn(elem) => { 
				ctx.assertTrue(expected == elem); 
				expected = expected - 1;
			});
		});

		test("reverseMap reverses relative ordering", fn(ctx) => {
			val list = makeSimpleList();

			val resultList = list.reverseMap(fn(elem) => { elem * 2 });

			var expected = 2;
			resultList.do(fn(elem) => {
				ctx.assertTrue(elem == expected);
				expected = expected + 2;
			})
		});

		test("map preserves relative ordering", fn(ctx) => {
			var list = makeSimpleList();

			// list is: [4 3 2 1]

			val resultList = list.map(fn(elem) => { elem * 2 });

			// resultList should be: [8 6 4 2]

			var expected = 8;
			resultList.do(fn(elem) => {
				ctx.assertTrue(expected == elem); 
				expected = expected - 2;
			});
		});

		test("toString on LinkedList", fn(ctx) => {
			val list = makeSimpleList();
			printLine(list.toString());
			ctx.assertTrue("[ 4 3 2 1 ]" == list.toString());
		});

		tests
	}
}