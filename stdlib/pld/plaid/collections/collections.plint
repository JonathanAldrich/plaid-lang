package plaid.collections;

/* INITIAL DESIGN DECISIONS
 *
	focus on mutable collections
	avoid methods that require equals
	support interfaces: Collection, MutableCollection, List, Set, Map
		(and one implementation of each of List, Set, Map)
	
	later add immutable collections, other features
*/

// Syntax guidance for 
// Generic types: "Collection { type T = int }"
// Generic type sugar: "new Collection<Int>"
// Dependent types: myColl.T
// Method parameters: "T identity<T>(T x)"
// Calls to parameterized methods: "identity<Integer>(5)"

state Collection {
	type T;
	
	Collection<R> map<R>(T -> R f)
	R reduce<R>(T base, T * T -> R f)
	T find(T -> Boolean f) // returns one element nondeterministically
	void do(T -> void f)
	Integer size()
	
	// Boolean contains(T e) // requires equals
}

// support isEmpty via an Empty state
// add iterators eventually (for when external iteration is needed)
// equals/hashcode through a different mechanism - see Frank Tip paper

// implement later; not clear the method names are right
state ImmutableCollection case of Collection {
	copyWith
	copyWithAll
	copyWithout
	copySelecting
}

state MutableCollection case of Collection {
	add(e)
	addAll(c)
	clear()
	select(f)
	
	//remove // requires equals
}

// method names right?  maybe postpone this?
state OrderedCollection {
	append
	prepend
}

state Map {
	type Key;
	type Value;
	
	get(i)
}
state MutableMap case of Map {
	put(i, e)
}

// maybe abbreviate IndexedCollection[X] = Map[Int,X]

// interface
state List case of Map {
	type Key = Integer;
}

List makeArrayList();

