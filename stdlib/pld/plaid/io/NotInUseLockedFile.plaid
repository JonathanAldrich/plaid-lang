package plaid.io;

state NotInUseLockedFile case of LockedFile
{
	
	method unique FileByteInputStream<Int8> openReadByte() 
	{
		
		var fs = java.io.FileInputStream.new(this.name);
		var first = fs.read();
		
		ifElse (first != -1)
		{
			new FileByteInputStream with
			{
				var javaFileInputStream = java.io.FileInputStream.new(this.name);
			};
		}{
			new DepletedStream{};
		};
	}
	
	method unique FileByteOutputStream<Int8> openWriteByte()
	{
	
		//this <- LockedFile;
		new FileByteOutputStream with
		{
			var javaFileByteOutputStream = java.io.FileOutputStream.new(this.fileReference);
		};
	}
	
	
	
	method unique FileCharOutputStream<Character> openWriteChar()
	{
		new FileCharOutputStream with
		{
			var javaFileCharOutputStreamBridgeVariable = java.io.FileWriter.new(this.fileReference);
		};
	}


	method unique FileByteOutputStream<Character> openWriteByte()
	{
		new FileByteOutputStream with
		{
			var javaFileByteOutputStream = java.io.FileOutputStream.new(this.fileReference);
		};
	}
	
	
	method unlock()
	{
		//this <-UnlockedFile;
		//to be determined
	}
	
	//method unique FileByteRandomAccessStream openReadWrite(); //random access of java

}