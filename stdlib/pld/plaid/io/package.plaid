package plaid.io;

method unique ReadableStream arrayToStream(arrayInstance)
{
	val thearray = arrayInstance;
	
	if(thearray.size() > 0) 
	{
			new ReadableStream {
			val array = thearray;
			var position = 0;

			method unique T read()
			{
				ifElse(position == (array.size() - 1) )
				{
					printLine(array.get(position));
					new DepletedStream{};
				}{
					position = position + 1;
					array.get(position - 1);
				};
			}
		};
	};
}


method makePathElement(immutable String path)//constructor naming standard for plaid
{
	makePathElementFromFile(java.io.File.new(path));
}


method makePathElementFromFile(fileObj)
{
	val tempfileRef = fileObj;
	val tempfilename = tempfileRef.getName();
	val tempfilefullpath = tempfileRef.getAbsolutePath();
	val tempfileparentdir = tempfileRef.getParent();
	val tempsize = tempfileRef.length();
	
	ifElse(tempfileRef.isFile())
	{
		new UnlockedFile with
		{
			val fileReference = tempfileRef;
			val name = tempfilename;
			val fullPath = tempfilefullpath;
			val parentDir = tempfileparentdir;
			val size = tempsize;
		};
	}{
		ifElse(tempfileRef.isDirectory())
		{
			
			new Directory with{
				val fileReference = tempfileRef;
				val name = tempfilename;
				val fullPath = tempfilefullpath;
				val parentDir = tempfileparentdir;
				val size = tempsize;
			};
		
		}{
			
			new NonExistent with {
				val fileReference = tempfileRef;
				val name = tempfilename;
				val fullPath = tempfilefullpath;
				val parentDir = tempfileparentdir;
				val size = tempsize;
			};
		}
	}
}


method makeStringOutputStream()
{
	new StringOutputStream with
	{
		var stringOutputStreamBridgeVariable = java.lang.StringBuilder.new();
	};
}