/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang.globals;


method refEq(a,b) {
    _native.refEq(a,b)
}

//boolean constants
val true = new True;
val false = new False;

var if = fn (bool) => {
	match (bool) {
        case True {
        	fn (func) => func ();
        }
        case False {
            fn (func) => unit;
        }
    };
};

var ifElse = fn (bool) => {
	match (bool) {
        case True {
        	fn (trueClause) => fn (falseClause) => trueClause ();
        }
        case False {
            fn (trueClause) => fn (falseClause) => falseClause ();
        }
    };
};

var while = fn (cond) => fn (body) => (new While {val condition = cond; val whileBody = body; }).whileLoop();

//Option constants
val createSome = fn (theValue) => new Some { val value = theValue; };

val NONE = new None;

//list constants
val makeEmptyList = fn() => new List { var head = new Nil; };

//pair constants
val makePair = fn (f,s) => new Pair { fst = f; snd = s; };

//convert java list to plaid list
val makeListFromJava = fn (list) => {
	val iter = list.iterator();
	val newList = new List { var head = new Nil; };
	while {iter.hasNext();} {
		newList.add(iter.next());
	};
	newList
};

val mapsEqual = fn (/*immutable Map<?,?>*/ map1, /*immutable Map<?,?>*/ map) => {
	match (argsOk && this.environmentType.size() == other.environmentTypes.size()) {
		case True {
			var envOk = true;
			val it = map1.keySet().iterator();
			while {it.hasNext() && envOk} {
				val key = it.next();
				envOk = map1.get(key) == map2.get(key); 
			};
			envOk;
		}
		case False { false }
	}
};


val printLine = fn (immutable String message) => {
    java.lang.System.out.println(message);
};

val print = fn (immutable String message) => {
    java.lang.System.out.print(message);
};

val plaidListToJavaList = fn (plist) =>  {
    val jlist = java.util.ArrayList.new();
    
    plist.map( fn (value) => jlist.add(value) );
    
    jlist
};

