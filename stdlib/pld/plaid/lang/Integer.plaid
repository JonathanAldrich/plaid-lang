/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

state Integer case of Number {
	
	// NATIVE DEPENDENCY: in the Java runtime, this is a java.math.BigInteger
	// in Javascript, ???
	// required methods:
	// add(x), subtract(x), multiply(x), divide(x), mod(x), equals(), 
	// compareTo(), hashCode()
	val nativeInt;

	method immutable Integer +(immutable Number operand) {
		new Integer { val nativeInt = nativeInt.add(operand.asInteger().nativeInt); }
	}

	method immutable Integer -(immutable Number operand) {
		new Integer { val nativeInt = nativeInt.subtract(operand.asInteger().nativeInt); }
	}

	method immutable Integer *(immutable Number operand) {
		new Integer { val nativeInt = nativeInt.multiply(operand.asInteger().nativeInt); }
	}

	method immutable Integer /(immutable Number operand) {
		new Integer { val nativeInt = nativeInt.divide(operand.asInteger().nativeInt); }
	}

	method immutable Integer %(immutable Number operand) {
		new Integer { val nativeInt = nativeInt.mod(operand.asInteger().nativeInt); }
	}

	method immutable Boolean ==(immutable Number operand) {
		nativeInt.equals(operand.asInteger().nativeInt)
	}

	method immutable Boolean <(immutable Number operand) {
		nativeInt.compareTo(operand.asInteger().nativeInt) == -1
	}

	method immutable Integer asInteger() { 
		this 
	}

	method immutable Real asReal() { 
		new Real { val nativeReal = java.math.BigDecimal.new(nativeInt); }
	}

	method immutable Integer hash() {
		new Integer { val nativeInt = java.math.BigInteger.valueOf(nativeInt.hashCode()); }
	}
	
	method immutable String toString() {
	   nativeInt.toString()
    }
}