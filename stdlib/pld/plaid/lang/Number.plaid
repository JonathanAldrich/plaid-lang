/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

/**
 * Abstract parent type of all numeric types in Plaid, providing a means to compare any
 * two numbers of any type by conversion to the appropriate intersection type.
 * 
 * There are two broad categories of numeric type: integers and rationals. All types
 * are signed, with a range of legal values depending upon their underlying representation.
 * The integer types are: Int8, Int16, Int32, Int64, Integer.
 * The rational types are: Float32, Float64, Decimal, Rational.
 *
 *
 * Comparison must be done with the aid of the underlying runtime system, through the
 * use of three special methods: nativeEquals(other) and nativeLessThan(other). Explicit
 * conversion between built-in numeric types is made possible through the use of
 * asX() methods, e.g. asInteger(), asRational(), asFloat32().
 */
state Number case of Orderable/*<Number>*/  = {

	method immutable Boolean == (immutable Number other) {
		val compatibleVals = convertToCompatible(this, other);
		compatibleVals.fst.nativeEquals(compatibleVals.snd)
	}

	method immutable Boolean < (immutable Number other) {
		val compatibleVals = convertToCompatible(this, other);
		compatibleVals.fst.nativeLessThan(compatibleVals.snd)
	}

	/**
	 * Takes two Numbers and converts them to a consistent type where they can be directly 
	 * and accurately compared/ordered using nativeCompare and nativeLessThan.
	 */
	method immutable Pair convertToCompatible(a, b) {
		match(a) {
			case Int8 {
				match(b) {
					case Int8    { makePair(a              , b              ) }
					case Int16   { makePair(a.asInt16()    , b              ) }
					case Int32   { makePair(a.asInt32()    , b              ) }
					case Int64   { makePair(a.asInt64()    , b              ) }
					case Float32 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float64 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Integer { makePair(a.asInteger()  , b              ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Int16 {
				match(b) {
					case Int8    { makePair(a              , b.asInt16()    ) }
					case Int16   { makePair(a              , b              ) }
					case Int32   { makePair(a.asInt32()    , b              ) }
					case Int64   { makePair(a.asInt64()    , b              ) }
					case Float32 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float64 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Integer { makePair(a.asInteger()  , b              ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Int32 {
				match(b) {
					case Int8    { makePair(a              , b.asInt32()    ) }
					case Int16   { makePair(a              , b.asInt32()    ) }
					case Int32   { makePair(a              , b              ) }
					case Int64   { makePair(a.asInt64()    , b              ) }
					case Float32 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float64 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Integer { makePair(a.asInteger()  , b              ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Int64 {
				match(b) {
					case Int8    { makePair(a              , b.asInt64()    ) }
					case Int16   { makePair(a              , b.asInt64()    ) }
					case Int32   { makePair(a              , b.asInt64()    ) }
					case Int64   { makePair(a              , b.asInt64()    ) }
					case Float32 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float64 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Integer { makePair(a.asInteger()  , b              ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Float32 {
				match(b) {
					case Int8    { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int16   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int32   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int64   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float32 { makePair(a              , b              ) }
					case Float64 { makePair(a.asFloat64()  , b              ) }
					case Integer { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Float64 {
				match(b) {
					case Int8    { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int16   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int32   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Int64   { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float32 { makePair(a              , b.asFloat64()  ) }
					case Float64 { makePair(a              , b              ) }
					case Integer { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Integer {
				match(b) {
					case Int8    { makePair(a              , b.asInteger()  ) }
					case Int16   { makePair(a              , b.asInteger()  ) }
					case Int32   { makePair(a              , b.asInteger()  ) }
					case Int64   { makePair(a              , b.asInteger()  ) }
					case Float32 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Float64 { makePair(a.asDecimal()  , b.asDecimal()  ) }
					case Integer { makePair(a              , b              ) }
					case Decimal { makePair(a.asDecimal()  , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			case Decimal {
				match(b) {
					case Int8    { makePair(a              , b.asDecimal()  ) }
					case Int16   { makePair(a              , b.asDecimal()  ) }
					case Int32   { makePair(a              , b.asDecimal()  ) }
					case Int64   { makePair(a              , b.asDecimal()  ) }
					case Float32 { makePair(a              , b.asDecimal()  ) }
					case Float64 { makePair(a              , b.asDecimal()  ) }
					case Integer { makePair(a              , b.asDecimal()  ) }
					case Decimal { makePair(a              , b              ) }
					default      { makePair(a.asRational() , b.asRational() ) }
				}
			}

			default {
				makePair(a.asRational(), b.asRational())
			}
		}
	}

	/**
	 * All subtypes of Number are expected to provide a version of this method which
	 * accept a value of the same type as the receiver, and return true if the two
	 * values are "equal" as defined by the underlying native numeric type.
	 *
	 * I don't believe self types can be expressed in Plaid just now.
	 */
	method immutable Boolean nativeEquals(other);

	/**
	 * All subtypes of Number are expected to provide a version of this method which
	 * accept a value of the same type as the receiver, and return true if the
	 * receiver is "less than" the other value as defined by the underlying native
	 * numeric type.
	 *
	 * I don't believe self types can be expressed in Plaid just now.
	 */
	method immutable Boolean nativeLessThan(other);

	method immutable Integer asInteger();
	method immutable Rational asRational();
	method immutable Decimal asDecimal();
	method immutable Int8 asInt8();
	method immutable Int16 asInt16();
	method immutable Int32 asInt32();
	method immutable Int64 asInt64();
	method immutable Float32 asFloat32();
	method immutable Float64 asFloat64();

} with Hashable