/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

import plaid.lang.testing.TestFactory;

state JavaInteropTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };

		test("Call method which takes single String parameter", fn(ctx) => {
			ctx.assertTrue("Hi\n" == plaid.lang.JavaInteropTestHelper.addNewLine("Hi"));
		});

		test("Call method which takes String parameters", fn(ctx) => {
			ctx.assertTrue("Hello There" == plaid.lang.JavaInteropTestHelper.concatenate("Hello ", "There"));
		});

		test("Widening: call Java method which takes long parameter using smaller types", fn(ctx) => {
			ctx.assertTrue(1 == plaid.lang.JavaInteropTestHelper.longIdent((1).asInt8()));
			ctx.assertTrue(1 == plaid.lang.JavaInteropTestHelper.longIdent((1).asInt16()));
			ctx.assertTrue(1 == plaid.lang.JavaInteropTestHelper.longIdent((1).asInt32()));
		});

		test("Narrowing: call Java methods which take primitive types with Integer literal", fn(ctx) => {
			ctx.assertTrue(match(plaid.lang.JavaInteropTestHelper.longIdent(1)) { case Int64 { true } default { false }});
			ctx.assertTrue(match(plaid.lang.JavaInteropTestHelper.intIdent(1)) { case Int32 { true } default { false }});
			ctx.assertTrue(match(plaid.lang.JavaInteropTestHelper.shortIdent(1)) { case Int16 { true } default { false }});
			ctx.assertTrue(match(plaid.lang.JavaInteropTestHelper.byteIdent(1)) { case Int8 { true } default { false }});
		});

		test("Narrowing: call overloaded method with Integer literal should call least narrowed alternative", fn(ctx) => {
			ctx.assertTrue(plaid.lang.JavaInteropTestHelper.select(1));
		});

		test("Selection: call overloaded method with multiple parameters", fn(ctx) => {
			ctx.assertTrue(1 == plaid.lang.JavaInteropTestHelper.selectMulti(1, 2, 3));
			//ctx.assertTrue(3 == plaid.lang.JavaInteropTestHelper.selectMulti((1).asInt8(), (2).asInt8(), (3).asInt8()));
			//ctx.assertTrue(2 == plaid.lang.JavaInteropTestHelper.selectMulti((1).asInt32(), (2).asInt32(), 3));
		});

		test("Call Java method which takes int parameters using Integer plaid values", fn(ctx) => {
			val result = plaid.lang.JavaInteropTestHelper.mulDiv(5, 10, 2);
			ctx.assertTrue(match(result) { case Int32 { true } default { false }});
			ctx.assertTrue(25 == result);
		});

		test("Call method which takes Int64 parameters using Integer plaid values", fn(ctx) => {
			val result = plaid.lang.JavaInteropTestHelper.mulDivLong(5, 10, 2);
			ctx.assertTrue(match(result) { case Int64 { true } default { false }});
			ctx.assertTrue(25 == result);
		});

		tests
	}
}