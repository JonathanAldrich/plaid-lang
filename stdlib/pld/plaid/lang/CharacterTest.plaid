/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

import plaid.lang.testing.TestFactory;

state CharacterTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
	
		val aAsLiteral = 'a';
		val aAsOctal = '\141';
		val aAsUnicode = '\u0061';

		val newLineAsLiteral = '\n';
		val XAsLiteral = 'X';
		val XAsOctal = '\130';
		val piAsUnicode = '\u03C0';

		test("Character equality", fn(ctx) => {
			ctx.assertTrue(aAsLiteral == aAsLiteral);
			ctx.assertTrue(aAsLiteral == aAsOctal);
			ctx.assertTrue(aAsOctal == aAsLiteral);
			ctx.assertTrue(aAsLiteral == aAsUnicode);
			ctx.assertTrue(aAsUnicode == aAsLiteral);
			ctx.assertTrue(aAsOctal == aAsUnicode);
			ctx.assertTrue(aAsUnicode == aAsOctal);

			ctx.assertTrue(XAsLiteral == XAsOctal);
			ctx.assertFalse(aAsLiteral == XAsLiteral);
			ctx.assertFalse(XAsLiteral == newLineAsLiteral);
		});

		test("Character inequality", fn(ctx) => {
			ctx.assertFalse(aAsLiteral != aAsLiteral);
			ctx.assertFalse(aAsLiteral != aAsOctal);
			ctx.assertTrue(aAsLiteral != newLineAsLiteral);
			ctx.assertTrue(aAsLiteral != XAsLiteral);
			ctx.assertTrue(newLineAsLiteral != aAsUnicode);
			ctx.assertTrue(aAsLiteral != piAsUnicode);
		});

		test("Character ordering", fn(ctx) => {
			ctx.assertTrue(newLineAsLiteral < aAsLiteral);
			ctx.assertTrue(newLineAsLiteral < XAsLiteral);
			ctx.assertTrue(XAsLiteral < aAsLiteral);
			ctx.assertFalse(aAsLiteral < newLineAsLiteral);
			ctx.assertTrue(aAsLiteral >= newLineAsLiteral);
			ctx.assertFalse(newLineAsLiteral >= aAsLiteral);
		});

		tests
	}
}