/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

state Real case of Number {
	
	// NATIVE DEPENDENCY: in the Java runtime, this is a java.math.BigDecimal
	// in Javascript, ???
	// required methods:
	// add(x), subtract(x), multiply(x), divide(x), mod(x), equals(x), 
	// compareTo(x), hashCode()
	val nativeReal;

	method immutable Real +(immutable Number operand) {
		new Real { val nativeReal = nativeReal.add(operand.asReal().nativeReal); }
	}

	method immutable Real -(immutable Number operand) {
		new Real { val nativeReal = nativeReal.subtract(operand.asReal().nativeReal); }
	}

	method immutable Real *(immutable Number operand) {
		new Real { val nativeReal = nativeReal.multiply(operand.asReal().nativeReal); }
	}

	method immutable Real /(immutable Number operand) {
		new Real { val nativeReal = nativeReal.divide(operand.asReal().nativeReal); }
	}

	method immutable Real %(immutable Number operand) {
		new Real { val nativeReal = nativeReal.mod(operand.asReal().nativeReal); }
	}

	method immutable Boolean ==(immutable Number operand) {
		nativeReal.equals(operand.asReal().nativeReal)
	}

	method immutable Boolean <(immutable Number operand) {
		nativeReal.compareTo(operand.asReal().nativeReal) == -1
	}

	method immutable Integer asInteger() { 
		new Integer { val nativeInt = nativeReal.toBigInteger(); }
	}

	method immutable Real asReal() { 
		this
	}

	method immutable Integer hash() {
		new Integer { val nativeInt = java.math.BigInteger.valueOf(nativeReal.hashCode()); }
	}
	
	method immutable String toString() {
	   nativeReal.toString()
	}
}