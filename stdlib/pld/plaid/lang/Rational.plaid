/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

state Rational case of Number {
	
	// NATIVE DEPENDENCY: in the Java runtime, this is a BigRational
	// required methods:
	// add(x), subtract(x), multiply(x), divide(x), mod(x), equals(x), 
	// compareTo(x), hashCode()
	val nativeRational;

	method immutable Rational +(immutable Rational operand) {
		new Rational { val nativeRational = nativeRational.add(operand.asRational().nativeRational); }
	}

	method immutable Rational -(immutable Rational operand) {
		new Rational { val nativeRational = nativeRational.subtract(operand.nativeRational); }
	}

	method immutable Rational *(immutable Rational operand) {
		new Rational { val nativeRational = nativeRational.multiply(operand.nativeRational); }
	}

	method immutable Rational /(immutable Rational operand) {
		new Rational { val nativeRational = nativeRational.divide(operand.nativeRational); }
	}

	method immutable Rational %(immutable Rational operand) {
		new Rational { val nativeRational = nativeRational.mod(operand.nativeRational); }
	}

	method immutable Boolean nativeEquals(immutable Rational operand) {
		nativeRational.equals(operand.nativeRational)
	}

	method immutable Boolean nativeLessThan(immutable Rational operand) {
		nativeRational.compareTo(operand.nativeRational) == -1
	}

	method immutable Integer asInteger() {
		new Integer { val nativeInt = nativeRational.toBigInteger(); }
	}

	method immutable Real asRational() { 
		this
	}

	method immutable Integer hash() {
		new Integer { val nativeInt = nativeReal.hashCode(); }
	}
	
	method immutable String toString() {
	   nativeReal.toString()
	}
}