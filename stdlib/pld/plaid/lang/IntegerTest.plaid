/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

import plaid.lang.testing.TestFactory;

state IntegerTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
	
		test("Integer equality", fn(ctx) => {
			ctx.assertTrue(0 == 0);
			ctx.assertTrue(1 == 1);
			ctx.assertTrue(-1 == -1);
			ctx.assertFalse(0 == 1);
			ctx.assertFalse(1 == 0);
			ctx.assertFalse(1 == -1);
		});

		test("Integer inequality", fn(ctx) => {
			ctx.assertTrue(0 != 1);
			ctx.assertTrue(1 != 0);
			ctx.assertFalse(0 != 0);
			ctx.assertTrue(1 != -1);
			ctx.assertTrue(-1 != 1);
		});

		test("Integer less than", fn(ctx) => {
			ctx.assertTrue(0 < 1);
			ctx.assertFalse(1 < 0);
			ctx.assertTrue(-1 < 1);
			ctx.assertFalse(1 < -1);
		});
		
		test("Integer less than or equal", fn(ctx) => {
			ctx.assertTrue(0 <= 0);
			ctx.assertTrue(1 <= 1);
			ctx.assertTrue(-1 <= -1);
			ctx.assertTrue(0 <= 1);
			ctx.assertFalse(1 <= 0);
			ctx.assertTrue(-1 <= 1);
			ctx.assertFalse(1 <= -1);
		});

		test("Integer greater than", fn(ctx) => {
			ctx.assertTrue(1 > 0);
			ctx.assertFalse(0 > 1);
			ctx.assertTrue(1 > -1);
			ctx.assertFalse(-1 > 1);
		});

		test("Integer greater than or equal", fn(ctx) => {
			ctx.assertTrue(0 >= 0);
			ctx.assertTrue(1 >= 1);
			ctx.assertTrue(-1 >= -1);
			ctx.assertTrue(1 >= 0);
			ctx.assertFalse(0 >= 1);
			ctx.assertTrue(1 >= -1);
			ctx.assertFalse(-1 >= 1);
		});

		/* rationals not yet implemented fully, disabled for now
		test("Comparing Integers and Rationals", fn(ctx) => {
			ctx.assertTrue(0 == 0.0);
			ctx.assertTrue(0.0 == 0);
			ctx.assertTrue(1 > 0.99);
			ctx.assertFalse(0.99 > 1);
			ctx.assertTrue(0 >= -1.0);
			ctx.assertFalse(-1.0 >= 0);
			ctx.assertTrue(-1 < 0.0);
			ctx.assertFalse(0.0 < -1);
			ctx.assertTrue(-1 <= 1.0);
			ctx.assertFalse(1.0 <= -1);
		});
		*/

		tests
	}
}