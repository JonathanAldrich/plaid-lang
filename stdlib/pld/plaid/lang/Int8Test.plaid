/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

import plaid.lang.testing.TestFactory;


state Int8Test case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
	
		val zero = (0).asInt8();
		val one = (1).asInt8();
		val negOne = (-1).asInt8();
		val minVal = (-128).asInt8();
		val maxVal = (127).asInt8();

		test("Int8 values retained correct type", fn(ctx) => {
			val checkType = fn(x) => { match(x) { case Int8 { true } default { false }}};
			ctx.assertTrue(checkType(zero));
			ctx.assertTrue(checkType(one));
			ctx.assertTrue(checkType(negOne));
			ctx.assertTrue(checkType(minVal));
			ctx.assertTrue(checkType(maxVal));
		});

		test("Int8 equality", fn(ctx) => {
			ctx.assertTrue(zero == zero);
			ctx.assertTrue(one == one);
			ctx.assertTrue(negOne == negOne);

			ctx.assertFalse(zero == one);
			ctx.assertFalse(one == negOne);
		});

		test("Int8 inequality", fn(ctx) => {
			ctx.assertFalse(zero != zero);
			ctx.assertFalse(one != one);
			ctx.assertFalse(negOne != negOne);

			ctx.assertTrue(zero != one);
			ctx.assertTrue(one != negOne);
		});

		test("Int8 ordering", fn(ctx) => {
			ctx.assertTrue(zero < one);
			ctx.assertFalse(one < zero);
			ctx.assertTrue(negOne < one);
			ctx.assertFalse(one < negOne);

			ctx.assertTrue(minVal < maxVal);
		});

		test("Int8 overflow", fn(ctx) => {
			ctx.assertTrue((minVal - one) == maxVal);
			ctx.assertTrue((maxVal + one) == minVal);
		});

		tests
	}
}