/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.lang;

import plaid.lang.testing.TestFactory;

state BooleanTest case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeEmptyList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };

		test("Boolean equality", fn(ctx) => {
			ctx.assertTrue(false == false);
			ctx.assertFalse(false == true);
			ctx.assertFalse(true == false);
			ctx.assertTrue(true == true);
		});

		test("xor of Booleans", fn(ctx) => {
			ctx.assertFalse(false.XOR(false));
			ctx.assertTrue(false.XOR(true));
			ctx.assertTrue(true.XOR(false));
			ctx.assertFalse(true.XOR(true));
		});

		test("Boolean OR (||)", fn(ctx) => {
			ctx.assertFalse(false || false);
			ctx.assertTrue(false || true);
			ctx.assertTrue(true || false);
			ctx.assertTrue(true || true);
		});

		test("Boolean AND (&&)", fn(ctx) => {
			ctx.assertFalse(false && false);
			ctx.assertFalse(false && true);
			ctx.assertFalse(true && false);
			ctx.assertTrue(true && true);
		});

		test("Boolean logical implication (-->)", fn(ctx) => {
			ctx.assertTrue(false --> false);
			ctx.assertTrue(false --> true);
			ctx.assertFalse(true --> false);
			ctx.assertTrue(true --> true);
		});

		test("Boolean toString", fn(ctx) => {
			ctx.assertTrue(true.toString() == "true");
			ctx.assertTrue(false.toString() == "false");
		});

		tests
	}
}