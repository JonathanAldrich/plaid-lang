package plaid.examples.webserver.plaid;

state WebServer {
	
	@sequential
	method immutable String getRoot() [immutable WebServer this] {
    	java.lang.System.getProperty("user.dir") +"/www/";
	}
	
	method void run() [immutable WebServer this]  {
		val unique ServerSocket ss = new ServerSocket;
		
		this.acceptLoop(ss);
	}
	
	method void acceptLoop(unique ServerSocket serverSocket) [immutable WebServer this]  {
		val unique Socket client = serverSocket.accept();
		this.serveClient(client);
		this.acceptLoop(serverSocket);
	}
	
	@sequential
	method immutable Boolean fileExists(immutable String path)  [immutable WebServer this]  {
		val file = java.io.File.new(this.getRoot() + path);
		
		file.exists() && file.isFile() && file.canRead()
	}
	
	@sequential
	@cheap
	method void LOG(immutable String msg)  [immutable WebServer this]  {
		java.lang.System.out.println("LOG: " + msg);
	}

	method void serveClient(unique Socket >> void client)  [immutable WebServer this]  {
		
		// get request string 
		val immutable ?String request = client.readLine();
		match (request) {
		    case String {
        		this.LOG("serve request '" + request + "'");
        	
        	    val immutable Boolean isGet = request.toLowerCase().startsWith("get ");
        		match ( isGet ) {
        			 case True {
        				  // compute path
        				  val immutable Integer requestLength = request.length();
        				  val immutable String reqSuffix = request.substring(4, requestLength);
        				  val immutable Integer indexSpace = reqSuffix.indexOf(" ");
        				  val immutable Integer indexParam = reqSuffix.indexOf("?");		        
                          val immutable Boolean possitiveIndexSpace = indexSpace >= 0;        
                          val immutable Boolean possitiveIndexParam = indexParam >= 0;
                          val immutable Integer index = match (possitiveIndexSpace) {
                              case True {
                                  match (possitiveIndexParam) {
                                      case True {
                                          val immutable Boolean spaceSmallerThanParam = indexParam >= indexSpace;
                                          match ( spaceSmallerThanParam ) {
                                              case True { indexSpace }
                                              default { indexParam } 
                                          }
                                      }
                                      default {  indexSpace }
                                  };
                              }
                              default { indexParam } 
                          };
                          val immutable Boolean possitiveIndex = index >= 0;
        				  match ( possitiveIndex ) {
        					  case True { 
        						  val immutable String path = reqSuffix.substring(0, index);
        						  this.transferFile(client, path);
        					  }
        					  default {
        						  this.transferFile(client, reqSuffix);
        					  }
        				  } 
        			 }
        			 case False { } 
        		};
        	}
        	default { /* connection closed */ }
        };
		
		client.close();
	}

	@sequential
	method void transferData(unique Socket client, immutable String path)  [immutable WebServer this]  {
	    this.LOG("transfer data for : " + path);
	    val immutable Boolean fileExists = this.fileExists(path);
		match ( fileExists ) {
			case True {
                val file = java.io.File.new(this.getRoot() + path);
                client.copyFileToSocket(file);
			}
			default {
			    this.LOG("Cannot find file : " + this.getRoot() + path );
				client.writeLine("<html><body><h1>404 File not found</h1></body></html>");
			}
		}
	}

	method void transferFile(unique Socket client, immutable String path)  [immutable WebServer this]  {
	    this.LOG("transfer file " + path);
	    val immutable Boolean isIndex = path == "/";
		match ( isIndex ) {
			case True {
				this.transferHeader(client, "index.html");
				this.transferData(client, "index.html");        
			}
			default {
				this.transferHeader(client, path);
				this.transferData(client, path);
			}
		};
		client.flush();
	}

	method void transferHeader(unique Socket client, immutable String path)  [immutable WebServer this]  {
	    this.LOG("transfer header for : " + path);
	    val immutable Boolean fileExists = this.fileExists(path);
		match ( fileExists ) {
			case True {
				client.writeLine("HTTP/1.1 200 Script output follows");
				
				// HTML 
				val immutable Boolean isHTML = path.endsWith(".html");
				match ( isHTML ) {
					case True  { client.writeLine("Content-Type: text/html; charset=UTF-8"); }
					default { /* nop */ }
				};
				
				// CSS 
				val immutable Boolean isCSS = path.endsWith(".css");
				match ( isCSS ) {
					case True  { client.writeLine("Content-Type: text/css; charset=UTF-8"); }
					default { /* nop */ }
				};
				
				// Java Script
			    val immutable Boolean isJS = path.endsWith(".js");
				match ( isJS ) {
					case True  { client.writeLine("Content-Type: text/javascript; charset=UTF-8"); }
					default { /* nop */ }
				};

                // Jpeg
                val immutable Boolean isJPEG = path.endsWith(".jpg") || path.endsWith(".jpeg");
                match ( isJPEG ) {
                    case True  { client.writeLine("Content-Type: image/jpeg"); }
                    default { /* nop */ }
                };
				
                // PNG
                val immutable Boolean isPNG = path.endsWith(".png");
                match ( isPNG ) {
                    case True  { client.writeLine("Content-Type: image/png"); }
                    default { /* nop */ }
                };
                
                // GIF
                val immutable Boolean isGIF = path.endsWith(".gif");
                match ( isGIF ) {
                    case True  { client.writeLine("Content-Type: image/gif"); }
                    default { /* nop */ }
                };

				// close connection
				client.writeLine("Connection: close");
				
				// separator to content
				client.writeLine("");
			}
			default {            
				client.writeLine("HTTP/1.1 404 File not found");
				client.writeLine("");
			}
	   }
	}
}