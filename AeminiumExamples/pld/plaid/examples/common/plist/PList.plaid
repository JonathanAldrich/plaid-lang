package plaid.examples.common.plist;

state PList {
     var unique PListElement head = new PListNilElement;
     var immutable Integer count = 0;
     
     method immutable Integer getCount() [immutable PList this] {
         this.count 
     }
     
     method void add(unique PListData >> none PListData  data) [unique PList this] {
         val unique PListDataElement newHead = new PListDataElement { var unique PListData data = data; };

         // link 
         newHead.next = this.head;
         this.head    = newHead;
         
         // update count
         this.count = this.count + 1;
     }
     
     
     method void update() [unique PList this] {
         this.updateHelper(this.head); 
     }
     
     method void updateHelper(unique PListElement elem) [none PList this] {
         match (elem) {
             case PListDataElement {
                 // compute next
                 this.updateFunction(elem.data);             
                 this.updateHelper(elem.next);
             }
             case PListNilElement { /* noop */ }
         }
     }
     
     method shared PListData updateFunction(shared PListData data) [none PList this]; 
}