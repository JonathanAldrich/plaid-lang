package plaid.examples.common.plist;

state PList {
     var unique PListElement head = new PListNilElement;
     var immutable Integer count = 0;
     
     method immutable Integer getCount() [immutable PList this] {
         this.count 
     }
     
     method void add(unique PListData >> none PListData  data) [unique PList this] {
         val unique PListDataElement newHead = new PListDataElement { var unique PListData data = data; };

         // link 
         newHead.next = this.head;
         this.head    = newHead;
         
         // update count
         this.count = this.count + 1;
     }
     
     
     method void update() [unique PList this] {
         val unique PListElement newHead = this.updateHelper(this.head); 
         this.head = newHead;
     }
     
     method unique PListElement updateHelper(unique PListElement >> none PListElement elem) [none PList this] {
         match (elem) {
             case PListDataElement {
                 // compute next
                 val unique PListData data    = this.updateFunction(elem.data);             
                 val unique PListElement next = this.updateHelper(elem.next);
                 
                 elem.next = next;
                 elem.data = data;
                 
                 elem
             }
             case PListNilElement { elem }
         }
     }
     
     method unique PListData updateFunction(unique PListData >> none PListData data) [none PList this]; 
}