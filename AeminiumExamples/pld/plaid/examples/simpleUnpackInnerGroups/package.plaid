package plaid.examples.simpleUnpackInnerGroups;

state Object<group Owner> {
    val immutable Integer value = 0;
    var immutable Integer key = 0;
    
    method void nop<group exclusive A>() [ shared<A> Object<A> this  ] {
        this.key = 2;
        val immutable Integer tmp = this.value;
        unpackInnerGroups { 
        
        };
        this.key = 1;
    }
}

state InnerGroups {
    group INNER = new group;
    val shared<INNER> Object<INNER>;
}

state Base { 
    group g1 = new group;
}

state Case case of Base  {
    group g2 = new group;
    
    val immutable Integer f = 0;
    var immutable Integer value = 0;
    
    method void callMe<group shared A>(unique Object<A> o) [ none Case this ] { /* nop */ }
    
    method void onlyPacked() [ none Case this ] {}
    
    method void createLocalObjects() [ shared Case this ] {
        val unique Object<this.g2> obj = new Object<this.g2>;
        
        val immutable Integer value = unpackInnerGroups {
            this.callMe<this.g2>(obj);
            this.f;
            atomic {
                this.value = 1;
            };
            this.onlyPacked();
            
            1
        };
    }
}
