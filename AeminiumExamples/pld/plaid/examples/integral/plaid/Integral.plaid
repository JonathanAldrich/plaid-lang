package plaid.examples.integral.plaid;

immutable state Integral {
    method immutable Float64 compute(immutable Float64 x1, immutable Float64 x2) [immutable Integral this] {
        val immutable Float64 delta = x2 - x1;
        
        val immutable Boolean divide = delta.nativeLessThan(0.000001);
        match ( divide ) {
            case True {
                val immutable Float64 f1 = this.f(x1);
                val immutable Float64 f2 = this.f(x2);
                val immutable Float64 combinedf = f1 + f2;
                val immutable Float64 avgf = combinedf / 2.0; 
                val immutable Float64 area = avgf * delta;
                
                area
            }
            case False {
                val immutable Float64 combinedx = x1 + x2;
                val immutable Float64 middle = combinedx / 2.0;
                val immutable Float64 area1 = this.compute(x1, middle);
                val immutable Float64 area2 = this.compute(middle, x2);
                
                area1 + area2
            }
        }
    }
    
    method immutable Float64 f(immutable Float64 x) [immutable Integral this];
}