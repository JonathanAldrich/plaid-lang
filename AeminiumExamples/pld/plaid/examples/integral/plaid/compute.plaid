package plaid.examples.integral.plaid;

method immutable Double compute(immutable Double x1, immutable Double x2) {
    val immutable Double delta = x2 - x1;
    
    match ( delta.nativeLessThan(0.001) ) {
        case True {
            val immutable Double f1 = f(x1);
            val immutable Double f2 = f(x2);
            val immutable Double combinedf = f1 + f2;
            val immutable Double avgf = combinedf / 2.0; 
            val immutable Double area = avgf * delta;
            
            area
        }
    	case False {
    		val immutable Double combinedx = x1 + x2;
    		val immutable Double middle = combinedx / 2.0;
    		val immutable Double area1 = compute(x1, middle);
    		val immutable Double area2 = compute(middle, x2);
    		
    		area1 + area2
    	}
    }
}