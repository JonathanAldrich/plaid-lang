package plaid.examples.lib.hashtable;

import plaid.examples.lib.hashtable.fine.makeFineHashtable;

/********************************************************************************
 ** main function 
 *******************************************************************************/

method void main() {
    printLine("Create hashtable");
    val unique Hashtable ht = makeFineHashtable(4);
    
    testUnique(ht);
    
    /*
    val immutable Number n1 = makeNumber(1);
    val immutable Number n2 = makeNumber(2);
    
    printLine("add 1");
    ht.addShared(n1);
    
    val immutable Boolean containsOne = ht.containsShared(n1);
    val immutable Boolean containsTwo = ht.containsShared(n2);
    
    printLine("contains 1 : " + containsOne.toString() );
    printLine("contains 2 : " + containsTwo.toString() );
    */
}


method void testUnique(unique Hashtable ht) {
    val immutable Number n1  = makeNumber( 1);
    val immutable Number n2  = makeNumber( 2);
    val immutable Number n17 = makeNumber(17);

    printLine("add 1");
    ht.addUnique(n1);
 
    printLine("add 17");
    ht.addUnique(n17);

    printLine("add 1");
    ht.addUnique(n1);
     
    printLine("check for containment");
    val immutable Boolean containsOne = ht.containsUnique(n1);
    val immutable Boolean containsTwo = ht.containsUnique(n2);
    val immutable Boolean contains17  = ht.containsUnique(n17);
    
    printLine("contains  1 : " + containsOne.toString() );
    printLine("contains  2 : " + containsTwo.toString() );
    printLine("contains 17 : " + contains17.toString() );
}


/********************************************************************************
 ** factory methods 
 *******************************************************************************/
@cheap
method immutable Number makeNumber(immutable Integer value) {
    new Number { val immutable Integer value = value; };
}