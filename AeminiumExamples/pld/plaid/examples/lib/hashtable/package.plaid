package plaid.examples.lib.hashtable;

@cheap
method unique Bucket createBuckets(immutable Integer order) {
    val immutable Boolean isZero = (order == 0);
    match ( isZero ) {
        case True { makeLeafBucket() }
        default { 
            val immutable Integer nextOrder = order - 1;
            val unique Bucket leftBucket = createBuckets(nextOrder);
            val unique Bucket rightBucket = createBuckets(nextOrder);
            
            makeNodeBucket(nextOrder, leftBucket, rightBucket);
        }
    }
}

method void main() {
    val unique Hashtable ht = makeHashtable(4);
}

/********************************************************************************
 ** factory methods 
 *******************************************************************************/

method unique NodeBucket makeNodeBucket(immutable Integer decissionBit, 
                                        unique Bucket >> void left, unique Bucket >> void right) {
    new NodeBucket  { 
        val immutable Integer decissionBit = decissionBit;
        val unique Bucket smallerBuckets   = left; 
        val unique Bucket biggerBuckets    = right; 
    }
}
 
method unique LeafBucket makeLeafBucket() {
    new LeafBucket   
}

method unique Hashtable makeHashtable(immutable Integer order) {
    val unique Bucket buckets = createBuckets(order);
    
    new Hashtable { val unique Bucket buckets = buckets; } 
}