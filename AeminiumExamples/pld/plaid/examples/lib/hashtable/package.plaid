package plaid.examples.lib.hashtable;

import plaid.examples.lib.hashtable.fine.makeFineHashtable;

/********************************************************************************
 ** main function 
 *******************************************************************************/

@sequential
method void ABORT(immutable String msg) {
    printLine(msg);
    java.lang.System.exit(1);
}

method void main() {
    printLine("Create hashtable");
    val unique Hashtable ht1 = makeFineHashtable(4);
    testUnique(ht1);

    val unique Hashtable ht2 = makeFineHashtable(4);
    testUniqueBig(ht2);
}


method void testUnique(unique Hashtable ht) {
    val immutable Number n1  = makeNumber( 1);
    val immutable Number n2  = makeNumber( 2);
    val immutable Number n17 = makeNumber(17);

    printLine("add 1");
    ht.addUnique(n1);
 
    printLine("add 17");
    ht.addUnique(n17);

    printLine("add 1");
    ht.addUnique(n1);
     
    printLine("check for containment");
    val immutable Boolean containsOne = ht.containsUnique(n1);
    val immutable Boolean containsTwo = ht.containsUnique(n2);
    val immutable Boolean contains17  = ht.containsUnique(n17);
    
    printLine("contains  1 : " + containsOne.toString() );
    printLine("contains  2 : " + containsTwo.toString() );
    printLine("contains 17 : " + contains17.toString() );
}

method void testUniqueBig(unique Hashtable ht) {
    fillUniqueBig(ht, 1000);
    checkUniqueBig(ht, 1000);
}

method void fillUniqueBig(unique Hashtable ht, immutable Integer toGo) {
    // add to hashtable
    val immutable Number num = makeNumber(toGo); 
    ht.addUnique(num);

    // check for more
    val immutable Boolean isZero = toGo == 0;
    match ( isZero ) {
        case True { /* nop */ } 
        default {
            val immutable Integer nextStep = toGo - 1;
            fillUniqueBig(ht, nextStep);
        }
    }
}

method void checkUniqueBig(unique Hashtable ht, immutable Integer toGo) {
    // check to hashtable
    val immutable Number num = makeNumber(toGo); 
    val immutable Boolean contains = ht.containsUnique(num);

    match ( contains ) {
        case False {
           ABORT("Number " + toGo.toString() + " not found in hashtable"); 
        }
        default { /* nop */ }
    };

    // check for more
    val immutable Boolean isZero = toGo == 0;
    match ( isZero ) {
        case True { /* nop */ } 
        default {
            val immutable Integer nextStep = toGo - 1;
            fillUniqueBig(ht, nextStep);
        }
    }
}

/********************************************************************************
 ** factory methods 
 *******************************************************************************/
@cheap
method immutable Number makeNumber(immutable Integer value) {
    new Number { val immutable Integer value = value; };
}