package plaid.examples.lib.hashtable;

state LeafBucket<group Owner> case of Bucket<Owner> {
    // bucket list 
    var shared<Owner> ?BucketList<Owner> bucketList = unit;


    // TODO: add list 
    override method void addShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        atomic <owner> {
            this.addProtected<owner>(obj, index);
        }
    }
    
    override method void addProtected<group protected owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> {
                // check for existing entry
                val immutable Boolean found = head.containsProtected<owner>(obj.hash());
                match ( found ) { 
                    case False {
                        val shared<owner> BucketList<owner> newEntry = new BucketList<owner> { val immutable Hashable data = obj; };
                        newEntry.next = head;
                        this.bucketList = newEntry;
                    }
                    default { unit }
                }          
            }
            default {
                // add first element 
                this.bucketList = new BucketList<owner> { val immutable Hashable data = obj; }
            }
        }
    }
}