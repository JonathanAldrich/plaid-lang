package plaid.examples.lib.hashtable.global;

import plaid.examples.lib.hashtable.Hashable;

state NodeBucket case of Bucket {
    val immutable Integer decissionBit;
    val shared Bucket smallerBuckets;
    val shared Bucket biggerBuckets;
    
    override method void add(immutable Hashable obj, immutable Integer index) [ shared NodeBucket this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                printLine("[NodeBucket] go smaller ");
                val shared Bucket bucket = this.smallerBuckets;
                bucket.add(obj, index);
            }
            case False {
                printLine("[NodeBucket] go bigger");
                val shared Bucket bucket = this.biggerBuckets;
                bucket.add(obj, index);       
            }
        }
    }
    
    override method immutable Boolean contains(immutable Hashable obj, immutable Integer index) [ shared NodeBucket this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                printLine("[NodeBucket] go smaller ");
                val shared Bucket bucket = this.smallerBuckets;
                bucket.contains(obj, index);
            }
            case False {
                printLine("[NodeBucket] go bigger");
                val shared Bucket bucket = this.biggerBuckets;
                bucket.contains(obj, index);
            }
        }    
    }
}