package plaid.examples.lib.hashtable.global;

import plaid.examples.lib.hashtable.Hashable;

state LeafBucket case of Bucket {
    // bucket list 
    var shared ?BucketList bucketList = unit;
    
    override method void add(immutable Hashable obj, immutable Integer index) [ shared LeafBucket this] {
        atomic {
            val shared ?BucketList head = this.bucketList;
    
            match ( head ) {
                case BucketList {
                    // check for existing entry
                    val immutable Boolean found = head.contains(obj.hash());
                    match ( found ) { 
                        case False {
                            //printLine("[LeafBucket] add additional element element");
                            val shared BucketList newEntry = new BucketList { val immutable Hashable data = obj; };
                            newEntry.next = head;
                            this.bucketList = newEntry;
                        }
                        default { 
                            //printLine("[LeafBucket] element already exists in bucket"); 
                            unit 
                        }
                    }          
                }
                default {
                    // add first element 
                    //printLine("[LeafBucket] add first element");
                    this.bucketList = new BucketList { val immutable Hashable data = obj; }
                }
            }
        }
    }

    override method immutable Boolean contains(immutable Hashable obj, immutable Integer index) [ shared LeafBucket this] {
        atomic {
            val shared ?BucketList head = this.bucketList;
    
            match ( head ) {
                case BucketList { head.contains(obj.hash())  }
                default { new False }
            }
        }
    }
}