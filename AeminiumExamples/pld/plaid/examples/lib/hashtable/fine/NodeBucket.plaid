package plaid.examples.lib.hashtable.fine;

import plaid.examples.lib.hashtable.Hashable;

state NodeBucket<group Owner> case of Bucket<Owner> {
    group smaller = new group;
    group bigger = new group;
    
    val immutable Integer decissionBit;
    val shared<this.smaller> Bucket<this.smaller> smallerBuckets;
    val shared<this.bigger>  Bucket<this.bigger> biggerBuckets;
    
    override method void addExclusive<group exclusive owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> NodeBucket<owner> this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                unpackInnerGroups {
                    //printLine("[NodeBucket] go smaller ");
                    val shared<this.smaller> Bucket<this.smaller> bucket = this.smallerBuckets;
                    bucket.addExclusive<this.smaller>(obj, index);
                }
            }
            default {
                unpackInnerGroups {
                    //printLine("[NodeBucket] go bigger");
                    val shared<this.bigger> Bucket<this.bigger> bucket = this.biggerBuckets;
                    bucket.addExclusive<this.bigger>(obj, index);
                }            
            }
        }
    }

    override method void addShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> NodeBucket<owner> this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                unpackInnerGroups {
                    //printLine("[NodeBucket] go smaller ");
                    val shared<this.smaller> Bucket<this.smaller> bucket = this.smallerBuckets;
                    bucket.addShared<this.smaller>(obj, index);
                }
            }
            default {
                unpackInnerGroups {
                    //printLine("[NodeBucket] go bigger");
                    val shared<this.bigger> Bucket<this.bigger> bucket = this.biggerBuckets;
                    bucket.addShared<this.bigger>(obj, index);
                }            
            }
        }
    }
    
    override method immutable Boolean containsExclusive<group exclusive owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> NodeBucket<owner> this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                //printLine("[NodeBucket] go smaller ");
                val shared<this.smaller> Bucket<this.smaller> bucket = this.smallerBuckets;
                unpackInnerGroups {
                    bucket.containsExclusive<this.smaller>(obj, index);
                }
            }
            default {
                //printLine("[NodeBucket] go bigger");
                val shared<this.bigger> Bucket<this.bigger> bucket = this.biggerBuckets;
                unpackInnerGroups {
                    bucket.containsExclusive<this.bigger>(obj, index);
                }            
            }
        }    
    }

    override method immutable Boolean containsShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> NodeBucket<owner> this ] {
        val immutable Integer shifted = index >>> this.decissionBit;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                //printLine("[NodeBucket] go smaller ");
                val shared<this.smaller> Bucket<this.smaller> bucket = this.smallerBuckets;
                unpackInnerGroups {
                    bucket.containsShared<this.smaller>(obj, index);
                }
            }
            default {
                //printLine("[NodeBucket] go bigger");
                val shared<this.bigger> Bucket<this.bigger> bucket = this.biggerBuckets;
                unpackInnerGroups {
                    bucket.containsShared<this.bigger>(obj, index);
                }            
            }
        }    
    }
}