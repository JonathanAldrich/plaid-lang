package plaid.examples.lib.hashtable.fine;

import plaid.examples.lib.hashtable.Hashtable;

/********************************************************************************
 ** helper functions
 *******************************************************************************/

@cheap
@sequential
method unique Bucket<owner> createBuckets<group exclusive owner>(immutable Integer order) {
    val immutable Boolean isZero = (order == 0);
    match ( isZero ) {
        case True { new LeafBucket<owner> }
        default { 
            val immutable Integer nextOrder = order - 1;
            new NodeBucket<owner> {
                val immutable Integer decissionBit = nextOrder;
                val shared<this.smaller> Bucket<this.smaller> smallerBuckets = unpackInnerGroups{ createBuckets<owner>(nextOrder) };
                val shared<this.bigger> Bucket<this.smaller>  biggerBuckets = unpackInnerGroups{ createBuckets<owner>(nextOrder)  };
            }
        }
    }
}


/********************************************************************************
 ** factory methods 
 *******************************************************************************/

@sequential
method unique Hashtable makeFineHashtable(immutable Integer order) {
    new FineHashtable { val unique Bucket<this.bg> buckets = unpackInnerGroups { createBuckets< unit /*this.bg*/>(order) }; } 
}