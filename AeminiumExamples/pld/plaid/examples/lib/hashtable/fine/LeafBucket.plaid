package plaid.examples.lib.hashtable.fine;

import plaid.examples.lib.hashtable.Hashable;

state LeafBucket<group Owner> case of Bucket<Owner> {
    // bucket list 
    var shared<Owner> ?BucketList<Owner> bucketList = unit;

    override method void addExclusive<group exclusive owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> {
                // check for existing entry
                val immutable Boolean found = head.containsExclusive<owner>(obj.hash());
                match ( found ) { 
                    case False {
                        //printLine("[LeafBucket] add additional element element " + index.toString());
                        val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                        newHead.data = obj;
                        newHead.next = head;
                        this.bucketList = newHead;
                    }
                    default { 
                        //printLine("[LeafBucket] element already exists in bucket"); 
                        unit 
                    }
                }          
            }
            default {
                // add first element 
                //printLine("[LeafBucket] add first element " + index.toString());
                val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                newHead.data = obj;
                this.bucketList = newHead;
            }
        }
    }

    override method void addShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        atomic <owner> {
            this.addProtected<owner>(obj, index);
        }
    }    
    
    override method void addProtected<group protected owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> {
                // check for existing entry
                val immutable Boolean found = head.containsProtected<owner>(obj.hash());
                match ( found ) { 
                    case False {
                        //printLine("[LeafBucket] add additional element element");
                        val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                        newHead.data = obj;
                        newHead.next = head;
                        this.bucketList = newHead;
                    }
                    default { 
                        //printLine("[LeafBucket] element already exists in bucket"); 
                        unit 
                    }
                }          
            }
            default {
                // add first element 
                //printLine("[LeafBucket] add first element");
                val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                newHead.data = obj;
                this.bucketList = newHead;
            }
        }
    }

    override method immutable Boolean containsExclusive<group exclusive owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> { head.containsExclusive<owner>(obj.hash())  }
            default { new False }
        }
    }

    override method immutable Boolean containsShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        atomic <owner> {
            this.containsProtected<owner>(obj, index);
        }
    }

    override method immutable Boolean containsProtected<group protected owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> LeafBucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> { head.containsProtected<owner>(obj.hash())  }
            default { new False }
        }
    }
}