package plaid.examples.lib.hashtable.fine;

import plaid.examples.lib.hashtable.Hashable;
import plaid.examples.lib.hashtable.Hashtable;

state FineHashtable case of Hashtable {
    // data group for internal buckets
    group bg = new group;
    
    // buckets tree itself
    val shared<this.bg> Bucket<this.bg> buckets;
 
     override method void addUnique(immutable Hashable obj) [ unique FineHashtable this ] {
        printLine("[FineHashtable] addUnique");
        val shared<this.bg> Bucket<this.bg> bs = this.buckets;
        unpackInnerGroups {
            val immutable Integer hashCode = obj.hash();
            bs.addExclusive<this.bg>(obj, hashCode);
        }
    }
       
    override method void addShared(immutable Hashable obj) [ local shared FineHashtable this ] {
        printLine("[FineHashtable] addShared");
        val shared<this.bg> Bucket<this.bg> bs = this.buckets;
        unpackInnerGroups {
            val immutable Integer hashCode = obj.hash();
            bs.addShared<this.bg>(obj, hashCode);
        }
    }
    
    override method immutable Boolean containsShared(immutable Hashable obj)  [ local shared FineHashtable this ] {
        printLine("[FineHashtable] containsShared");
        val shared<this.bg> Bucket<this.bg> bs = this.buckets;
        unpackInnerGroups {
            val immutable Integer hashCode = obj.hash();
            bs.containsShared<this.bg>(obj, hashCode);
        }    
    }
    
    override method immutable Boolean containsUnique(immutable Hashable obj)  [ unique FineHashtable this ] {
        printLine("[FineHashtable] containsUnique");
        val shared<this.bg> Bucket<this.bg> bs = this.buckets;
        unpackInnerGroups {
            val immutable Integer hashCode = obj.hash();
            bs.containsExclusive<this.bg>(obj, hashCode);
        }    
    }
}