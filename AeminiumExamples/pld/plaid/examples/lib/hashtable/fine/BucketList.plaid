package plaid.examples.lib.hashtable.fine;

import plaid.examples.lib.hashtable.Hashable;

state BucketList <group Owner>{
    var shared<Owner> ?BucketList<Owner> next = unit;
    
    var immutable ?Hashable data = unit;
    
    method immutable Boolean containsExclusive<group exclusive Owner>(immutable Integer objHash) [ shared<Owner> BucketList<Owner> this ] {
        val immutable ?Hashable obj = this.data;
        val immutable Integer thisHash = match (obj) {
            case Hashable { obj.hash() }
            default { 0 }
        };
        //printLine("[BucketList] containsExclusive(" + objHash.toString() + ") with current " + thisHash.toString());
        val immutable Boolean found = thisHash == objHash;
        
        match ( found ) {
            case False {
                val shared<Owner> ?BucketList<Owner> next = this.next;
                match ( next ) {
                    case BucketList<Owner> { 
                        //printLine("[BucketList]     search rest of list."); 
                        next.containsExclusive<Owner>(objHash) 
                    }
                    default { 
                        //printLine("[BucketList]     end of list."); 
                        found 
                    }
                }
            }
            default { 
                //printLine("[BucketList]     found element."); 
                found 
            }
        }
    }    

    method immutable Boolean containsProtected<group protected Owner>(immutable Integer objHash) [ shared<Owner> BucketList<Owner> this ] {
        val immutable ?Hashable obj = this.data;
        val immutable Integer thisHash = match (obj) {
            case Hashable { obj.hash() }
            default { 0 }
        };
        //printLine("[BucketList] containsProtected(" + objHash.toString() + ") with current " + thisHash.toString());
        val immutable Boolean found = thisHash == objHash;
        
        match ( found ) {
            case False {
                val shared<Owner> ?BucketList<Owner> next = this.next;
                match ( next ) {
                    case BucketList<Owner> { 
                        //printLine("[BucketList]     search rest of list."); 
                        next.containsProtected<Owner>(objHash) 
                    }
                    default { 
                        //printLine("[BucketList]     end of list."); 
                        found 
                    }
                }
            }            
            default { found }
        }
    }
}