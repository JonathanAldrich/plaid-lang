package plaid.examples.lib.hashtable;

state NodeBucket case of Bucket {
    group smaller = new group;
    group bigger = new group;
    
    val immutable Integer decissionBit;
    val shared<this.smaller> Bucket smallerBuckets;
    val shared<this.bigger>  Bucket biggerBuckets;
    
    override method void addShared<group shared owner>(immutable Hashable obj, immutable Integer index) [ shared<owner> NodeBucket this ] {
        val immutable Integer shifted = index >>> 1;
        val immutable Integer direction = shifted % 2;
        val immutable Boolean isSmaller = direction == 0;
        match ( isSmaller ) {
            case True {
                val shared<this.smaller> Bucket bucket = this.smallerBuckets;
                unpackInnerGroups {
                    bucket.addShared<this.smaller>(obj, index);
                }
            }
            case False {
                val shared<this.bigger> Bucket bucket = this.biggerBuckets;
                unpackInnerGroups {
                    bucket.addShared<this.bigger>(obj, index);
                }            
            }
        }
    }
}