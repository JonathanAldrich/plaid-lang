package plaid.examples.lib.hashmap.fine;

import plaid.examples.lib.hashmap.Hashable;
import plaid.examples.lib.hashmap.Hashmap;

import plaid.arrays.SharedArray;

state FineHashmap case of Hashmap {
    val immutable Integer bucketCount;
    val immutable FineHashmapOperations addOps;
    val unique SharedArray buckets;
 
    override method void addUnique(immutable Hashable key, immutable Object data) [ unique FineHashmap this ] {
        //printLine("[FineHashtable] addUnique");
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable FineHashmapOperations bops = this.addOps;
        this.buckets.doUniqueData2(index, bops, key, data);
    }
       
    override method void addShared(immutable Hashable key, immutable Object data) [ local shared FineHashmap this ] {
        //printLine("[FineHashtable] addShared");
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable FineHashmapOperations bops = this.addOps;
        this.buckets.doLocalSharedData2(index, bops, key, data);
    }
    
    override method immutable Boolean containsShared(immutable Hashable key)  [ local shared FineHashmap this ] {
        //printLine("[FineHashtable] containsShared");
        1 == 1
    }
    
    override method immutable Boolean containsUnique(immutable Hashable key)  [ unique FineHashmap this ] {
        //printLine("[FineHashtable] containsUnique");
        1 == 1
    }
}