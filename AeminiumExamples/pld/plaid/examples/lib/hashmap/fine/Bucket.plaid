package plaid.examples.lib.hashmap.fine;

import plaid.examples.lib.hashmap.Hashable;

state Bucket<group Owner> case of Object {
    // bucket list 
    var shared<Owner> ?BucketList<Owner> bucketList = unit;

    override method void addExclusive<group exclusive owner>(immutable Hashable key, immutable Object value) [ shared<owner> Bucket<owner> this] {
        val shared<owner> ?BucketList<owner> head = this.bucketList;

        match ( head ) {
            case BucketList<owner> {
                // check for existing entry
                val immutable Boolean found = head.containsExclusive<owner>(key.hash());
                match ( found ) { 
                    case False {
                        //printLine("[LeafBucket] add additional element element " + index.toString());
                        val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                        newHead.key = key;
                        newHead.value = value;
                        newHead.next = head;
                        this.bucketList = newHead;
                    }
                    default { 
                        //printLine("[LeafBucket] element already exists in bucket"); 
                        unit 
                    }
                }          
            }
            default {
                // add first element 
                //printLine("[LeafBucket] add first element " + index.toString());
                val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                newHead.key = key;
                newHead.value = value;
                this.bucketList = newHead;
            }
        }
    }

    override method void addShared<group shared owner>(immutable Hashable key, immutable Object value) [ shared<owner> Bucket<owner> this] {
        atomic<owner> {
            val shared<owner> ?BucketList<owner> head = this.bucketList;
    
            match ( head ) {
                case BucketList<owner> {
                    // check for existing entry
                    val immutable Boolean found = head.containsProtected<owner>(key.hash());
                    match ( found ) { 
                        case False {
                            //printLine("[LeafBucket] add additional element element " + index.toString());
                            val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                            newHead.key = key;
                            newHead.value = value;
                            newHead.next = head;
                            this.bucketList = newHead;
                        }
                        default { 
                            //printLine("[LeafBucket] element already exists in bucket"); 
                            unit 
                        }
                    }          
                }
                default {
                    // add first element 
                    //printLine("[LeafBucket] add first element " + index.toString());
                    val shared<owner> BucketList<owner> newHead = new BucketList<owner>;
                    newHead.key = key;
                    newHead.value = value;
                    this.bucketList = newHead;
                }
            }
        }
    }
}