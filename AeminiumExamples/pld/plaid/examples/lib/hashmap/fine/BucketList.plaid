package plaid.examples.lib.hashmap.fine;

state BucketList <group Owner>{
    
    var shared<Owner> ?BucketList<Owner> next = unit;
    
    @sequential
    var immutable Object value = unit;
    var immutable Integer keyHash = 0;
    
    method immutable Boolean containsExclusive<group exclusive Owner>(immutable Integer objHash) [ shared<Owner> BucketList<Owner> this ] {
        val immutable Integer thisHash = this.keyHash;
        val immutable Boolean found = thisHash == objHash;
        
        match ( found ) {
            case False {
                val shared<Owner> ?BucketList<Owner> next = this.next;
                match ( next ) {
                    case BucketList<Owner> { 
                        next.containsExclusive<Owner>(objHash) 
                    }
                    default { 
                        found 
                    }
                }
            }
            default { 
                found 
            }
        }
    }    

    method immutable Boolean containsProtected<group protected Owner>(immutable Integer objHash) [ shared<Owner> BucketList<Owner> this ] {
        val immutable Integer thisHash = this.keyHash;
        val immutable Boolean found = thisHash == objHash;
        
        match ( found ) {
            case False {
                val shared<Owner> ?BucketList<Owner> next = this.next;
                match ( next ) {
                    case BucketList<Owner> { 
                        next.containsProtected<Owner>(objHash) 
                    }
                    default { 
                        found 
                    }
                }
            }            
            default { found }
        }
    }
}
