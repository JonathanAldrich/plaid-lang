package plaid.examples.lib.hashmap;

import plaid.examples.lib.hashmap.fine.makeFineHashmap;
//import plaid.examples.lib.hashmap.global.makeGlobalHashmap;

/********************************************************************************
 ** ABORT function 
 *******************************************************************************/

@sequential
method void ABORT(immutable String msg) {
    printLine(msg);
    java.lang.System.exit(1);
}

/********************************************************************************
 ** main function 
 *******************************************************************************/
@sequential
method void main() {
    val unique Hashmap hm = makeFineHashmap(2);
    val immutable Number ONE = makeNumber(1);
    
    val immutable Boolean c1 = hm.containsUnique(ONE);
    printLine("hashmap contains ONE : " + c1.toString());
    
    printLine("hashmap add ONE");
    hm.addUnique(ONE,ONE);

    val immutable Boolean c2 = hm.containsUnique(ONE);
    printLine("hashmap contains ONE : " + c2.toString());
    
    val unique Hashmap hm1 = makeFineHashmap(6);
    testHashmapUnique(hm);
    
    val unique Hashmap hm2 = makeFineHashmap(6);
    testHashmapShared(hm);
}


method void testHashmapUnique(unique Hashmap hm) {
    initHashmapUnique(hm, 1000);
    checkHashmapUnique(hm, 1000);
}

method void initHashmapUnique(unique Hashmap hm, immutable Integer count) {
    val immutable Number num = makeNumber(count);
    hm.addUnique(num, num);
    
    val immutable Boolean isZero = count == 0;
    match ( isZero ) {
        case False { initHashmapUnique(hm, (count - 1) ) }
        default{ unit }
    }
}

method void checkHashmapUnique(unique Hashmap hm, immutable Integer count) {
    val immutable Number num = makeNumber(count);
    
    val immutable Boolean contains = hm.containsUnique(num);
    match ( contains ) {
        case False {
            printLine("[ERROR] Cannot find " + count.toString() + " in hashmap.");
        }
        default { unit }
    };
    
    val immutable Boolean isZero = count == 0;
    match  ( isZero ) {
        case False { checkHashmapUnique(hm, (count - 1) ) }
        default { unit } 
    };
}


@sequential
method void testHashmapShared(unique Hashmap hm) {
    initHashmapShared(hm, 1000);
    checkHashmapShared(hm, 1000);
}

method void initHashmapShared(local shared Hashmap hm, immutable Integer count) {
    val immutable Number num = makeNumber(count);
    hm.addShared(num, num);
    
    val immutable Boolean isZero = count == 0;
    match ( isZero ) {
        case False { initHashmapShared(hm, (count - 1) ) }
        default{ unit }
    }
}

method void checkHashmapShared(local shared Hashmap hm, immutable Integer count) {
    val immutable Number num = makeNumber(count);
    
    val immutable Boolean contains = hm.containsShared(num);
    match ( contains ) {
        case False {
            printLine("[ERROR] Cannot find " + count.toString() + " in hashmap.");
        }
        default { unit }
    };
    
    val immutable Boolean isZero = count == 0;
    match  ( isZero ) {
        case False { checkHashmapShared(hm, (count - 1) ) }
        default { unit } 
    };
}

/********************************************************************************
 ** factory methods 
 *******************************************************************************/
@cheap
@sequential
method immutable Number makeNumber(immutable Integer value) {
    val num = new Number; //new Number { val immutable Integer value = value; };
    num.value = value;
    num
}