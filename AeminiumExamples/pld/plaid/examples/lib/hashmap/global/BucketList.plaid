package plaid.examples.lib.hashmap.global;

import plaid.examples.lib.hashmap.Hashable;

state BucketList {
    
    var shared ?BucketList next = unit;
    
    var immutable ?Object value = unit;
    var immutable ?Hashable key = unit;
    
    method immutable Boolean containsShared(immutable Integer objHash) [ shared BucketList this ] {
        atomic { 
            val immutable ?Hashable obj = this.key;
            val immutable Integer thisHash = match (obj) {
                case Hashable { obj.hash() }
                default { 0 }
            };
            //printLine("[BucketList] containsExclusive(" + objHash.toString() + ") with current " + thisHash.toString());
            val immutable Boolean found = thisHash == objHash;
            
            match ( found ) {
                case False {
                    val shared ?BucketList next = this.next;
                    match ( next ) {
                        case BucketList { 
                            //printLine("[BucketList]     search rest of list."); 
                            next.containsShared(objHash) 
                        }
                        default { 
                            //printLine("[BucketList]     end of list."); 
                            found 
                        }
                    }
                }
                default { 
                    //printLine("[BucketList]     found element."); 
                    found 
                }
            }
        }
    }    

}