package plaid.examples.lib.hashmap.global;

import plaid.examples.lib.hashmap.Hashable;
import plaid.examples.lib.hashmap.Hashmap;

import plaid.arrays.GlobalSharedArray;

state GlobalHashmap case of Hashmap {
    val immutable Integer bucketCount;
    val immutable GlobalHashmapOperations addOps;
    val immutable GlobalHashmapOperations containsOps;
    val unique GlobalSharedArray buckets;
 
    override method void addUnique(immutable Hashable key, immutable Object data) [ unique GlobalHashmap this ] {
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable GlobalHashmapOperations bops = this.addOps;
        this.buckets.doUniqueData2(index, bops, key, data);
    }
       
    override method void addShared(immutable Hashable key, immutable Object data) [ local shared GlobalHashmap this ] {
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable GlobalHashmapOperations bops = this.addOps;
        this.buckets.doLocalSharedData2(index, bops, key, data);
    }
    
    override method immutable Boolean containsUnique(immutable Hashable key)  [ unique GlobalHashmap this ] {
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable GlobalHashmapOperations bops = this.containsOps;
        this.buckets.doUniqueData1(index, bops, key);
    }
    
    override method immutable Boolean containsShared(immutable Hashable key)  [ local shared GlobalHashmap this ] {
        val immutable Integer index = key.hash() % this.bucketCount;
        val immutable GlobalHashmapOperations bops = this.containsOps;
        this.buckets.doLocalSharedData1(index, bops, key);
    }
    
}