package plaid.examples.lib.hashmap.global;

import plaid.examples.lib.hashmap.Hashable;

state Bucket case of Object {
    // bucket list 
    var shared ?BucketList bucketList = unit;

    override method immutable Boolean addShared(immutable Hashable key, immutable Object value) [ shared Bucket this] {
        atomic {
            val shared ?BucketList head = this.bucketList;
    
            match ( head ) {
                case BucketList {
                    // check for existing entry
                    val immutable Boolean found = head.containsShared(key.hash());
                    match ( found ) { 
                        case False {
                            //printLine("[LeafBucket] add additional element element " + index.toString());
                            val shared BucketList newHead = new BucketList;
                            newHead.keyHash = key.hash();
                            newHead.value = value;
                            newHead.next = head;
                            this.bucketList = newHead;
                            new True
                        }
                        default { 
                            //printLine("[LeafBucket] element already exists in bucket"); 
                            new False
                        }
                    }          
                }
                default {
                    // add first element 
                    //printLine("[LeafBucket] add first element " + index.toString());
                    val shared BucketList newHead = new BucketList;
                    newHead.keyHash = key.hash();
                    newHead.value = value;
                    this.bucketList = newHead;
                    new True
                }
            }
        }
    }
    
    override method immutable Boolean containsShared(immutable Hashable key) [ shared Bucket this] {
        atomic {
            val shared ?BucketList head = this.bucketList;
    
            match ( head ) {
                case BucketList {
                    // check for existing entry
                    head.containsShared(key.hash());         
                }
                default { new False }
            }
        }
    }
}