package plaid.examples.simpleAllInOne;

state SimpleAllInOne {
    group g1 = new group;
    group g2 = new group;
    
    var immutable Integer f = 0;
    
    method void checkLocalSharedThis<group exclusive G>() [ local shared SimpleAllInOne this ] {}
    
    method void checkInnerGroups<group exclusive G>() [ none SimpleAllInOne this] {}
    
    method void checkUniqueThis() [ unique SimpleAllInOne this ] {}
    
    method void checkSharedDatagroup<group shared G>() [ local immutable SimpleAllInOne this ] {}
    
    method void checkProtectedDatagroup<group protected G>() [ local immutable SimpleAllInOne this ] {}
    
    method void allInOne<group exclusive G>()[ unique SimpleAllInOne this ] {

        this.checkLocalSharedThis<G>();
        this.checkLocalSharedThis<G>();
        
        unpackInnerGroups {
            this.checkInnerGroups<this.g1>();
            this.checkInnerGroups<this.g2>();
        };
        
        this.checkUniqueThis();
        
        val local immutable SimpleAllInOne tmp = this;
        
        split <G> {
            this.checkSharedDatagroup<G>();
            this.checkSharedDatagroup<G>();
            atomic <G> {
                this.checkProtectedDatagroup<G>();                
            }
        };
    }

}