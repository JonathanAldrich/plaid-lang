/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package testInputs.randomTests;

//
//state Nil { }
//
//method unique Nil main()[void >> void] {
//	new Nil;
//}
//
//state A {
//	method void compute()[ immutable A ] {
//		unit
//	}
//	
//	method void computeWrong() [immutable A >> immutable A] {
//		unit
//	}
//	
//	method void computeArg(immutable A x) [immutable A] {
//		unit
//	}
//	
//	method unique A generate() [unique A >> unique A] {
//		this.aNotherFactory();
//	}
//	
//	val () -> unique A aNotherFactory = fn () => new A;
//	
//	val unique A instance = new A;
//	
//	val (immutable Integer >> immutable Integer) -> immutable Integer addFive = fn (immutable Integer >> immutable Integer x) => x + 5;
//	
//	method immutable Integer ten()[immutable A] {
//		this.addFive(5);
//	}
//}
//
//val void x = unit;
//
//val (immutable A) -> void test =  fn (immutable A x) => unit;
//
//val () -> unique A aFactory = fn () => new A;
//
//val (immutable A) -> void bar = fn (immutable A x) => x.compute();
//
//val (immutable A) -> void barWrong = fn (immutable A x) => x.computeWrong();
//
//val (unique A) -> void doubleA = fn (unique A x) => x.computeArg(x); 
//
//val (immutable A) -> unique A arg = fn (immutable A x) => {
//	val unique A a = new A;
//	a.computeArg(x);
//	a.instance.aNotherFactory();
//};
//
//val () -> immutable Integer test = fn () => 5 + 4;

state A {
	val unique B b;
	method void callA()[unique A] { unit }
}

state B { }

val (unique A >> none A) -> none A test = fn (unique A >> none A x) => {
	val unique A takeVar = x;
	x;
};

val (immutable Integer >> immutable Integer) -> immutable Integer t = fn (immutable Integer >> immutable Integer x) => x + 1; 

val ()[(immutable Integer >> immutable Integer) -> immutable Integer t] -> immutable Integer tTest = 
	fn ()[ (immutable Integer >> immutable Integer) -> immutable Integer t ] => t(5);

method void main()[void >> void] {
	val unique A a = new A { val unique B b = new B; };
	a!b;
	a.b = new B;
	test(a);
	unit;
}

