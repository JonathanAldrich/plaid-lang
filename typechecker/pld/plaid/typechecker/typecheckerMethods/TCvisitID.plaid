package plaid.typechecker.typecheckerMethods;

import plaid.typechecker.context.*;
import plaid.ast.types.*;
import plaid.ast.*;

state TCvisitID {
	
	//override val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	//override val /*Context*/ context; //need to keep track of variables and types
	//override var /*Option PermType*/ typedAs;

	override method visitID(node) {
		ifElse (this.context.containsKey(node)) {
			val /*PermType*/ idType = this.context.remove(node);
			this.typedAs = createSome(idType); //TODO: need type directed ID
			node.type <- PermType {
				val /*Permission*/ perm = idType.perm;
				val /*Type*/ type = idType.type;
				val /*boolean*/ borrowed = idType.borrowed;
			};
			//java.lang.System.out.println("ID: " + node.name + " pulled from context");
		} {
			val msg = node.name + " not found in the context";
			typeError(node, msg, true);
			java.lang.System.out.println("TYPECHECK FAILED: " + msg);
			this.typedAs = NONE;
		}
	}
}