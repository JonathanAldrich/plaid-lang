package plaid.typechecker.typecheckerMethods;

import plaid.typechecker.context.*;
import plaid.ast.types.*;
import plaid.ast.*;

state TCvisitLiterals {
	
	override val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	override val /*Context*/ context; //need to keep track of variables and types
	override var /*Option PermType*/ typedAs;
	
	override method visitUnitLiteral(node) {
		val unitType = new PermType {
							val perm = new NonePermission;
							val type = new NominalType { val typeName = new ID { val name = "unit";}; };
							val borrowed = false;
						};
		this.typedAs = createSome(unitType); 
		node.type <- PermType {
			val perm = new NonePermission;
			val type = new NominalType { val typeName = new ID { val name = "unit"; }; };
			val borrowed = false;
		};
	}
	
	override method visitIntLiteral(node) {
		this.typedAs = new Some {
			val value = new PermType {
				val perm = IMM;
				val type = new NominalType { val typeName = new ID { val name = "Integer"; }; };
				val borrowed = false;
			};
		};
		node.type <- PermType {
			val perm = IMM;
			val type = new NominalType { val typeName = new ID { val name = "Integer"; }; };
			val borrowed = false;
		};
	}
}