package plaid.typechecker.typecheckerMethods;

import plaid.typechecker.context.*;
import plaid.ast.types.*;
import plaid.ast.*;

state TCvisitNewInstance {
	
	//override val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	//override val /*Context*/ context; //need to keep track of variables and types
	//override var /*Option PermType*/ typedAs;
	
	override method visitNewInstance(node) {
		match (node.s) {
			case QI {
				node.s.accept(this);
				match (this.typedAs) {
					case Some {
						//keep the same typedAs value - succeed silently
					}
					case None {
						val msg = "target state not well formed";
						typeError(node, msg, false);
						this.typedAs = NONE;
						java.lang.System.out.println("TYPECHECK FAILED: " + msg);
					}
				}	
			}
			default {
				val msg = "unsupported state decl in new expression";
				typeError(node, msg, true);
				this.typedAs = NONE;
				java.lang.System.out.println("TYPECHECK FAILED: " + msg);
			}
		}
	}
}