package plaid.typechecker.AST;

state Type {
	val /*Set<ID>*/ typeAbbrevs;
	val /*Set<TypeDecl>*/ typeDecls;
	
	method unfold(gamma) {
		val iter = typeAbbrevs.iterator();
		while { iter.hasNext() } {
			val currTypeAbbrev = iter.next();
			val unfoldedType = gamma.getType(currTypeAbbrev).unfold(gamma);
			typeDecls.addAll(unfoldedType.getTypeDecls());
		};
	}
	
	/**
	 * Returns the intersection of the two types.
	 */
	method join(t2) {
		val intersectAbbrevs = java.util.HashSet.new();
		
		val intersectDecls = java.util.HashSet.new();
	
	}
	
	/**
	 * Returns the union of the two types.
	 */
	method merge(t2) {
		val unionAbbrevs = java.util.HashSet.new();
		unionAbbrevs.addAll(this.typeAbbrevs);
		unionAbbrevs.addAll(t2.typeAbbrevs);
		
		val unionDecls = java.util.HashSet.new();
		unionDecls.addAll(this.typeDecls);
		unionDecls.addAll(t2.typeDecls);
		
		new Type { val typeAbbrevs = unionAbbrevs; val typeDecls = unionDecls; };
	}
}