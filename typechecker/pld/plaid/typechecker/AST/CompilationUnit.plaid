package plaid.typechecker.AST;

import java.lang.*;
import java.util.*;

state CompilationUnit case of ASTNode {
	val /*List<Decl>*/ decls;
	val /*List<String>*/ packageName;
	val /*ImportList*/ imports;
	val javaImports;
	// TODO: ???
	val /*File*/ sourceFile;

	method accept(v) {
		v.visitCompilationUnit(this)
	}
	
	method codegen(cc) {
		var fileList = ArrayList.new();
		var globalVars = HashSet.new();
		
		// Add all top-level declarations to globalVars
		var c = 0;
		while (c < decls.size()) {
			globalVars.add(ID.new(decls.get(c).getName()));
			
			c = c + 1;
		};
		
		// Produce all top-level declarations as files
		c = 0;
		while (c < decls.size()) {
			var d = decls.get(c);
			val qi = QualifiedID.new(packageName);
			var cg = new CodeGenVisitor;
			var newFile = cg.createDecl(d, qi, imports, cc, globalVars);
			fileList.add(newFile);
			
			c = c + 1;
		};
		
		fileList;
	}
}