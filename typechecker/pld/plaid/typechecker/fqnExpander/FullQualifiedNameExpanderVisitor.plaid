/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.typechecker.fqnExpander;

import plaid.ast.visitor.LeafVisitor;


/*
 * The FQN Expander checks every single ID and the first ID
 * of the first ID of a dereference chain if it needs to be 
 * expanded to a FQN. The following files apply:
 *
 * methods:
 *   ID in localvars  => ID
 *   ID in parameters => ID
 *   ID in fields     => this.ID (if this is in outer scope)
 *   ID in globals    => x.y.ID
 *   ID not found     => ERROR
 *
 * field initialize expression:
 *   ID in localvars  => ID 
 *   ID in fields     => ERROR 
 *   ID in globals    => x.y.ID
 *   ID not found     => ERROR
 * 
 * lambda expressions: 
 *   ID in localvars  => ID
 *   ID in parameters => ID
 *   ID in fields     => this.ID (if this is in outer scope)
 *   ID in globals    => x.y.ID
 *   ID not found     => ERROR 
 */
state FullQualifiedNameExpanderVisitor case of LeafVisitor {
    val /* List<String> */ classpath;
    val /* ImportsList */  imports;

    val /* Set<String> */ fields = new Set;

    method unique CompilationUnit visitCompilationUnit(unique CompilationUnit node) {
       this.imports = cu.imports;

       node.decls.map(fn (decl) => {
			decl.accept(this)
       });
    }

    method unique DeclState visitDeclState(unique DeclState node) {
        
    }
}