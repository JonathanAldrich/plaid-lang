package plaid.typechecker.resolver;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.typechecker.resolver.Resolver;

state ResolverTestFactory case of TestFactory { 
    method unique List<unique Test> createTests() {
        val /* List<Test> */ tests = makeEmptyList(); 

        val /*List<String>*/ classpath = makeEmptyList();
        classpath.add("../stdlib");
        classpath.add("pld");
        classpath.add("../stdlib/plaidsl.jar");

        // resolver         
        val unique Resolver resolver = new Resolver {
            val classpath = classpath; 
        };


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Init Test" }
            method immutable Boolean run() {
                true
            }
        });
        

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'unit'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("unit");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'unit' [cached]" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("unit");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'Integer'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("Integer");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'Boolean'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("Boolean");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'True'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("True");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'False'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("False");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Non-Existing Item" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("$I$.$do$.$not$.$exist$");
                match (result) {
                    case None { true; }
                    default { false; }
                }
            }
        });

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'Resolver'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.typechecker.resolver.Resolver");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'Resolver' [cached]" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.typechecker.resolver.Resolver");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'if'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.lang.globals.if");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests 
    }
}