package plaid.typechecker.rewriting.tests.permissioninference;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.rewriting.*;
import plaid.ast.types.permissions.*;
import java.lang.System;

method takeExplicitNeedingUnique(unique Tester tester)
{
	System.out.println("Take Explicit - Needing Unique");
	val permAnalysis = new PermissionAnalysisVisitor;
	permAnalysis.neededPerm = new UniquePermission;
	testName("perminf-take");
	val oldAst = makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		new UnitLiteral,
		makeTempID(makeToken(),"x"),
		false); 
	oldAst.addObjectType(getUnitType());
	oldAst.addPermission(UNIQUE);
	val goalAst = oldAst.copy();
	oldAst.accept(permAnalysis);
	compareASTs(tester, oldAst, goalAst);
}