package plaid.typechecker.rewriting.tests.permissioninference;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.rewriting.*;
import plaid.ast.types.permissions.*;
import java.lang.System;
import plaid.typechecker.rewriting.tests.printErrorASTs;

method takeExplicitNeedingUnique(unique Tester tester)
{
	System.out.println("Take Explicit - Needing Unique");
	var permAnalysis = new PermissionAnalysisVisitor;
	permAnalysis.neededPerm = new UniquePermission;
	testName("perminf-take");
	var oldAst = makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		new UnitLiteral,
		makeTempID(makeToken(),"x"),
		false); 
	oldAst.addObjectType(getUnitType());
	oldAst.addPermission(UNIQUE);
	var goalAst = oldAst.copy();
	oldAst.accept(permAnalysis);
	compareASTs(tester, goalAst, goalAst, oldAst);
	
	permAnalysis = new PermissionAnalysisVisitor;
	permAnalysis.neededPerm = new UniquePermission;
	testName("perminf-takefn");
	val oldFnType = createLambdaType(getVoidType(),makeEmptyList(),java.util.HashMap.new());
	oldAst = makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		makeLambda(makeToken(), makeEmptyList(),new UnitLiteral, oldFnType, new None),
		makeTempID(makeToken(),"x"),
		false); 
	oldAst.addObjectType(oldFnType);
	oldAst.addPermission(IMM);
	goalAst = oldAst.copy();
	var newAst = oldAst.copy();
	newAst.accept(permAnalysis);
	compareASTs(tester, oldAst, goalAst, newAst);
}