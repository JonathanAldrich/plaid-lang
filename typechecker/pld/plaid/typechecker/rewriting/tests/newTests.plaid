package plaid.typechecker.rewriting.tests;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.rewriting.*;
import plaid.ast.types.permissions.*;

val newTests = fn(unique Tester tester) => {
	
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	val unique LetNormalFormVisitor lnfVisitor = new LetNormalFormVisitor;
	var oldDecls = unit;
	var goalDecls = unit;
	val qiList = makeEmptyList(); qiList.add("N");
	
	System.out.println("Testing New Transformation");
	testName("lnf-new-bare");	//new N
	oldDecls = new None;
	oldAst = makeNewInstance(makeToken(), makeQI(makeToken(), qiList, oldDecls));
	newAst = oldAst.accept(lnfVisitor).first();
	goalDecls = new None;
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),
						 makeNewInstance(makeToken(), makeQI(makeToken(), qiList, goalDecls)),
					     makeTempID(makeToken(),"t1"), false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-new-complex");	//new N {val immutable test f = a.b; val immutable test g = c.d; val immutable test h = e; }
	val decls = makeEmptyList();
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"f"), 
							makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")),
							false, false, 
							makeFieldType(makeID(makeToken(),"f"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"g"), 
							makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
							false, false,
							makeFieldType(makeID(makeToken(),"g"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"h"), 
							makeID(makeToken(),"e"),
							false, false,
							makeFieldType(makeID(makeToken(),"h"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));							
	val initState = makeDeclList(makeToken(),decls);
	oldDecls = createSome(initState);
	oldAst = makeNewInstance(makeToken(), makeQI(makeToken(), qiList, oldDecls));
	newAst = oldAst.accept(lnfVisitor).first();
	val newDecls = makeEmptyList();
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"f"), 
							makeBorrow(makeToken(),
					   			 	   makeTempID(makeToken(),"t2"),
					   			  	   makeDereference(makeToken(),makeID(makeToken(),"a"),makeID(makeToken(),"b")),
					   			 	   makeTempID(makeToken(),"t2"),
					   			  	   false),
							false, false,
							makeFieldType(makeID(makeToken(),"f"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"g"), 
							makeBorrow(makeToken(),
					   			  	   makeTempID(makeToken(),"t3"),
					   			  	   makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
					   			  	   makeTempID(makeToken(),"t3"),
					   			  	   false),
							false, false,
							makeFieldType(makeID(makeToken(),"g"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"h"), 
							makeTake(makeToken(),
									 makeTempID(makeToken(), "t4"),
									 makeID(makeToken(),"e"),
									 makeTempID(makeToken(),"t4"),
									 false),
							false, false,
							makeFieldType(makeID(makeToken(),"h"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));									
	val newInitState = makeDeclList(makeToken(),newDecls);
	goalDecls = createSome(newInitState);
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeNewInstance(makeToken(), makeQI(makeToken(), qiList, goalDecls)),
					   makeTempID(makeToken(),"t1"), 
					   false);
	/*
	 * take t1 = new N {
	 * 	f = borrow t2 = a.b int t2
	 *  g = .....
	 * } int t1
	 */
		
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	System.out.println("");
	
	
	System.out.println("Testing NewInstance ObjectType inference");
	var typefetcher = unit;
	var st = unit;
	var cIn = unit;
	var cOut = unit;
	var result = unit;
	
	
	st = new StateTable;
	cIn = new Context;
	cOut = cIn.copy();
	val QI = makeQI(makeToken(),qiList,new None);
	oldAst = makeNewInstance(makeToken(),QI);
	newAst = oldAst.copy();
	typefetcher = new TypeFetchVisitor{ val st = st; val context = cIn; };
	
	
	testName("obj-new succeed");
	result = oldAst.accept(typefetcher);
	match(result) {
		case ErrObjectType {
			tester.testPassedMsg(false, "error typing state: " + result.errorMsg);
		}
		default {
			match (result == createNominalType(makeID(makeToken(), "N"))) {
				case True {
					match (oldAst == newAst) {
						case True {
							match (cIn == cOut) {
								case True {
									tester.testPassed(true);
								}
								case False {
									tester.testPassedMsg(false, "context should not change")
								}
							}
						}
						case False {
							tester.testPassedMsg(false, "Ast should not change");
						}
					}
				}
				case False {
					tester.testPassedMsg(false, "wrong type returned");
				}
			}
		}
	};
	
	
};