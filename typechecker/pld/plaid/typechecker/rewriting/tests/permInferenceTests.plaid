package plaid.typechecker.rewriting.tests;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.rewriting.*;
import plaid.ast.types.permissions.*;

val permInferenceTests = fn(unique Tester tester) => {
	
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	var permAnalysis = unit;
	
	System.out.println("Testing Basic Take Binding");
	permAnalysis = new PermissionAnalysisVisitor;
	permAnalysis.neededPerm = new UniquePermission;
	testName("perminf-take");
	oldAst = makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		new UnitLiteral,
		makeTempID(makeToken(),"x"),
		false); 
	oldAst.addObjectType(getUnitType());
	oldAst.accept(permAnalysis);
	goalAst =  makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		new UnitLiteral,
		makeTempID(makeToken(),"x"),
		false);
	goalAst.addObjectType(getUnitType());
	goalAst.addPermission(UNIQUE);
	match (oldAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
};