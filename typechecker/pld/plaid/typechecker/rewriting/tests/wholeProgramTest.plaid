package plaid.typechecker.rewriting.tests;

import plaid.ast.*;
import plaid.ast.visitor.*;
import plaid.ast.stateTable.*;
import plaid.testing.*;
import plaid.typechecker.context.*;
import plaid.typechecker.rewriting.*;
import plaid.typechecker.StateTableBuilderVisitor;
import plaid.ast.types.permissions.*;

val () -> void wholeProgramTest = fn(immutable String filename, unique Tester tester) => {
	val javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new(filename)));
	val unique ASTTranslator translator = new ASTTranslator;
	val unique ASTNode plaidAST = translator.translateAST(javaAST);	
	val stateTableVisitor = new StateTableBuilderVisitor;
	plaidAST.accept(stateTableVisitor);
	
	testName("WHOLE PROGRAM: " + filename + "\n\n");
	val unique ASTNode newAST = plaidAST.accept(new LetNormalFormVisitor);
	val ct = createObjContextFromCU(newAST);
	val typefetcher = new TypeFetchVisitor { val context = ct; val st = stateTableVisitor.stateTable; };
	val result = newAST.accept(typefetcher);
	match( result) {
		case ErrObjectType {
			tester.testPassedMsg(false,result.errorMsg);
		}
		default {
			tester.testPassed(true)
		}
	};
	
	java.lang.System.out.println("\n===============AST with Type===============\n");
	newAST.accept(new PrintVisitor);
};