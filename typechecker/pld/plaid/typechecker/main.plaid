/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.typechecker;

import plaid.ast.ASTTranslator;
import plaid.ast.visitor.ASTViewer;
import plaid.typechecker.typecheckerMethods.typecheckerFactory;

method main() {
	// (new PackageRepTranslator).test();
	
	//var javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new("testInputs/imperativeMergeSort/package.plaid")));
    var javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new("testInputs/lnfTest/package.plaid")));

	val translator = new ASTTranslator;
	val plaidAST = translator.translateAST(javaAST);
	
	val stTranslator = new StateTableBuilderVisitor;
	plaidAST.accept(stTranslator);
	stTranslator.stateTable.printTable();
	stTranslator.initialContext.printContext();
	plaidAST.accept(new ASTViewer { override val title = "ASTViewer - before LNF transformation";});
	
	// Bring AST to let normal form.
	val lnfPlaidAST = plaidAST.accept(new rewriting.LetNormalFormVisitor);
	lnfPlaidAST.accept(new ASTViewer { override val title = "ASTViewer - after LNF transformation";});
	
	// Run the type checking visitor.
	//plaidAST.accept(typecheckerFactory(stTranslator.initialContext, stTranslator.stateTable));
	
	//java.lang.System.out.println("----------------");
	//java.lang.System.out.println();
	//plaidAST.accept(new TypecheckOutputVisitor);
	
	//plaidAST.accept(new ASTViewer);
}