package plaid.typechecker.ast;

import plaid.ast.Expression;

state LNFTake case of LNFComputation {
	val immutable Token token;
	val unique ID x;
	val unique Expression exp;
	var unique Expression body;
	val immutable boolean mutable;
	val immutable PermType annotation; //is immutable correct here?

	method accept(v) {
		v.visitTake(this);  //TODO: make sure that this will be kosher - extra method outside of previous visitLetBinding()
	}
	
	method copy() {
		new LNFTake {
			val immutable Token token = this.token;
			val unique ID x = this.x.copy;
			val unique Expression exp = this.exp.copy();
			val unique Expression body = this.body.copy();
			val immutable boolean mutable = this.mutable;
			val immutable PermType annotation = this.annotation;  //TODO: do I need to make new objects for types?
		}
	}
}