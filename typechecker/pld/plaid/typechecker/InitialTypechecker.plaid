package plaid.typechecker;

import plaid.ast.visitor.LeafVisitor;
import plaid.typechecker.context.*;
import plaid.ast.types.typeError;

//will not have the full set of features that will be implemented eventually

state InitialTypechecker case of LeafVisitor {
	
//	var counter = 0;

	method generateID(tok) {
		counter = counter + 1;
		val n = "TCHKR$vAr" + counter + "$plaid";
		new ID with {
			val /*Option Token*/ token = tok;
			val /*String*/ name = n;
			override val /*Boolean*/ isTemp = true;
		};
	}
	
	val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	val /*Context*/ context; //need to keep track of variables and types
	var /*Option PermType*/ typedAs = new None; //pass result
	var /*Option PermType*/ synthesizeType = new None; //implement type synthesis (as opposed to checking)
}