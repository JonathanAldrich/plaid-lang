package plaid.typechecker;

import plaid.ast.visitor.LeafVisitor;
import plaid.typechecker.context.*;

//will not have the full set of features that will be implemented eventually

state InitialTypechecker case of LeafVisitor {
	
	val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	val /*Context*/ context; //need to keep track of variables and types
	var /*Option PermType*/ typedAs = new None;
	
	override method visitCompilationUnit(node) {
		//Typechecking a compilation unit involves
		//verifying that each declaration is well formed
		//this includes states, fields, and (top level) methods (TODO: get rid of top level methods)
		node.decls.map(fn (decl) => decl.accept(this));
	}
	
	override method visitStateDecl(node) {
		//our initial implementation is going to ignore the typing of states
		//and assume that our state table captures them correctly
		//we will type check the declarations in the state, though
		node.stateDef.accept(this);
	}
	
	override method visitFieldDecl(node) {
		// field declarations should be typed in an empty context
		//so type using a new empty context and then check
		//for consistency with the declared type
		java.lang.System.out.println("typechecking field " + node.f.name);
		val ftype = node.fieldType;
		val fST = this.stateTable;
		ifElse (node.abstractField) 
			{ typedAs = new Some { val value = ftype; } } //abstact fields get declared type
			{
				val fieldChecker = new InitialTypechecker {
					val context = new Context;
					val stateTable = fST; //TODO: do we need to copy this - will it be updated (not now I don't think)
				};
			
				node.e.accept(fieldChecker); //typecheck the field initialization
				
				match (fieldChecker.typedAs) {
					case Some {
						ifElse (fieldChecker.typedAs.value == ftype.permType )
							{ 
								this.typedAs = new Some { val value = ftype; }; 
								java.lang.System.out.println("field " + node.f.name + " typechecked!");
							}
							{ 
								this.typedAs = new None; 
								java.lang.System.out.println("initializer type wrong");
							};
					}
					case None {
						java.lang.System.out.println("typecheck of initializer failed");
					}	
				}
			};		
	}
	
	override method visitMethodDecl(node) {
		//for method Decls we need to verify that the body meets the specification
		//of the method type.  To do this, we create a new Typechecker instance with
		//a new context
		val mContext = new Context;
		val mtype = node.methodType;
		
		java.lang.System.out.println("typechecking method " + node.name);
		
		//add receiver
		mContext.put(new ID { val name = "this"; }, getContextType(mtype.receiverType)); 
		
		//add arg if exists
		match (node.arg) {
			case Some {
				mContext.put(node.arg.value, getContextType(mtype.argTypes.head.value));
			}
			default { }
		};
		
		//TODO: add environment variables
		
		//new typechecker for the method body
		val mST = this.stateTable;
		val methodChecker = new InitialTypechecker { 
								val context = mContext;
								val stateTable = mST; //TODO: do we need to copy this - will it be updated (not now I don't think)
							};
		node.body.accept(methodChecker);
		//check that return type matches
		var /*Boolean*/ retCheck = false;
		match (methodChecker.typedAs) {
			case Some {
				retCheck = methodChecker.typedAs.value == mtype.returnType;
				if (!retCheck) { java.lang.System.out.println("return !=  body"); }
			}
			case None {
				java.lang.System.out.println("typecheck of body failed");
			}
		};
		
		//check that receiver output type matches - equivalent to typed in the context
		//resulted by the method typing
		var /*Boolean*/ thisCheck = false;
		(new ID { val name = "this"; }).accept(methodChecker);
		match (methodChecker.typedAs) {
			case Some {
				thisCheck = methodChecker.typedAs.value == mtype.receiverType.output;
				if (!thisCheck) { java.lang.System.out.println("receiver output wrong"); }
			}
			case None {
				java.lang.System.out.println("type check of receiver failed");
			}
		};
		
		//check that arg output type matches - equivalent to typed in the context
		//resulted by the method typing, with receiver pulled out
		var /*Boolean*/ argCheck = false;
		match(node.arg) {
			case Some {
				node.arg.value.accept(methodChecker);
				match(methodChecker.typedAs) {
					case Some {
						argCheck = methodChecker.typedAs.value == mtype.argTypes.head.value.output;
						if (!argCheck) { java.lang.System.out.println("arg Output type wrong"); }
					}
					case None {
						java.lang.System.out.println("type check of arg output failed");
					}
				}
			}
			case None { argCheck = true; }
		};
		
		if(retCheck && thisCheck && argCheck) {
			typedAs = new Some { val value = mtype; };
			java.lang.System.out.println("Method " + node.name + " typechecked!");
		}
	}
	
	//****** Expressions *******
	
	override method visitLambda(node) {
	//similar to methods
		val lContext = new Context;
		val ltype = node.lambdaType;
		
		java.lang.System.out.println("typechecking lambda");
		
		//add arg if exists
		match (node.x) {
			case Some {
				lContext.put(node.x.value, getContextType(ltype.argTypes.head.value));
			}
			default { }
		};
		
		//TODO: add environment variables
		
		//new typechecker for the method body
		val lST = this.stateTable;
		val lambdaChecker = new InitialTypechecker { 
								val context = lContext;
								val stateTable = lST; //TODO: do we need to copy this - will it be updated (not now I don't think)
							};
		node.body.accept(lambdaChecker);
		
		//use return type to set actual return type of the lambda (no way to specify in syntax, so always dyn)
		var /*Boolean*/ retCheck = false;
		match (lambdaChecker.typedAs) {
			case Some {
				retCheck = true;
				ltype.returnType = lambdaChecker.typedAs.value; //inference of return type
			}
			case None {
				java.lang.System.out.println("typecheck of body failed");
			}
		};
		
		
		//check that arg output type matches - equivalent to typed in the context
		//resulted by the method typing, with receiver pulled out
		var /*Boolean*/ argCheck = false;
		match(node.x) {
			case Some {
				node.x.value.accept(lambdaChecker);
				match(lambdaChecker.typedAs) {
					case Some {
						argCheck = lambdaChecker.typedAs.value == ltype.argTypes.head.value.output;
						if (!argCheck) { java.lang.System.out.println("arg Output type wrong"); }
					}
					case None {
						java.lang.System.out.println("type check of arg output failed");
					}
				}
			}
			case None { argCheck = true; }
		};
		
		if(retCheck && argCheck) {
			typedAs = new Some { 
				val value = new PermType {
					val perm = new ImmutablePermission;
					val type = ltype;
					val borrowed = false;
				};  
			};
			java.lang.System.out.println("lambda typechecked!");
		}
	
	}
	
	override method visitID(node) {
		ifElse (context.containsKey(node)) {
			typedAs = createSome(context.remove(node)); //TODO: need type directed ID
		} {
			typedAs = NONE;
		}
	}
	
	override method visitUnitLiteral(node) {
		this.typedAs = new Some { 
			val value = new PermType {
							val perm = new NonePermission;
							val type = new NominalType { val typeName = new ID { val name = "unit";}; };
							val borrowed = false;
						};
		};
	}
	
	override method visitNewInstance(node) {
		match (node.s) {
			case QI {
				val stateID = new ID {val name = node.s.toString(); }; //TODO: fix
				val theState = this.stateTable.get(stateID);
				match (theState) {
					case Some {
						typedAs = new Some { 
							val value = new PermType {
								val perm = new UniquePermission;
								val type = new NominalType { val typeName = stateID; };
								val borrowed = false;
							};
						}
					}
					case None {
						typedAs = new None;
						java.lang.System.out.println("state " + node.s.name + " not defined");
					}
				}
			}
			default {
				java.lang.System.out.println("unsupported state in new expression");
			}
		}
	}
	
	override method visitMethodCall(node) {
		//steps:
		//1) find type of receiver in context (in let normal form, receiver will be an ID
		//2) find type of method on receiver
		//3) verify that receiver's type in context allows method call (initial type)
		//	a) add split and join nodes
		//4) verify that arg's type in context allows method call (if arg needed)
		//	a) add split and join nodes
		//5) update context
		
		match (node.receiver) {
			case ID { //TODO: do I need a contains check for node.receiver?
				ifElse ( this.context.containsKey(node.receiver)) {
					val tTypeStart = this.context.remove(node.receiver); //TODO: need multi set?
					match ( tTypeStart.type ) {
						case NominalType {
							val stType = this.stateTable.get(tTypeStart.type.typeName);
							match(stType) {
								case Some {
									val declType = stType.value.declaredTypeOf(node.methodName.name);
									match (declType) {
										case Some {
											match (declType.value) {
												case MethodType {

													//pull out type for receiver
													val tTypeNeeded = declType.value.receiverType.input;
													val tTypeResidue = tTypeStart.split(tTypeNeeded);
													//java.lang.System.out.println("start: " + tTypeStart.toString()); 
													//java.lang.System.out.println("needed: " + tTypeNeeded.toString()); 
													match (tTypeResidue) {
														case Some { 
															//java.lang.System.out.println("residue: " + tTypeResidue.value.toString()); 
															this.context.put(node.receiver, tTypeResidue); //put residue back in context in case needed for typing arg, if mulit set, need to be more careful
															
															//TODO: args, env
														
															//join receiver
															val tTypeOutput = declType.value.receiverType.output;
															var tTypeEnd = NONE;
															ifElse (tTypeStart.borrowed) {
																//must be able to join residue and output to original type
																tTypeEnd = tTypeOutput.joinTo(tTypeResidue.value, tTypeStart);
															} {
																//if not borrowed, just join the types
																tTypeEnd = createSome(tTypeOutput.join(tTypeResidue.value));
															};
															match (tTypeEnd) {
																case Some {
																	//typecheck suceeded (I think....)
																	typedAs = createSome(declType.value.returnType); //return type is the actual type
																	this.context.remove(node.receiver); //update context with final type for the receiver
																	this.context.put(node.receiver,tTypeEnd.value);
																	
																	//translate AST with explicit split and join nodes
																	val t = new ID { val name = "blatantTemp$plaid"; };
																	val mcCopy = new MethodCall { //will need to state change this later
																		val /*Expression*/ receiver = node.receiver;
																		val /*ID*/ methodName = node.methodName;
																		val /*Expression*/ argument = node.argument;
																		val /*Token*/ callSite = node.callSite;	
																	};	
																	node <- Split {
																		val /*ID*/ theVar = mcCopy.receiver;
																		val /*PermType*/ initialType = tTypeStart;
																		val /*PermType*/ neededType = tTypeNeeded;
																		val /*PermType*/ residue = tTypeResidue.value;
																		val /*Expression*/ body = new UnannotatedLetBinding {
																			val /*Token*/ token = NONE;
																			val /*ID*/ x = t;
																			val /*Expression*/ exp = mcCopy;
																			val /*boolean*/ mutable = false;
																			val /*Expression*/ body = new Join {
																				val /*ID*/ theVar = mcCopy.receiver;
																				val /*PermType*/ toJoin1 = tTypeResidue.value;
																				val /*PermType*/ toJoin2 = tTypeOutput;
																				val /*PermType*/ result = tTypeEnd.value;
																				val /*Expression*/ body = t;
																			};
																		};
																	};
																}
																case None {
																	java.lang.System.out.println("could not regain borrowed permission");
																	typedAs = NONE;
																}
															}
														}
														case None { 
															java.lang.System.out.println("not enough permission to receiver to call method " + node.methodName.name);
															typedAs = NONE;
														}												
													}
												}
												default {
													java.lang.System.out.println("Unsupported decl type for method");
													typedAs = NONE;
												}
											}
										}
										case None {
											java.lang.System.out.println("Method " + node.methodName.name + 
																		" not defined in state " + stType.name.name);
											typedAs = NONE;
										}
									}
								}
								case None {
									java.lang.System.out.println("State " + tType.type.typeName.name + "not defined");
									typedAs = NONE;
								}
							}
						}
						default {
							java.lang.System.out.println("unsupported receiver type");
							typedAs = NONE;
						}
					}
				} {
							java.lang.System.out.println("No type for receiver " + node.receiver.name);
							typedAs = NONE;
				}
			}
			default { 
				java.lang.System.out.println("Method Call not in let normal form");
				typedAs = NONE;
			}
		}
	}
}