/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.typechecker;

import plaid.ast.visitor.LeafVisitor;
import plaid.typechecker.context.*;
import plaid.ast.types.typeError;
import plaid.ast.stateTable.*;

//will not have the full set of features that will be implemented eventually

state InitialTypechecker case of LeafVisitor {
	
//	var counter = 0;

	method generateID(tok) {
		counter = counter + 1;
		val n = "TCHKR$vAr" + counter + "$plaid";
		new ID with {
			val /*Option Token*/ token = tok;
			val /*String*/ name = n;
			override val /*Boolean*/ isTemp = true;
		};
	}
	
	val /*StateTable*/ stateTable; // need to know about nominal types during typechecking
	val /*Context*/ context; //need to keep track of variables and types
	var /*Option PermType*/ typedAs = new None; //pass result
	var /*Option PermType*/ synthesizeType = new None; //implement type synthesis (as opposed to checking)
}