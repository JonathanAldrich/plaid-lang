package plaid.typechecker;

/**
 * Helper functions for typechecking
 */

/**
 * permission you get back when reading a field non-destructively
 * TODO: check that these are correct
 */
val /*(permission,permission) -> permission*/ fieldReadPermission = fn (objectPerm, fieldPerm) => {
	match (objectPerm) {
		case DynPermission { DYNP }
		case UniquePermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PurePermission }
				case FullPermission { PurePermission }
				case ImmutablePermission { ImmutablePermission }
				case SharedPermission { SharedPermission }
				case PurePermission { PurePermission }
				case NonePermission { NonePermission }
			}
		}
		case FullPermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PurePermission }
				case FullPermission { PurePermission }
				case ImmutablePermission { ImmutablePermission }
				case SharedPermission { SharedPermission }
				case PurePermission { PurePermission }
				case NonePermission { NonePermission }
			}
		}
		case ImmutablePermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PurePermission }
				case FullPermission { PurePermission }
				case ImmutablePermission { ImmutablePermission }
				case SharedPermission { PurePermission }
				case PurePermission { PurePermission }
				case NonePermission { NonePermission }
			}
		}
		case SharedPermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PurePermission }
				case FullPermission { PurePermission }
				case ImmutablePermission { ImmutablePermission }
				case SharedPermission { PurePermission }
				case PurePermission { PurePermission }
				case NonePermission { NonePermission }
			}
		}
		case PurePermission { 
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PurePermission }
				case FullPermission { PurePermission }
				case ImmutablePermission { ImmutablePermission }
				case SharedPermission { PurePermission }
				case PurePermission { PurePermission }
				case NonePermission { NonePermission }
			}
		}
		case NonePermission {
			NonePermission
		}
		default { java.lang.System.out.println("not a permission"); }
	}
};