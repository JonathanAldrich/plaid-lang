package plaid.typechecker.lnf;

import plaid.lang.*;
import plaid.ast.*;
import plaid.ast.visitor.*;

state TypeFetchVisitor case of ASTVisitor {
	//TODO: initialize them
	var immutable StateTable stateTable;
	var immutable Context context;
	//TODO: associate with scope so we could know the decltype, maybe in NewLetNormalFormVisitor
	//TODO: delete all the stuff of printVisitor
	//TODO: every expression should return its type
	//TODO: fix all permission
	
	var indent = 0;
	
	method output(s) {
		var i = 0;
		while { i < this.indent; } {
			java.lang.System.out.print("    ");
			i = i + 1
		};
		java.lang.System.out.println(s);
	}
	
	method inc() {
		this.indent = this.indent + 1
	}
	
	method dec() {
		this.indent = this.indent - 1
	}
	
	method visitAnnotatedLetBinding(node) {
		this.output("AnnotatedLetBinding");
		this.inc();
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitApplication(node) {
		this.output("Application");
		this.inc();
		node.f.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
		this.dec();
	}
	
	method visitAssignment(node) {
		this.output("Assignment");
		this.inc();
        match (node.target) {
            case plaid.lang.Some {
			    node.target.value.accept(this);
            }
            default {}
		};
		node.field.accept(this);
		node.value.accept(this);
		this.dec();		
	}
	
	method visitAtomicBlock(node) {
		this.output("Atomic");
		this.inc();
		node.id.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitBorrowBinding(node) {
		this.output("BorrowBinding");
		this.inc();
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitCase(node) {
		this.output("Case");
		this.inc();
		
		match (node.qi) {
			case Some {
				node.qi.value.accept(this);
			}			
			case None {
			}
		};
		
		match (node.x) {
			case Some {
				node.x.value.accept(this);
			}			
			case None {
			}
		};
		
		node.e.accept(this);
		this.dec();
	}
	
	method visitChangeState(node) {
		node.e.accept(this);
		node.s.accept(this);
		match (e) {
			case ID{
				context.update(node.e, createNominalType(IMM, node.s.toString()));
			}
			default {
				//TODO, not sure how?
			}
		}		
	}
	
	method visitCompilationUnit(node) {
		this.output("CompilationUnit");
		this.inc();
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		node.imports.accept(this);
		this.dec();
	}
	
	method visitDeclList(node) {
		this.output("DeclList");
		this.inc();
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		this.dec();
	}
	
	method visitDereference(node) {
		this.output("Dereference");
		this.inc();
		node.left.accept(this);
		node.right.accept(this);
		this.dec();
	}

	method visitDestructiveDereference(node) {
		this.output("DestructiveDereference");
		this.inc();
		node.left.accept(this);
		node.right.accept(this);
		this.dec();
	}
	
	method visitDoubleLiteral(node) {
        this.output("DoubleLiteral(" + node.double + ")");
    }
    
	method visitFieldDecl(node) {
		this.output("FieldDecl");
		this.inc();
		node.f.accept(this);
		node.e.accept(this);
		this.dec();
	}
	
	method visitGroupDecl(node) {
		this.output("GroupDecl" + (ifElse (node.isAbstract) { " (abstract)" } { "" }));
		this.inc();
		node.id.accept(this);
		this.dec();
	}
	
	method visitID(node) {
		this.output("ID(" + node.name + ")");
	}
	
	method visitImportList(node) {
		this.output("ImportList");
	}
	
	method visitIntLiteral(node) {
		this.output("IntLiteral(" + node.integer + ")");
	}
	
	method visitLambda(node) {
		this.output("Lambda");
		this.inc();
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
		this.dec();
	}
	
	method visitLetBinding(node) {
		this.output("LetBinding");
		this.inc();
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitMatch(node) {
		this.output("Match");
		this.inc();
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this)
		});
		this.dec();
	}
	
	method visitMethodCall(node) {
		node.receiver.accept(this);
		node.methodName.accept(this);
		node.arguments.map(fn (arg) => arg.accept(this));
				
		var mt = 1;
		//TODO: find the method by node.methodName
		
		match(node.receiver) {
			case ID {
				context.update(node.receiver,  new TypeBinding {var unique PermType currentType = mt.returnType;}  )
			}
			default {
				//TODO deal with this
			}
		};
				
		var lc = node.arguments.head;
		mt.argTypes.map(fn(argType) => {
			//TODO, not sure this is the best way
			context.update(lc.value, new TypeBinding {var unique PermType currentType = argType.output;} );
			lc = lc.next;
		});
		
	    var it = mt.environmentTypes.entrySet().iterator();
	    while {it.hasNext(); } {
	        var pair = it.next();
	        context.update(pair.getKey(), new TypeBinding {var unique PermType currentType = pair.getValue().output;} );
	        //System.out.println(pairs.getKey() + " = " + pairs.getValue());
	    }
	}
	
	method visitMethodDecl(node) {
		this.output("MethodDecl(" + node.name + ")");
		this.inc();
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
		this.dec();
	}
	
	method visitNewInstance(node) {
		node.s.accept(this);
		//Perhaps will be useful in next phrase
		//context.update(node.x, createNominalType(IMM, node.s.toString()));	//TODO now I only assume here the state is QI, not consider with
	}
	
	method visitPermType(node) {
		this.output("PermType");
	}
	
	method visitQI(node) {
		this.output("QI(" + node.toString() + ")");
		this.inc();
		match (node.initState) {
			case Some {
				node.initState.value.accept(this);
			}
			
			case None {
			}
		};
		this.dec();
	}
	
	method visitSplitBlock(node) {
		this.output("SplitBlock");
		this.inc();
		node.body.map(fn (e) => e.accept(this));
		this.dec();
	}
	
	method visitStateDecl(node) {
		this.output("StateDecl");
		this.inc();
		node.name.accept(this);
		node.stateDef.accept(this);
		match (node.caseOf) {
            case plaid.lang.Some {
			    node.caseOf.value.accept(this);
            }
            default {}
		};
		this.dec();
	}
	
	method visitStringLiteral(node) {
		this.output("StringLiteral('" + node.string + "')");
	}
	
	method visitTakeBinding(node) {
		this.output("TakeBinding");
		this.inc();
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitUnitLiteral(node) {
		this.output("UnitLiteral");
	}
	
	method visitUnpackInnerGroups(node) {
		this.output("UnpackInnerGroups");
		this.inc();
		node.body.accept(this);
		this.dec();
	}
	
	method visitWith(node) {
		this.output("With");
		this.inc();
		node.s1.accept(this);
		node.s2.accept(this);
		this.dec();
	}
}