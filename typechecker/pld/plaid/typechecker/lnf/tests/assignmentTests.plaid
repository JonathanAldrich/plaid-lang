package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void assignmentTests = fn() => {
	val unique Assignment bareAssignment = new Assignment {
		var immutable Token token = makeToken();
		var unique Expression target = createSome(makeID("x"));
		var unique ID field = makeID("f");
		var unique Expression value = makeID("y");
	};

	rewrite(bareAssignment);
	
	val unique Assignment assign1 = new Assignment {
		var immutable Token token = makeToken();
		var unique Expression target = createSome(new Dereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID("a");
			val unique ID right = makeID("b");
		});
		var unique ID field = makeID("f");
		var unique Expression value = makeID("y");
	};
	
	rewrite(assign1);
	
	val unique Assignment assign2 = new Assignment {
		var immutable Token token = makeToken();
		var unique Expression target = createSome(makeID("x"));
		var unique ID field = makeID("f");
		var unique Expression value = new Dereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID("a");
			val unique ID right = makeID("b");
		};
	};
	
	rewrite(assign2);
	
	val unique Assignment assign3 = new Assignment {
		var immutable Token token = makeToken();
		var unique Expression target = createSome(new Dereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID("x");
			val unique ID right = makeID("y");
		});
		var unique ID field = makeID("f");
		var unique Expression value = new Dereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID("a");
			val unique ID right = makeID("b");
		};
	};
	
	rewrite(assign3);
};