package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.testing.*;

val () -> void assignmentTests = fn(unique Tester tester) => {
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	val unique LetNormalFormVisitor lnfVisitor = new LetNormalFormVisitor;
	
	
	System.out.println("Testing Assignment transformation");
	testName("lnf-assign-bare");
	oldAst = makeAssignment(makeToken(), createSome(makeID(makeToken(),"x")), makeID(makeToken(),"f"), makeID(makeToken(),"y"));
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),
						 makeAssignment(makeToken(), createSome(makeID(makeToken(),"x")), makeID(makeToken(),"f"), makeID(makeToken(),"y")),
					     makeTempID(makeToken(),"t1"), false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-assign1");
	oldAst = makeAssignment(makeToken(), 
							createSome(makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"z"))), 
							makeID(makeToken(),"f"), 
							makeID(makeToken(),"y"));
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"z")),
					   			  makeAssignment(makeToken(), createSome(makeTempID(makeToken(),"t2")), makeID(makeToken(),"f"), makeID(makeToken(),"y")),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};

	testName("lnf-assign2");
	oldAst = makeAssignment(makeToken(), 
							createSome(makeID(makeToken(),"x")), 
							makeID(makeToken(),"f"), 
							makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")));
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")),
					   			  makeAssignment(makeToken(), createSome(makeID(makeToken(),"x")), makeID(makeToken(),"f"), makeTempID(makeToken(),"t2")),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-assign3");
	oldAst = makeAssignment(makeToken(), 
							createSome(makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"w"))), 
							makeID(makeToken(),"f"), 
							makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")));
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"w")),
					   			  makeBorrow(makeToken(),
					   			  			 makeTempID(makeToken(),"t3"),
					   			  			 makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")),
					   			  			 makeAssignment(makeToken(), createSome(makeTempID(makeToken(),"t2")), makeID(makeToken(),"f"), makeTempID(makeToken(),"t3")),
					   			  			 false),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	
};