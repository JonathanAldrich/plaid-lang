package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void changeStateTests = fn() => {
	val qiList = makeEmptyList(); qiList.add("N");
	
	val unique Expression changeBare = makeChangeState(makeToken(), makeID(makeToken(),"x"), makeQI(makeToken, qiList, new None));
	rewrite(changeBare);
	
	val unique Expression changeC = makeChangeState(makeToken(), makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")), makeQI(makeToken, qiList, new None));
	rewrite(changeC);
	
	
	val /*List<Decl>*/ decls = makeEmptyList();
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"f"), 
							makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")),
							false, false, new FieldType));
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"g"), 
							makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
							false, false, new FieldType));
	val unique State initState = makeDeclList(makeToken(),decls);
	val unique Expression changeI = makeChangeState(makeToken(), makeID(makeToken(),"x"), makeQI(makeToken, qiList, createSome(initState)));
	rewrite(changeI);
	
	
	val /*List<Decl>*/ decls2 = makeEmptyList();
	decls2.add(makeFieldDecl(makeToken(),
							 makeID(makeToken(),"f"), 
							 makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")),
							 false,false, new FieldType));
	decls2.add(makeFieldDecl(makeToken(),
							 makeID(makeToken(),"g"), 
							 makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
							 false,false, new FieldType));
	val unique State initState2 = makeDeclList(makeToken(),decls2);
	val unique Expression changeCI = makeChangeState(makeToken(), makeDereference(makeToken(),makeID(makeToken(),"x"), makeID(makeToken(),"y")), makeQI(makeToken, qiList, createSome(initState2)));
	rewrite(changeCI);
};