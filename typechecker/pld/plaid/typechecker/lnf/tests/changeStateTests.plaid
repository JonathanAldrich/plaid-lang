package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void changeStateTests = fn() => {
	val unique Expression changeBare = makeChangeState(makeID("x"), makeQI("N", new None));
	rewrite(changeBare);
	
	val unique Expression changeC = makeChangeState(makeDereference(makeID("a"), makeID("b")), makeQI("N", new None));
	rewrite(changeC);
	
	
	val /*List<Decl>*/ decls = makeEmptyList();
	decls.add(makeFieldDecl(makeID("f"), makeDereference(makeID("a"), makeID("b"))));
	decls.add(makeFieldDecl(makeID("g"), makeDereference(makeID("c"), makeID("d"))));
	val unique State initState = makeDeclList(decls);
	val unique Expression changeI = makeChangeState(makeID("x"), makeQI("N", createSome(initState)));
	rewrite(changeI);
	
	
	val /*List<Decl>*/ decls2 = makeEmptyList();
	decls2.add(makeFieldDecl(makeID("f"), makeDereference(makeID("a"), makeID("b"))));
	decls2.add(makeFieldDecl(makeID("g"), makeDereference(makeID("c"), makeID("d"))));
	val unique State initState2 = makeDeclList(decls2);
	val unique Expression changeCI = makeChangeState(makeDereference(makeID("x"), makeID("y")), makeQI("N", createSome(initState2)));
	rewrite(changeCI);
};