package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.lnf.*;
import plaid.ast.types.permissions.*;

val changeStateTests = fn(unique Tester tester) => {
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	val unique LetNormalFormVisitor lnfVisitor = new LetNormalFormVisitor;
	var oldDecls = unit;
	var goalDecls = unit;
	val qiList = makeEmptyList(); qiList.add("N");
	
	var st = unit;
	var ct = unit;
	var typefetcher = unit;
	
	System.out.println("Testing State Change Transformation");
	testName("lnf-change-bare");	//x <- N
	oldDecls = new None;
	oldAst = makeChangeState(makeToken(), makeID(makeToken(), "x"), makeQI(makeToken(), qiList, oldDecls));
	newAst = oldAst.accept(lnfVisitor).first();
	goalDecls = new None;
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),
						 makeChangeState(makeToken(), makeID(makeToken(), "x"),makeQI(makeToken(), qiList, goalDecls)),
					     makeTempID(makeToken(),"t1"), false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	//object Type
	st = new StateTable { override val states = java.util.HashMap.new(); };
	ct = new Context; 
	
	putState(st, "N");
	putState(st, "M");
	putPerm(ct, "x", "M");	//so x : M --> N
	
	typefetcher = new TypeFetchVisitor { var context = ct; var stateTable = st; };
	newAst.accept(typefetcher);
	
	testName("lnf-change-C");	//x.y <- N {val immutable test f = a.b; val immutable test g = c.d; val immutable test h = e; }
	val decls = makeEmptyList();
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"f"), 
							makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")),
							false, false, 
							makeFieldType(makeID(makeToken(),"f"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"g"), 
							makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
							false, false,
							makeFieldType(makeID(makeToken(),"g"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	decls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"h"), 
							makeID(makeToken(),"e"),
							false, false,
							makeFieldType(makeID(makeToken(),"h"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));							
	val initState = makeDeclList(makeToken(),decls);
	oldDecls = createSome(initState);
	oldAst = makeChangeState(makeToken(), 
							 makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(), "y")),
							 makeQI(makeToken(), qiList, oldDecls));
	newAst = oldAst.accept(lnfVisitor).first();
	val newDecls = makeEmptyList();
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"f"), 
							makeBorrow(makeToken(),
					   			 	   makeTempID(makeToken(),"t2"),
					   			  	   makeDereference(makeToken(),makeID(makeToken(),"a"),makeID(makeToken(),"b")),
					   			 	   makeTempID(makeToken(),"t2"),
					   			  	   false),
							false, false,
							makeFieldType(makeID(makeToken(),"f"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"g"), 
							makeBorrow(makeToken(),
					   			  	   makeTempID(makeToken(),"t3"),
					   			  	   makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")),
					   			  	   makeTempID(makeToken(),"t3"),
					   			  	   false),
							false, false,
							makeFieldType(makeID(makeToken(),"g"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));
	newDecls.add(makeFieldDecl(makeToken(),
							makeID(makeToken(),"h"), 
							makeTake(makeToken(),
									 makeTempID(makeToken(), "t4"),
									 makeID(makeToken(),"e"),
									 makeTempID(makeToken(),"t4"),
									 false),
							false, false,
							makeFieldType(makeID(makeToken(),"h"),
											createTakeType(IMM,createNominalType(makeID(makeToken(),"test"))),
											true)));									
	val newInitState = makeDeclList(makeToken(),newDecls);
	goalDecls = createSome(newInitState);
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(), "t5"),
					   			  makeDereference(makeToken(), makeID(makeToken(), "x"), makeID(makeToken(), "y")),
					   			  makeChangeState(makeToken(), 
					   			  				  makeTempID(makeToken(), "t5"),
					   			  				  makeQI(makeToken(),qiList,goalDecls)),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	//object type
	st = new StateTable { override val states = java.util.HashMap.new(); };
	ct = new Context; 
	putState(st, "N");
	putState(st, "A");
	putState(st, "test");
	putState(st, "M");
	putPerm(ct, "x", "A");	
	
	addField(st, "A", "y", "M"); //so x.y : M --> N
	addField(st, "A", "b", "test");
	addField(st, "A", "d", "test");
	
	putPerm(ct, "a", "A");
	putPerm(ct, "c", "A");
	putPerm(ct, "e", "test");
	
	//newAst.accept(new PrintVisitor);
	typefetcher = new TypeFetchVisitor { var context = ct; var stateTable = st; };
	newAst.accept(typefetcher);
};