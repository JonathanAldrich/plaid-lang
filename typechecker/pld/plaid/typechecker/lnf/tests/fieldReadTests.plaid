package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void fieldReadTests = fn() => {
	val unique Dereference bareRead = new Dereference {
		val immutable Token token = makeToken();
		val unique Expression left = makeID(makeToken(),"x");
		val unique ID right = makeID(makeToken(),"f");
	};

	rewrite(bareRead);
	
	val unique Dereference complexRead = new Dereference {
		val immutable Token token = makeToken();
		val unique Expression left = new Dereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID(makeToken(),"x");
			val unique ID right = makeID(makeToken(),"f");
		};
		val unique ID right = makeID(makeToken(),"g");
	};
	
	rewrite(complexRead);
	
	val unique Dereference nested = makeDereference(makeToken(),makeDereference(makeToken(),makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")), makeID(makeToken(),"c")), makeID(makeToken(),"d"));
	rewrite(nested);
};