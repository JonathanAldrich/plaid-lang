package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.ast.visitor.*;
import plaid.testing.*;
import java.lang.System;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.lnf.*;
import plaid.ast.types.permissions.*;

val varTests = fn(unique Tester tester) => {
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	val unique LetNormalFormVisitor lnfVisitor = new LetNormalFormVisitor;
	
	System.out.println("Testing Variable transformation");
	
	oldAst = makeID(makeToken(),"x");
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),makeID(makeToken(),"x"),
					   makeTempID(makeToken(),"t1"), false);
	
	testName("lnf-var");
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	//
		

	//get Object Type for newAst
	val st = new StateTable;
	val ct = new Context; 
	
	putPerm(ct, "x", "A");
	
	var typefetcher = new TypeFetchVisitor { var context = ct; var stateTable = st; };
	newAst.accept(typefetcher);
	
	//newAst.accept(new PrintVisitor);
	
	//set goalAst type
	goalAst.x.objectType = getObjectType("A");
	goalAst.exp.objectType = getObjectType("A");
	goalAst.body.objectType = getObjectType("A");
	goalAst.objectType = getObjectType("A");	
	//goalAst.accept(new PrintVisitor);		
	testName("lnf-var : typed");
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
};