package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.visitor.PrintVisitor;
import plaid.typechecker.lnf.LetNormalFormVisitor;
import plaid.typechecker.lnf.NewLetNormalFormVisitor;

val (unique Expression) -> void rewrite = fn (unique Expression e) => {
	val unique PrintVisitor printVisitor = new PrintVisitor;
	val unique NewLetNormalFormVisitor lnfVisitor = new NewLetNormalFormVisitor;
	
	java.lang.System.out.println("\nREWRITE TEST");
	e.accept(printVisitor);
	java.lang.System.out.println("---------------------");
	val newAst = e.accept(lnfVisitor).first();
	newAst.accept(printVisitor);
};

method main() {
	varTests();
	fieldReadTests();
	destructiveReadTests();
	methodCallTests();
	appTests();
	assignmentTests();
	matchTests();
	lambdaTests();
	letBindingTests();
	newTests();
	changeStateTests();
	
	wholeProgramTest("testInputs/fibonacci/package.plaid");
	wholeProgramTest("testInputs/basicAeminium/package.plaid");
	wholeProgramTest("testInputs/functionalMergeSort/package.plaid");
}