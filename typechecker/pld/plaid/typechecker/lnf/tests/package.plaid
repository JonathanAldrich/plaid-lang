package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.visitor.PrintVisitor;
import plaid.typechecker.lnf.LetNormalFormVisitor;
import plaid.typechecker.lnf.NewLetNormalFormVisitor;
import plaid.testing.Tester;

val (unique Expression) -> void rewrite = fn (unique Expression e) => {
	val unique PrintVisitor printVisitor = new PrintVisitor;
	val unique NewLetNormalFormVisitor lnfVisitor = new NewLetNormalFormVisitor;
	
	java.lang.System.out.println("\nREWRITE TEST");
	e.accept(printVisitor);
	java.lang.System.out.println("---------------------");
	val newAst = e.accept(lnfVisitor).first();
	newAst.accept(printVisitor);
};

val printErrorASTs = fn (immutable ASTNode oldAst, immutable ASTNode newAst, immutable ASTNode goalAst) => {
	val unique PrintVisitor printVisitor = new PrintVisitor;
	java.lang.System.out.println("AST: ");
	oldAst.accept(printVisitor);
	java.lang.System.out.println("Translated to: ");
	newAst.accept(printVisitor);
	java.lang.System.out.println("But wanted: ");
	goalAst.accept(printVisitor);
};

method main() {
	val tester = new Tester;
	
	varTests(tester);
	fieldReadTests(tester);
	assignmentTests(tester);
	methodCallTests(tester);
	appTests(tester);
	newTests(tester);
	changeStateTests(tester);

	//matchTests();
	//lambdaTests();
	//letBindingTests();


	
	//wholeProgramTest("testInputs/fibonacci/package.plaid");
	//wholeProgramTest("testInputs/basicAeminium/package.plaid");
	//wholeProgramTest("testInputs/functionalMergeSort/package.plaid");
	
	System.out.println("");
	tester.printSummary();
	
}