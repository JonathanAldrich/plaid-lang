package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void methodCallTests = fn() => {
	val args = makeEmptyList();
	args.add(makeID(makeToken(),"y"));
	args.add(makeID(makeToken(),"z"));
	val unique Expression callBare = makeMethodCall(makeToken(),makeID(makeToken(),"x"), makeID(makeToken(),"m"), args);
	rewrite(callBare);
	
	
	val args2 = makeEmptyList();
	args2.add(makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")));
	args2.add(makeDereference(makeToken(),makeID(makeToken(),"c"), makeID(makeToken(),"d")));
	val recv2 = makeDereference(makeToken(),makeID(makeToken(),"x"), makeID(makeToken(),"y"));
	val unique Expression callComplex = makeMethodCall(makeToken(),recv2, makeID(makeToken(),"m"), args2);
	rewrite(callComplex);
	
	
	val args3 = makeEmptyList();
	args3.add(makeID(makeToken(),"x"));
	val unique Expression print = makeMethodCall(makeToken(),makeDereference(makeToken(),makeDereference(makeToken(),makeID(makeToken(),"lang"), makeID(makeToken(),"System")), makeID(makeToken(),"out")), makeID(makeToken(),"println"), args3);
	rewrite(print);
};