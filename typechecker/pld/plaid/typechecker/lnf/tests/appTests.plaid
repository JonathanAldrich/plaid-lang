package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.context.*;
import plaid.typechecker.lnf.*;

val () -> void appTests = fn(unique Tester tester) => {
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	val unique LetNormalFormVisitor lnfVisitor = new LetNormalFormVisitor;
	var oldArgs = unit;
	var goalArgs = unit;
	
	var st = unit;
	var ct = unit;
	var typefetcher = unit;
	var atypes = unit;
		
	System.out.println("Testing Application transformation");
	
	testName("lnf-app-bare");	//x(y)
	oldArgs = makeEmptyList(); oldArgs.add(makeID(makeToken(),"y"));
	oldAst = makeApplication(makeToken(), makeID(makeToken(),"x"), oldArgs);
	newAst = oldAst.accept(lnfVisitor).first();
	goalArgs = makeEmptyList(); goalArgs.add(makeID(makeToken(),"y"));
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),
						 makeApplication(makeToken(), makeID(makeToken(),"x"), goalArgs),
					     makeTempID(makeToken(),"t1"), false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};

	//newAst.accept(new PrintVisitor);
	
	//Object Type test
	st = new StateTable { override val states = java.util.HashMap.new(); } ;
	ct = new Context; 
	
	putState(st, "A");
	putState(st, "B");
	
	atypes = makeEmptyList(); atypes.add("B");

	putPermLam(ct, "x", addLambda(st, "A", "x", "B", atypes));
	putPerm(ct, "y", "B");
	typefetcher = new TypeFetchVisitor { var context = ct; var stateTable = st; };
	newAst.accept(typefetcher);
	
	//newAst.accept(new PrintVisitor);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	testName("lnf-call1");	//x.z(y) *
	oldAst = makeApplication(makeToken(), 
							makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"z")),  
							oldArgs);
	newAst = oldAst.accept(lnfVisitor).first();
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"z")),
					   			  makeApplication(makeToken(), makeTempID(makeToken(),"t2"), goalArgs),
					   			  false),
					   makeTempID(makeToken(),"t1"),  // take t1 = borrow t2 = x.z in t2(y) in t1
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-call1 : typed");
	//Object Type test
	st = new StateTable { override val states = java.util.HashMap.new(); } ;
	ct = new Context; 
	
	putState(st, "A");
	putState(st, "B");
	putState(st, "C");
	
	atypes = makeEmptyList(); atypes.add("B");
	var lam = addLambda(st, "A", "z", "C", atypes);
	putPerm(ct, "x", "A");
	putPerm(ct, "y", "B");
	
	typefetcher = new TypeFetchVisitor { var context = ct; var stateTable = st; };
	newAst.accept(typefetcher);		
	
	//set goalAst type
	goalAst.objectType = getObjectType("C");	
	goalAst.x.objectType = getObjectType("C");
	goalAst.exp.objectType = getObjectType("C");
	goalAst.body.objectType = getObjectType("C");
		
	goalAst.exp.x.objectType = lam;
	goalAst.exp.exp.objectType = lam;
	goalAst.exp.body.objectType = getObjectType("C");
	
	goalAst.exp.exp.left.objectType = getObjectType("A");
	goalAst.exp.exp.right.objectType = noType;
	
	goalAst.exp.body.f.objectType = lam;
	goalAst.exp.body.arguments.head.value.objectType = getObjectType("B");
	
//	newAst.accept(new PrintVisitor);	
//	goalAst.accept(new PrintVisitor);	
	
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	testName("lnf-call2");	//x(y.z)
	oldArgs = makeEmptyList(); oldArgs.add(makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")));
	oldAst = makeApplication(makeToken(), 
							makeID(makeToken(),"x"), 
							oldArgs);
	newAst = oldAst.accept(lnfVisitor).first();
	goalArgs = makeEmptyList(); goalArgs.add(makeTempID(makeToken(),"t2"));
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")),
					   			  makeApplication(makeToken(), makeID(makeToken(),"x"), goalArgs),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-call2 (multiple args)");
	oldArgs = makeEmptyList(); //x(y.z, a.b)
	oldArgs.add(makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")));
	oldArgs.add(makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")));
	oldAst = makeApplication(makeToken(), 
							makeID(makeToken(),"x"), 
							oldArgs);
	newAst = oldAst.accept(lnfVisitor).first();
	goalArgs = makeEmptyList(); goalArgs.add(makeTempID(makeToken(),"t2")); goalArgs.add(makeTempID(makeToken(),"t3"));
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")),
					   			  makeBorrow(makeToken(),
					   			  			 makeTempID(makeToken(),"t3"),
					   			  			 makeDereference(makeToken(),makeID(makeToken(),"a"), makeID(makeToken(),"b")),
					   			  			 makeApplication(makeToken(), makeID(makeToken(),"x"), goalArgs),
					   			  			 false),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
	
	testName("lnf-call3");	//x.w(y.z, a.b)
	oldArgs = makeEmptyList(); oldArgs.add(makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")));
	oldAst = makeApplication(makeToken(), 
							makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"w")), 
							oldArgs);
	newAst = oldAst.accept(lnfVisitor).first();
	goalArgs = makeEmptyList(); goalArgs.add(makeTempID(makeToken(),"t3"));
	goalAst = makeTake(makeToken(),
					   makeTempID(makeToken(),"t1"),
					   makeBorrow(makeToken(),
					   			  makeTempID(makeToken(),"t2"),
					   			  makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"w")),
					   			  makeBorrow(makeToken(),
					   			  			 makeTempID(makeToken(),"t3"),
					   			  			 makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"z")),
					   			  			 makeApplication(makeToken(), makeTempID(makeToken(),"t2"), goalArgs),
					   			  			 false),
					   			  false),
					   makeTempID(makeToken(),"t1"), 
					   false);
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};
};