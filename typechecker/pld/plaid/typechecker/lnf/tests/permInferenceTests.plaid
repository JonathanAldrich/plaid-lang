package plaid.typechecker.lnf.tests;

import plaid.ast.*;
import plaid.testing.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.IMM;
import plaid.typechecker.context.*;
import plaid.ast.stateTable.*;
import plaid.typechecker.lnf.*;
import plaid.ast.types.permissions.*;

val permInferenceTests = fn(unique Tester tester) => {
	
	var newAst = unit;
	var oldAst = unit;
	var goalAst = unit;
	var permAnalysis = unit;
	
	System.out.println("Testing Basic Take Binding");
	permAnalysis = new PermissionAnalysisVisitor;
	testName("perminf-take");
	oldAst = makeTake(
		makeToken(), 
		makeTempID(makeToken(),"x"),
		new UnitLiteral,
		makeTempID(makeToken(),"x"),
		false); 
	oldAst.addObjectType(getUnitType());
	System.out.println(oldAst.toString());
	oldAst.accept(permAnalysis);
	System.out.println(oldAst.toString());
	/**
	
	goalDecls = new None;
	goalAst = makeTake(makeToken(),makeTempID(makeToken(),"t1"),
						 makeNewInstance(makeToken(), makeQI(makeToken(), qiList, goalDecls)),
					     makeTempID(makeToken(),"t1"), false);
	oldAst.addObjectType
	match (newAst == goalAst) {
		case True {
			tester.testPassed(true);
		}
		case False {
			tester.testPassed(false);
			printErrorASTs(oldAst,newAst,goalAst);
		}
	};*/
};