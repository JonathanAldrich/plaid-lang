package plaid.typechecker.lnf.tests;

import plaid.ast.*;

val () -> void destructiveReadTests = fn() => {
	val unique DestructiveDereference bareRead = new DestructiveDereference {
		val immutable Token token = makeToken();
		val unique Expression left = makeID(makeToken(),"x");
		val unique ID right = makeID(makeToken(),"f");
	};

	rewrite(bareRead);
	
	val unique DestructiveDereference complexRead = new DestructiveDereference {
		val immutable Token token = makeToken();
		val unique Expression left = new DestructiveDereference {
			val immutable Token token = makeToken();
			val unique Expression left = makeID(makeToken(),"x");
			val unique ID right = makeID(makeToken(),"f");
		};
		val unique ID right = makeID(makeToken(),"g");
	};
	
	rewrite(complexRead);
};