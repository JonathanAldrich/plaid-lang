package plaid.typechecker.lnf;

import plaid.lang.*;
import plaid.ast.visitor.*;
import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.*;

state PermissionAnalysisVisitor case of ASTVisitor {
	/*
	 * Since I don't have time to finish them all
	 * I put this code here just to show how to use the previous result of Object Type Analysis
	 * The code itself is not to be considered correct
	 */
	
//	var immutable Context context;
//		
//	method visitTakeBinding(node) {		
//		context.put(node.x, createTakeType(NONEP, node.x.objectType));	//context = C + x		
//		node.body.accept(this);	//context = C'
//		
//		match(node) {
//			case ObjectTypeAnnotation  {
//				var perm = context.get(node.x).currentType.perm;
//				
//				match(node.objectType) {
//					case LambdaType {//take-fn-add
//						node.addPermission(IMM);
//						node.objectType.returnType.perm = perm;
//					}
//					default {//take-add						
//						node.addPermission(perm);
//					}
//				};
//
//			}
//			case PermTypeAnnotation { //take-pre, take-fn-pre
//				//Do nothing
//			}
//		};		
//		context.remove(node.x);	// context = C''		
//		node.exp.accept(this);	// context = C'''
//	}	
//	
//	method visitBorrowBinding(node) { // not finished
//		match(node.exp) {
//			case ID {
//				var /*TypeBinding*/ yBind = context.get(node.exp).copy();
//				var py = yBind.currentType.perm;
//				
//				yBind.currentType.perm = NONEP;
//				context.update(node.exp, yBind);
//				context.put(node.x, yBind);
//				
//				node.body.accept(this);
//				
//				var py2 = context.get(node.exp).currentType.perm;
//				var py3 = yPerm.leastUpperBound(py2);
//				
//				var pyhat = unit;
//				match(node) {
//					case ObjectTypeAnnotation {	//take-var-add
//						var px = context.get(node.x).currentType.perm;
//						pyhat = py3.leastUpperBound(px);
//					}
//					case PermTypeAnnotation {	//take-var-pred
//						pyhat = py3.leastUpperBound(node.pType.perm);
//					}
//				};
//				
//				yBind.currentType.perm = pyhat;
//				context.update(node.exp, yBind);
//				context.remove(node.x);
//			}
//			case Dereference {
//				var /*TypeBinding*/ yBind = context.get(node.exp.left).copy();
//				var py = yBind.currentType.perm;
//				....//				
//			}
//		};
//	}
//	
	
}