/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 package plaid.lang;
 
 state Option {
 	/* type T; */ 

 	/**
 	 * If the option is Some(x), then Some(f(x)) is returned, otherwise None
 	 * is returned.
 	 *
 	 * Example: 
 	 * val opt = makeSome(1);
 	 * val result = opt.map(fn(x) => { x * 2 });
 	 * result.getValue() == 2
 	 */
 	method /*Option<R>*/ map/*<R>*/(/*T -> R*/ f);

 	/**
 	 * If the option is Some(x), then f(x) is returned, otherwise None is
 	 * returned.
 	 *
 	 * Example:
 	 * val opt = makeSome(-1);
 	 * val result = opt.flatMap(fn(x) => { ifElse (x < 0) { NONE } { makeSome(x) } });
 	 * result == NONE
 	 */
 	method /*Option<R>*/ flatMap/*<R>*/(/*T -> Option<R>*/ f);

 	/**
 	 * If the option is Some(x), then x is returned, otherwise alt is returned.
 	 *
 	 * val opt = NONE;
 	 * val result = opt.map(fn(x) => { x * 2 }).getOrElse(0);
 	 * result == 0
 	 */
 	method /*T*/ getOrElse(/*T*/ alt);

 	/**
 	 * If the option is Some(x), then Some(x) is returned, otherwise alt() is
 	 * returned.
 	 * 
 	 * val opt = NONE;
 	 * val default = 1;
 	 * val result = opt.map(fn(x) => { x * 2 }).orElse({ printLine("no value!"); NONE });
 	 * result == NONE
 	 */
 	method /*Option<T>*/ orElse(/*() -> T*/ alt);

 	/**
 	 * Returns true if the Option is a Some, otherwise returns false.
 	 */
 	method /*boolean*/ hasValue();

 	
 	method immutable String toString();
 }