/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.collections;

//method /*TreeSet<T>*/ makeTreeSet() {
//	new TreeSet { val tree = makeAATree(); }
//}
//
//method /*TreeSet<T>*/ makeTreeSetWithOrder(immutable OrderProvider order) {
//	new TreeSet { val tree = makeAATreeWithOrder(order); }
//}
//
//method /*TreeMap<K,V>*/ makeTreeMap() {
//	// tree map ordering is based on the key only
//	val pairOrder = new OrderProvider {
//		method eq(a, b) { a.fst == b.fst }
//		method lt(a, b) { a.fst < b.fst }
//	};
//
//	val keyOrder = new OrderProvider {
//		method eq(a, b) { a == b }
//		method lt(a, b) { a < b }
//	};
//
//	new TreeMap { val tree = makeAATreeWithOrder(pairOrder); val keyOrdering = keyOrder; }
//}
//
//method /*TreeMap<K,V>*/ makeTreeMapWithOrder(immutable OrderProvider order) {
//	// wrap the provided explicit key ordering in an ordering that
//	// deals with the (key, value) pairs
//	val pairOrder = new OrderProvider {
//		method eq(a, b) { 
//			match(order(a.fst, b.fst)) {
//				case OrdEqual { true }
//				default { false }
//			}
//		}
//
//		method lt(a, b) {
//			match(order(a.fst, b.fst)) {
//				case OrdLessThan { true }
//				default { false }
//			}
//		}
//	};
//
//	new TreeMap { val tree = makeAATreeWithOrder(pairOrder); val keyOrder = order; }
//}
//
//
//
///* AATree constructors - not necessarily useful outwith the collections package,
// * as AATree is used as the backend of TreeSet and TreeMap, which are the real
// * public types.
// */
//method /*T*/ unique AATree makeAATree() {
//	new AATree {
//		val explicitCompare = new None;
//	}
//}
//
//method /*T*/ unique AATree makeAATreeWithOrder(immutable OrderProvider op) {
//	new AATree {
//		val explicitCompare = makeSome(op);
//	}
//}
//
//method /*<T>*/ unique Array/*<T>*/ makeArray(immutable Integer arrSize,/*immutable (immutable Int) -> T*/ populator) {
//	val arr = new Array {
//		contents = plaid.collections.JavaArrayWrapper.create(arrSize);
//		contentsSize = arrSize;
//	};
//
//	var i = 0;
//	while { i < arrSize } {
//		arr.contents.set(i, populator(i));
//		i = i + 1;
//	};
//
//	arr
//}

method /*<T>*/ unique LinkedList/*<T>*/ makeLinkedList() {
	new LinkedList;
}

/**
 * Creates a new ListValueNode with the specified value and pointer to the remainder
 * of the list.
 * NOTE: this should actually only be visible to LinkedList, it is not intended to be used
 * by any other code.
 */
method unique ListValueNode cons(value, tail) {
	new ListValueNode { var value = value; var tail = tail; }
}

method unique ListValueNode valueNode(value) {
    new ListValueNode { var value = value; var tail = END_OF_LIST; };
}

/**
 * Marker node for the end of a list.
 * NOTE: this should actually only be visible to LinkedList, it is not intended to be used
 * by any other code.
 */
val END_OF_LIST = new EndOfListNode;

//method unique LinkedList convertListToLinkedList(unique List list) {
//	val newList = makeLinkedList();
//	var current = list.head;
//	val isEnd = fn(node) => { match(node) { case Nil { true } default { false }}};
//
//	while { !isEnd(current) } {
//		newList.add(current.value);
//		current = current.next;
//	};
//
//	newList
//}
