package coreExamples.AVLTree;

import coreExamples.AVLTree.AVLTree;
import coreExamples.AVLTree.AVLTreeNodeEmpty;
import coreExamples.AVLTree.Comparable;

import java.lang.*;

state Number = Comparable with {
    val /* immutable Integer */ value;
    
    method /* immutable ComparableResult */ compareTo/* <readonly owner> */(/* shared<owner> Comparable */ other) /* [shared<owner> Number] */ {        
        var result = new EQ;
        if ( this.value < other.value ) {
            result = new LT;
        };
        if ( this.value > other.value ) {
             result = new GT;
        };
        result;        
    }
    
    method /* immutable String */ toString/* < readonly owner> */() /* [shared<owner> Number] */{
        value.toString();
    }
}

method /* void */ printComparableResult/* <readonly owver> */(/* shared<owner> CompareResult*/ result )  {
    match (result) {
        case LT {
            System.out.println("LT");
        }
        case EQ {
            System.out.println("EQ");
        }
        case GT {
            System.out.println("GT");
        }
    }
}


state TestAVLTree/* <owner>*/ {
   /* group numbers; */
   /* group trees; */      
    
    method testNumber/* <writeable world> */() {
       // unpackInnerGroups {
           val /* shared<numbers> Number */ one   = new Number with { val value = 1; };
           val /* shared<numbers> Number */ two   = new Number with { val value = 2; };
           val /* shared<numbers> Number */ three = new Number with { val value = 3; };
    
           printComparableResult/* <numbers> */( two.compareTo/* <numbers> */(one) );
           printComparableResult/* <numbers> */( two.compareTo/* <numbers> */(two) );
           printComparableResult/* <numbers> */( two.compareTo/* <numbers> */(three) );
        // }
    }


    method testTree/* <writeable world> */() {
      // UnpackInnerGroups {
        val /*immutable Number */ one   = new Number with { val value = 1; };
        val /*immutable Number */ two   = new Number with { val value = 2; };
        val /*immutable Number */ three = new Number with { val value = 3; };
        val /*immutable Number */ four  = new Number with { val value = 4; };
        val /*immutable Number */ five  = new Number with { val value = 5; };
        val /*immutable Number */ six   = new Number with { val value = 6; };
        val /*immutable Number */ seven = new Number with { val value = 7; };
        
        val /*shared<trees> AVLTree */ tree = new AVLTreeEmpty/* <numbers> */;
    
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(one);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(three);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(four);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(two);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(five);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        tree.add/* <trees, numbers> */(seven);
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        
   
        tree.dumpTree/* <trees, numbers> */();
    
        System.out.println("Tree["+tree.toString/* <trees, numbers> */()+"]");
        match (tree.contains(two)) {
            case True  { System.out.println("Tree contains 2"); }
            case False { System.out.println("ERROR: Tree should contain 2"); }
        };
        match (tree.contains(six)) {
            case True  { System.out.println("ERROR: Tree should not contain 6"); }
            case False { System.out.println("Tree does not contain 6"); }
        };

        System.out.println("The minimum tree element is " + tree.findMin/* <trees, numbers> */().toString());
        System.out.println("The maximum tree element is " + tree.findMax/* <trees, numbers> */().toString());
        
        tree.dumpTree();
    
        tree.remove/* <trees, numbers> */(one);
        tree.remove/* <trees, numbers> */(four);
        tree.remove/* <trees, numbers> */(three);
        tree.remove/* <trees, numbers> */(seven);
        System.out.println("Tree["+tree.toString/* <trees, numbers>*/()+"]");
        tree.dumpTree/* <trees, numbers> */();
      // }
    }
}


method /* void */ main /* <exclusive world> */ () {
    val tester = new TestAVLTree/* <world> */;
    tester.testNumber/* <world> */();
    tester.testTree/* <world> */();
}
