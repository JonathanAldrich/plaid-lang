package coreExamples.AVLTree;

import coreExamples.AVLTree.AVLTree;
import coreExamples.AVLTree.AVLTreeNodeEmpty;
import coreExamples.AVLTree.Comparable;

import java.lang.*;

state Number = Comparable with {
    val  immutable Integer  value;
    
    method immutable ComparableResult compareTo<readonly owner>(shared<owner> Comparable other) [shared<owner> Number]  {        
        var result = new EQ;
        if ( this.value < other.value ) {
            result = new LT;
        };
        if ( this.value > other.value ) {
             result = new GT;
        };
        result;        
    }
    
    method  immutable String toString<readonly owner>()[shared<owner> Number] {
        value.toString();
    }
}

method void printComparableResult<readonly owner>(shared<owner> CompareResult result )  {
    match (result) {
        case LT {
            System.out.println("LT");
        }
        case EQ {
            System.out.println("EQ");
        }
        case GT {
            System.out.println("GT");
        }
    }
}


state TestAVLTree<owner> {
   group numbers = new group; 
   group trees   = new group;       
    
    method testNumber<readonly world>() [shared<owner> TestAVLTree] {
        unpackInnerGroups {
           val shared<numbers> Number one   = new Number with { val value = 1; };
           val shared<numbers> Number two   = new Number with { val value = 2; };
           val shared<numbers> Number three = new Number with { val value = 3; };
    
           printComparableResult<numbers>( two.compareTo<numbers>(one) );
           printComparableResult<numbers>( two.compareTo<numbers>(two) );
           printComparableResult<numbers>( two.compareTo<numbers>(three) );
        }
    }


    method testTree<mutable owner>() [shared<owner> TestAVLTree] {
      UnpackInnerGroups {
        val shared<numbers> Number one   = new Number with { val value = 1; };
        val shared<numbers> Number  two   = new Number with { val value = 2; };
        val shared<numbers> Number  three = new Number with { val value = 3; };
        val shared<numbers> Number  four  = new Number with { val value = 4; };
        val shared<numbers> Number  five  = new Number with { val value = 5; };
        val shared<numbers> Number  six   = new Number with { val value = 6; };
        val shared<numbers> Number  seven = new Number with { val value = 7; };
        
        val shared<trees> AVLTree tree = new AVLTreeEmpty<numbers>;
    
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.insert<trees,numbers>(one);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
        tree.insert<trees,numbers>(three);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
        tree.insert<trees,numbers>(four);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
        tree.insert<trees,numbers>(two);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
        tree.insert<trees,numbers>(five);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
        tree.insert<trees,numbers>(seven);
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        tree.dumpTree<trees,numbers>();
            
        System.out.println("Tree["+tree.toString<trees,numbers>()+"]");
        match (tree.contains<trees,numbers>(two)) {
            case True  { System.out.println("Tree contains 2"); }
            case False { System.out.println("ERROR: Tree should contain 2"); }
        };
        match (tree.contains<trees,numbers>(six)) {
            case True  { System.out.println("ERROR: Tree should not contain 6"); }
            case False { System.out.println("Tree does not contain 6"); }
        };

        System.out.println("The minimum tree element is " + tree.findMin<trees,numbers>().toString());
        System.out.println("The maximum tree element is " + tree.findMax<trees,numbers>().toString());
        
        tree.dumpTree<trees,numbers>();
    
        tree.remove<trees,numbers>(one);
        tree.dumpTree<trees, numbers>();
        tree.remove<trees,numbers>(four);
        tree.dumpTree<trees, numbers>();
        tree.remove<trees,numbers>(three);
        tree.dumpTree<trees, numbers>();
        tree.remove<trees,numbers>(seven);
        tree.dumpTree/* <tree, numbers> */();
        System.out.println("Tree["+tree.toString/* <trees, numbers>*/()+"]");
      }
    }
    
    method testTreeBig<readonly owner>() {
        System.out.println("== testTreeBig =================================");
         unpackInnerGroups {
            val shared<trees> AVLTree tree = new AVLTreeEmpty<numbers>;
        
            val immutable Integer N = 50;
            var immutable Integer i = 0;
        
            System.out.println("populate tree");
            while { i < N } /* ()[immutable Integer x, immutable Integer N] -> immutable Boolean */ {
                //System.out.println("insert " + i);
                val shared<numbers> Number  num = new Number { val value = i; };
                tree.insert<trees,nodes>(num);
                i = i + 1;
            } /* ()[write &i, shared<trees> AVLTree tree] -> void */;
            
            System.out.println("The tree has height : " + tree.height());
            
            tree.dumpTree<trees,numbers>();
        
            System.out.println("drain tree");
            i = 0;
            while { i < N } /* ()[immutable Integer x, immutable Integer N] -> immutable Boolean */  {
                //System.out.println("insert " + i);
                val shared<numbers> Number num = new Number { val value = i; };
                ifElse ( tree.contains<trees,numbers>(num) ) {
                    System.out.println("remove " + i);
                    tree.remove<trees,numbers>(num);
                    tree.dumpTree<trees,numbers>();
                }{
                    System.out.println("ERROR: Tree should contain " + i);
                };
                i = i + 1;
            } /* ()[write &i, shared<trees> AVLTree tree] -> void */ ;
            tree.dumpTree();
        
        }
    }
}


method void  main <exclusive world>  () {
    val  shared<world> TestAVLTree  tester = new TestAVLTree<world>;
    tester.testNumber<world>();
    tester.testTree<world>();
    tester.testTreeBig<world>();
}
