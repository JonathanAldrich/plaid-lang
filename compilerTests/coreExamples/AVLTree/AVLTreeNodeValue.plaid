package coreExamples.AVLTree;

state AVLTreeNodeValue /* <owner, data> */ case of AVLTreeNode/* <owner, data> */ {
    var /* shared<data> Comparable */ value;
    var /* shared<owner> AVLNode */ parent;
    var /* immutable Integer */ height     = 1;
    var /* shared<owner> AVLNode */ left   = new AVLTreeNodeNil;
    var /* shared<owner> AVLNode */ right  = new AVLTreeNodeNil;
    
    method /* immutable Boolean */ isNil/* <readable owner> */() /* [shared<owner> AVLTreeNode] */ {
        false
    }
    
    
    method /* shared<owner> AVLNodeValue */ insert /* <writeable owner, readable data> */ (/* shared<data> Comparable*/ item) /* [shared<owner, data> APLTreeNodeValue] */ {
        match (value.compareTo(item)) {
            case LT {
                match (right) {
                    case AVLTreeNodeNil {
                        right = new AVLTreeNodeValue {
                            var parent = this;
                            var value  = item;
                        }
                    }
                    default {
                        right.insert/* <owner, data> */(item);
                    } 
                }
            }
            case EQ { this }
            case GT {
                match (left) {
                    case AVLTreeNodeNil {
                        left = new AVLTreeNodeValue {
                            var parent = this;
                            var value  = item;
                        }
                    }
                    default {
                        left.insert/* <owner, data> */(item);
                    } 
                }
            }
        }
    }

    method /* immutable Option<shared<owner> AVLTreeNodeValue> */ find /* <writeable owner, readable data> */ (/* shared<data> Comparable */ item) /* [shared<owner, data> AVLTreeNodeValue] */ {
        match (value.compareTo(item) ) {
            case LT {
                match (right) {
                    case AVLTreeNodeNil { new None; }
                    default { right.find/* <owner, data> */(item); } 
                }                
            }
            case EQ { 
                new Some { val value = this; }
            }
            case GT {
                match (left) {
                    case AVLTreeNodeNil { new None; }
                    default { left.find/* <owner, data> */(item); } 
                }
            }
        }
    }

    method /* shared<owner> AVLTreeNodeValue */ findMin /* <writeable owner, readable data> */ () /* [shared<owner, data> AVLTreeNodeValue] */ {
        match (left) {
            case AVLTreeNodeNil { this }
            default { left.findMin/* <owner, data> */() }
        }
    }

    method /* shared<owner> AVLTreeNodeValue */ findMax /* <writeable owner, readable data> */ () /* [shared<owner, data> AVLTreeNodeValue] */ {
        match (right) {
            case AVLTreeNodeNil { this }
            default { right.findMax/* <owner, data> */() }
        }    
    }
       
    method /* void */ apply /* <readable owner, readable data> */ (/* (shared<data> Comparable) -> void */ lambda) /* [shared<owner, data> AVLTreeNodeValue] */ {
        match (left) {
            case AVLTreeNodeValue {
                left.apply(lambda);
            }
            default{}
        };
        lambda(value);
        match (right) {
            case AVLTreeNodeValue {
                right.apply(lambda);
            }
            default{}
        };    
    }
   
    method /* void */ dumpTree /* <readable owner, readable data> */ (/* immutable String */ indent) /* [shared<owner, data> AVLTreeNodeValue] */ {
        match (right) {
            case AVLTreeNodeValue {
                right.dumpTree(indent + "  ");
            }
            default{}
        };
        System.out.println(indent + value.toString());
        match (left) {
            case AVLTreeNodeValue {
                left.dumpTree(indent + "  ");
            }
            default{}
        };
    }

    method /* immutable String */ toString /* <readable owner, readable data> */ () /* [shared<owner, data> AVLTreeNodeValue] */ {
        var result = "";
        match (left) {
            case AVLTreeNodeValue {
                result = left.toString/* <owner, data> */() + ", ";
            }
            default{}
        };
        result = result + value.toString/* <data> */();
        match (right) {
            case AVLTreeNodeValue {
                result = result +  ", " + right.toString/* <owner, data> */();
            }
            default{}
        };
        result
    }
}