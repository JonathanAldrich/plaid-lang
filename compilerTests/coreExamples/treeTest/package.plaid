// treeTest.plaid
// Matthew Rodriguez
// May 27, 2010

package coreExamples.treeTest;

// Top-level tree node.
state Node {}

// Leaf node.
state Leaf case of Node {
	method insert(elem) {
		this <- Branch with {
			var data = elem;
			var left = new Leaf;
			var right = new Leaf;
		};
	}

	method contains(elem) {
		false;
	}

	method remove(elem) {
		false;
	}

	method isLeaf() {
		true;
	}

	method depth() {
		0;
	}

	method size() {
		0;
	}

	method printMethod(depth) {
		//printLine("Leaf at " + depth);
		//Never mind, just do nothing.
	}
}

// Branch node.
state Branch case of Node {
	var data;
	var left;
	var right;

	method insert(elem) {
		ifElse (elem > data) {
			right.insert(elem);
		}{
			ifElse (elem < data) {
				left.insert(elem);
			}{
				false;
			};
		};
	}

	method contains(elem) {
		ifElse (elem == data) {
			true;
		}{
			ifElse (elem > data) {
				right.contains(elem);
			}{
				left.contains(elem);
			};
		};
	}

	method remove(elem) {
		ifElse (elem == data) {
			removeSelf();
			true;
		}{
			ifElse (elem > data) {
				right.remove(elem);
			}{
				left.remove(elem);
			};
		};
	}

	method removeSelf() {
		ifElse(left.isLeaf()) {
			ifElse(right.isLeaf()) {
				this <- Leaf;
			}{
				data = right.data;
				left = right.left;
				right = right.right;
			};
		}{
			ifElse(right.isLeaf()) {
				data = left.data;
				right = left.right;
				left = left.left;
			}{
				ifElse(left.depth() > right.depth()) {
					data = left.removeRightmost();
				}{
					data = right.removeLeftmost();
				};
			};
		};
	}

	method isLeaf() {
		false;
	}

	method depth() {
		val depth_l = left.depth();
		val depth_r = right.depth();
		ifElse(depth_l > depth_r) {
			depth_l;
		}{
			depth_r;
		};
	}

	method size() {
		1 + left.size() + right.size();
	}

	method printMethod(depth) {
		left.print(depth+1);
		printLine("" + data + " at " + depth);
		right.print(depth+1);
	}

	method removeLeftmost() {
		ifElse(left.isLeaf()) {
			val data2 = data;
			removeSelf();
			data2;
		}{
			left.removeLeftmost();
		};
	}

	method removeRightmost() {
		ifElse(right.isLeaf()) {
			val data2 = data;
			removeSelf();
			data2;
		}{
			right.removeRightmost();
		};
	}
}

// The tree itself.
state Tree {
	val root = new Leaf;

	method insert(elem) {
		this.root.insert(elem);
	}

	method contains(elem) {
		this.root.contains(elem);
	}

	method remove(elem) {
		this.root.remove(elem);
	}

	method printMethod() {
		this.root.print(0);
	}
}

method main() {
	val tree = new Tree;

	tree.insert(40);
	tree.insert(20);
	tree.insert(60);
	tree.insert(10);
	tree.insert(30);
	tree.insert(50);
	tree.insert(70);

	if (tree.contains(30)) {
		printLine("Tree contains 30.");
	};

	tree.printMethod();
	printLine("");

	tree.remove(40);
	tree.printMethod();
}