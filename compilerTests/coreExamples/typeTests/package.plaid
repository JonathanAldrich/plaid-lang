package coreExamples.typeTests;

state A {}

state B {}

state C {}

/*state StructType {
	method immutable A foo(full B obj) {
		new A;
	}
}

method topLevelDynMethod(obj1, obj2, obj3) {

}

method immutable A topLevelRetType(obj1, obj2, obj3) {
	new A;
}

method immutable A topLevelRetTypeArgType(immutable B obj1, full C obj2, obj3) {
	new A;
}

val topLevelDynField = "no annotation";

val immutable String topLevelTypeField = "with annotation";

val full { method immutable A foo(full B); } topLevelStructTypeField = new StructType;

state Changed {
	method changeBack()[full Changed >> full ChangeMe] {
		this <- ChangeMe;
	}
}

state ChangeMe {
	method change()[full ChangeMe >> full Changed] {
		this <- Changed;
	}
}

method dyn test1(unique A x) { new A; }

method immutable A test2(unique A >> unique A x) { new A; }

method none A test3(immutable A >> unique A x)[ full A this, unique B y] { new A; }

method none A test4(none A >> dyn x, y)[unique B >> immutable A z, dyn a] { new A; }

method none A test5() { new A;}

method () -> unique A test6() { fn () => new A }

method ()[full A x] -> pure A test7() { fn ()[full A x] => x }

method (dyn >> unique A)[full A >> full A y] -> unique A test8() { 
	fn (dyn >> unique A x)[full A >> full A y] => x
}

method test9() { 
	val a = new StructType;
	val b = new B;
	val immutable Integer c = 1 + 2;
	a.foo(b);
	c.quack(r,s,t,l,n,v).foo.bar(test,test,test)
}*/