package V8Benchmarks.richards.richardsPrime;

var NEWNONE = new None;


var COUNT = 1000;

/**
 * These two constants specify how many times a packet is queued and
 * how many times a task is put on hold in a correct run of richards.
 * They don't have any meaning a such but are characteristic of a
 * correct run so if the actual queue or hold count is different from
 * the expected there must be a bug in the implementation.
 **/
var EXPECTED_QUEUE_COUNT = 2322;
var EXPECTED_HOLD_COUNT = 928;


var ID_IDLE       = 0;
var ID_WORKER     = 1;
var ID_HANDLER_A  = 2;
var ID_HANDLER_B  = 3;
var ID_DEVICE_A   = 4;
var ID_DEVICE_B   = 5;
var NUMBER_OF_IDS = 6;

var KIND_DEVICE   = 0;
var KIND_WORK     = 1;

method makeRichards(){
  var Richards = new BenchmarkSuite;
  var arr = new Array;
  var bm = new Benchmark;
  bm.setData("Richards",runRichards);
  arr.push(bm);
  Richards.setData("Richards", 35302, arr);
}


/**
 * The Richards benchmark simulates the task dispatcher of an
 * operating system.
 **/
method runRichardsCompiled() {
  
  var scheduler = new Scheduler;
  scheduler.addIdleTask(ID_IDLE, 0, NEWNONE, COUNT);

  var queue = new Packet;
  queue.setData(NEWNONE, ID_WORKER, KIND_WORK);
  var queue2 = new Packet;
  queue2.setData(queue,  ID_WORKER, KIND_WORK);
  scheduler.addWorkerTask(ID_WORKER, 1000, queue2);

  var queue3 = new Packet;
  queue3.setData(NEWNONE, ID_DEVICE_A, KIND_DEVICE);
  var queue4 = new Packet;
  queue4.setData(queue3,  ID_DEVICE_A, KIND_DEVICE);
  var queue5 = new Packet;
  queue5.setData(queue4,  ID_DEVICE_A, KIND_DEVICE);
  scheduler.addHandlerTask(ID_HANDLER_A, 2000, queue5);

  var queue6 = new Packet;
  queue6.setData(NEWNONE, ID_DEVICE_B, KIND_DEVICE);
  var queue7 = new Packet;
  queue7.setData(queue6,  ID_DEVICE_B, KIND_DEVICE);
  var queue8 = new Packet;
  queue8.setData(queue7,  ID_DEVICE_B, KIND_DEVICE);
  scheduler.addHandlerTask(ID_HANDLER_B, 3000, queue8);

  scheduler.addDeviceTask(ID_DEVICE_A, 4000, NEWNONE);

  scheduler.addDeviceTask(ID_DEVICE_B, 5000, NEWNONE);

  scheduler.schedule();

  if (scheduler.queueCount != EXPECTED_QUEUE_COUNT ||
      scheduler.holdCount != EXPECTED_HOLD_COUNT) {
    var msg =
        "Error during execution: queueCount = " + scheduler.queueCount +
        ", holdCount = " + scheduler.holdCount + ".";
    printLine(msg);
  }
}

/**
 * A scheduler can be used to schedule a set of tasks based on their relative
 * priorities.  Scheduling is done by maintaining a list of task control blocks
 * which holds tasks and the data queue they are processing.
 * @constructor
 */
state Scheduler {
  var queueCount = 0;
  var holdCount = 0;
  var blocks = (new Array).getArrayWithSize(NUMBER_OF_IDS);
  var list = NEWNONE;
  var currentTcb = NEWNONE;
  var currentId = NEWNONE;

/**
 * Add an idle task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {int} count the number of times to schedule the task
 */
method addIdleTask(id, priority, queue, count) {
  var it = new IdleTask;
  it.setData(this,1,count);
  this.addRunningTask(id, priority, queue, it);
}

/**
 * Add a work task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addWorkerTask(id, priority, queue) {
  var wt = new WorkerTask;
  wt.setData(this, ID_HANDLER_A, 0);
  this.addTask(id, priority, queue, wt);
}

/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addHandlerTask(id, priority, queue) {
  var ht = new HandlerTask;
  ht.setData(this);
  this.addTask(id, priority, queue, ht);
}

/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addDeviceTask(id, priority, queue) {
  var dt = new DeviceTask;
  dt.setData(this);
  this.addTask(id, priority, queue, dt)
}

/**
 * Add the specified task and mark it as running.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */
method addRunningTask(id, priority, queue, task) {
  this.addTask(id, priority, queue, task);
  this.currentTcb.setRunning();
}

/**
 * Add the specified task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */
method addTask(id, priority, queue, task) {
  this.currentTcb = new TaskControlBlock;
  this.currentTcb.setData(this.list, id, priority, queue, task);
  this.list = this.currentTcb;
  this.blocks.set(id, this.currentTcb);
}

/**
 * Execute the tasks managed by this scheduler.
 */
method schedule() {
  this.currentTcb = this.list;
  while ({this.currentTcb != NEWNONE}) {
    ifElse (this.currentTcb.isHeldOrSuspended()) {
      this.currentTcb = this.currentTcb.link;
    }
    {
      this.currentId = this.currentTcb.id;
      this.currentTcb = this.currentTcb.run();
    };
    printLine(this.currentTcb);
  }
}

/**
 * Release a task that is currently blocked and return the next block to run.
 * @param {int} id the id of the task to suspend
 */
method release(id) {
  var tcb = this.blocks.get(id);
  ifElse (tcb == NEWNONE) {
    tcb;
  }
  {
    tcb.markAsNotHeld();
    ifElse (tcb.priority > this.currentTcb.priority) {
      tcb;
    }
    {
      this.currentTcb;
    }
  }
}

/**
 * Block the currently executing task and return the next task control block
 * to run.  The blocked task will not be made runnable until it is explicitly
 * released, even if new work is added to it.
 */
method holdCurrent() {
  this.holdCount=this.holdCount+1;
  this.currentTcb.markAsHeld();
  this.currentTcb.link;
}

/**
 * Suspend the currently executing task and return the next task control block
 * to run.  If new work is added to the suspended task it will be made runnable.
 */
method suspendCurrent() {
  this.currentTcb.markAsSuspended();
  this.currentTcb;
}

/**
 * Add the specified packet to the end of the worklist used by the task
 * associated with the packet and make the task runnable if it is currently
 * suspended.
 * @param {Packet} packet the packet to add
 */
method queue(packet) {
  var t = this.blocks.get(packet.id);
  ifElse (t == NEWNONE) {
    t;
  }
  {
    this.queueCount=this.queueCount+1;
    packet.link = NEWNONE;
    packet.id = this.currentId;
    t.checkPriorityAdd(this.currentTcb, packet);
  }
}

}
//End Scheduler





/**
 * A task control block manages a task and the queue of work packages associated
 * with it.
 * @param {TaskControlBlock} link the preceding block in the linked block list
 * @param {int} id the id of this block
 * @param {int} priority the priority of this block
 * @param {Packet} queue the queue of packages to be processed by the task
 * @param {Task} task the task
 * @constructor
 */
state TaskControlBlock {
  var link;
  var id;
  var priority;
  var queue;
  var task;
  
  state HELD {
  }
  state NOT_HELD {
  	state SUSPENDED_RUNNABLE{
  		state SUSPENDED{
  		}
  		state RUNNABLE{
  		}
  	}
  	state RUNNING{
  	}
  }

method setData(link, id, priority, queue, task){
  this.link = link;
  this.id = id;
  this.priority = priority;
  this.queue = queue;
  this.task = task;
  ifElse (queue == NEWNONE) {
    this <- SUSPENDED;
  }
  {
    this <- SUSPENDED_RUNNABLE;
  };
}

method setRunning() {
  this <- RUNNING;
}

method markAsNotHeld() {
  this <- NOT_HELD;
}

method markAsHeld() {
  this <- HELD;
}

method isHeldOrSuspended() {
   match(this){
   	case HELD {
   		new True;
   	}
   	case SUSPENDED {
   		new True;
   	}
   	default{
   		new False;
   	}
   };
}

method markAsSuspended() {
  this <- SUSPENDED;
}

method markAsRunnable() {
  this <- RUNNABLE;
}

/**
 * Runs this task, if it is ready to be run, and returns the next task to run.
 */
method run() {
  //error might be here???  returning wrong link?
  var packet = "";
  match(this){
  	case SUSPENDED_RUNNABLE {
  	    packet = this.queue;
	    this.queue = packet.link;
	    ifElse (this.queue == NEWNONE) {
	      this <- RUNNING;
	    }
	    {
	      this <- RUNNABLE;
	    };
  	}
  	default{
  		packet = NEWNONE;
  	}
  };
  this.task.run(packet);
}

/**
 * Adds a packet to the worklist of this block's task, marks this as runnable if
 * necessary, and returns the next runnable object to run (the one
 * with the highest priority).
 */
method checkPriorityAdd(task, packet) {
  var toReturn=task;
  ifElse (this.queue == NEWNONE) {
    this.queue = packet;
    this.markAsRunnable();
    if (this.priority > task.priority){
      toReturn=this;
    }
  }
  {
    this.queue = packet.addTo(this.queue);
  };
  toReturn;
}

method toString() {
  match(this){
  	case HELD{
       "tcb { " + this.id +": " + this.task + "@HELD }";
  	}
  	case SUSPENDED{
       "tcb { " + this.id +": " + this.task + "@SUSPENDED }";
  	}
  	case RUNNABLE{
       "tcb { " + this.id +": " + this.task + "@RUNNABLE }";
  	}
  	case RUNNING{
       "tcb { " + this.id +": " + this.task + "@RUNNING }";
  	}
  	case SUSPENDED_RUNNABLE{
       "tcb { " + this.id +": " + this.task + "@SUSPENDED_RUNNABLE }";
  	}
  	case NOT_HELD{
       "tcb { " + this.id +": " + this.task + "@NOT_HELD }";
  	}
  	default{
  		"I lack a tag!";
  	}
  	
  };
}

}
//ends TaskControlBlock

/**
 * An idle task doesn't do any work itself but cycles control between the two
 * device tasks.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed value that controls how the device tasks are scheduled
 * @param {int} count the number of times this task should be scheduled
 * @constructor
 */
state IdleTask {
  var scheduler;
  var v1;
  var count;

method setData(scheduler, v1, count) {
  this.scheduler = scheduler;
  this.v1 = v1;
  this.count = count;
}

method run(packet) {
  this.count=this.count - 1;
  var toReturn = "";
  ifElse (this.count == 0) {
    toReturn = this.scheduler.holdCurrent();
  }
  {
    ifElse ((this.v1 & 1) == 0) {
      this.v1 = this.v1 >> 1;
      toReturn = this.scheduler.release(ID_DEVICE_A);
    }
    {
      this.v1 = (this.v1 >> 1) ^ 0xD008;
      toReturn = this.scheduler.release(ID_DEVICE_B);
    };
  };
  toReturn;
}

method toString() {
  "IdleTask";
}
}
//end IdleTask

/**
 * A task that suspends itself after each time it has been run to simulate
 * waiting for data from an external device.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */
state DeviceTask {
  var v1 = NEWNONE;
  var scheduler;

method setData(scheduler) {
  this.scheduler = scheduler;
}

method run (packet) {
  var toReturn="";
  ifElse (packet == NEWNONE) {
    ifElse (this.v1 == NEWNONE) {
      toReturn = this.scheduler.suspendCurrent();
    }
    {
    var v = this.v1;
    this.v1 = NEWNONE;
    toReturn = this.scheduler.queue(v);
    };
  }
  {
    this.v1 = packet;
    toReturn = this.scheduler.holdCurrent();
  };
}

method toString() {
  "DeviceTask";
}
}
//end DeviceTask

/**
 * A task that manipulates work packets.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed used to specify how work packets are manipulated
 * @param {int} v2 another seed used to specify how work packets are manipulated
 * @constructor
 */
state WorkerTask {
  var scheduler;
  var v1;
  var v2;

method setData(scheduler, v1, v2) {
  this.scheduler = scheduler;
  this.v1 = v1;
  this.v2 = v2;
}

method run(packet) {
  var toReturn="";
  ifElse (packet == NEWNONE) {
    toReturn = this.scheduler.suspendCurrent();
  }
  {
    ifElse (this.v1 == ID_HANDLER_A) {
      this.v1 = ID_HANDLER_B;
    }
    {
      this.v1 = ID_HANDLER_A;
    };
    packet.id = this.v1;
    packet.a1 = 0;
    var i=0;
    while ({i < DATA_SIZE;}) {
      this.v2=this.v2+1;
      if (this.v2 > 26) {
        this.v2 = 1;
      };
      packet.a2.set(i, this.v2);
      i=i+1;
    };
    toReturn = this.scheduler.queue(packet);
  };
  toReturn;
}

method toString() {
  "WorkerTask";
}
}
//end WorkerTask

/**
 * A task that manipulates work packets and then suspends itself.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */
state HandlerTask{
  var scheduler;
  var v1;
  var v2;

method setData(scheduler) {
  this.scheduler = scheduler;
  this.v1 = NEWNONE;
  this.v2 = NEWNONE;
}

method run(packet) {
  //this might be where problem is.  returning wrong item?
  if (packet != NEWNONE) {
    ifElse (packet.kind == KIND_WORK) {
      this.v1 = packet.addTo(this.v1);
    }
    {
      this.v2 = packet.addTo(this.v2);
    };
  };
  var toReturn="";
  if (this.v1 != NEWNONE) {
    var count = this.v1.a1;
    var v="";
    ifElse (count < DATA_SIZE) {
      if (this.v2 != NEWNONE) {
        v = this.v2;
        this.v2 = this.v2.link;
        v.a1 = this.v1.a2.get(count);
        this.v1.a1 = count + 1;
        toReturn = this.scheduler.queue(v);
      }
    }
    {
      v = this.v1;
      this.v1 = this.v1.link;
      toReturn = this.scheduler.queue(v);
    };
  };
  if (toReturn==""){
    toReturn = this.scheduler.suspendCurrent();
  };
  toReturn;
}

method toString() {
  "HandlerTask";
}
}
//end HandlerTask

/* --- *
 * P a c k e t
 * --- */

var DATA_SIZE = 4;

/**
 * A simple package of data that is manipulated by the tasks.  The exact layout
 * of the payload data carried by a packet is not importaint, and neither is the
 * nature of the work performed on packets by the tasks.
 *
 * Besides carrying data, packets form linked lists and are hence used both as
 * data and worklists.
 * @param {Packet} link the tail of the linked list of packets
 * @param {int} id an ID for this packet
 * @param {int} kind the type of this packet
 * @constructor
 */
state Packet {
  var link;
  var id;
  var kind;
  var a1;
  var a2;

method setData(link, id, kind) {
  this.link = link;
  this.id = id;
  this.kind = kind;
  this.a1 = 0;
  var temp = new Array;
  this.a2 = temp.getArrayWithSize(DATA_SIZE);
}

/**
 * Add this packet to the end of a worklist, and return the worklist.
 * @param {Packet} queue the worklist to add this packet to
 */
method addTo(queue) {
  this.link = NEWNONE;
  ifElse (queue == NEWNONE) {
    this;
  }
  {
  var peek = queue;
  var next = queue;
  while ({peek != NEWNONE}) {
    next = peek;
    peek=next.link;
  };
  next.link = this;
  queue;
  };
}

method toString() {
  "Packet";
}
}
//end Packet


method main() {
	printLine("Plaid");
	var time=0;
	var i=0;
	while({i<1}){
		var start=new Date;
		runRichardsCompiled();
		var timeOne = new Date-start;
		printLine(timeOne);
		time=time+timeOne;
		i=i+1;
	};
	printLine("--------");
	printLine(time);
}

