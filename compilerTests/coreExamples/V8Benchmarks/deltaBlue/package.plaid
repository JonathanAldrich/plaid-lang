package V8Benchmarks.deltaBlue;


/**
 * A JavaScript implementation of the DeltaBlue constraint-solving
 * algorithm, as described in:
 *
 * "The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver"
 *   Bjorn N. Freeman-Benson and John Maloney
 *   January 1990 Communications of the ACM,
 *   also available as University of Washington TR 89-08-06.
 *
 * Beware: this benchmark is written in a grotesque style where
 * the constraint model is built by side-effects from constructors.
 * I've kept it this way to avoid deviating too much from the original
 * implementation.
 */


var NEWNONE = new None;

/* --- O b j e c t   M o d e l --- */

/*
//==================================still in javascript
Object.prototype.inheritsFrom = function (shuper) {
  function Inheriter() { }
  Inheriter.prototype = shuper.prototype;
  this.prototype = new Inheriter();
  this.superConstructor = shuper;
}
//==================================still in javascript
*/

state OrderedCollection {
    var elms;

	method startStack(){
		this.elms =  makeStack();
	}

	method add(elm) {
		//printLine("this.elms.add in OrderedCollectionState: "+this.elms.add);
		//printLine("this.elms: "+this.elms);
		this.elms.add(elm);
	}
	
	method at(index) {
		this.elms.get(index);
	}
	
	method size(){
		this.elms.size();
	}
	
	method removeFirst() {
	    //printLine("this.elms.pop "+this.elms.pop);
		this.elms.pop()
	}
	
	method removeItem(elm) {
		this.elms = this.elms.filterAll(fn(elem) => { elem != elm }); //debug, does this need to be stored?
	}
	
	method map(f) {
		this.elms.map(f);
	}

}

/* --- *
 * S t r e n g t h
 * --- */

/**
 * Strengths are used to measure the relative importance of constraints.
 * New strengths may be inserted in the strength hierarchy without
 * disrupting current constraints.  Strengths cannot be created outside
 * this class, so pointer comparison can be used for value comparison.
 */

//make a new Strength object with Strength{strenghtValue=<val>;name=<name>}
state Strength {
	var strengthValue;
	var name;
	
	method setStrengthFields(sv,n){
		this.strengthValue=sv;
		this.name=n;
	}
	
	method stronger(s1, s2){
		s1.strengthValue < s2.strengthValue;
	}
	
	method weaker(s1, s2) {
  		s1.strengthValue > s2.strengthValue;
	}
	
	method weakestOf(s1, s2){
		ifElse (this.weaker(s1,s2)){
			s1;
		}
		{
			s2;
		}
	}
	
	method strongest(s1, s2){
		ifElse (this.stronger(s1,s2)){
			s1;
		}
		{
			s2;
		}
	}
	
	method nextWeaker(){
		var returnVal=WEAKEST;
		if (this.strengthValue==0){
			//printLine("this.strengthValue=0");
			returnVal = WEAKEST;
		};
		if (this.strengthValue==1){
			//printLine("this.strengthValue=1");
			returnVal = WEAK_DEFAULT;
		};
		if (this.strengthValue==2){
			//printLine("this.strengthValue=2");
			returnVal = NORMAL;
		};
		if (this.strengthValue==3){
			//printLine("this.strengthValue=3");
			returnVal = STRONG_DEFAULT;
		};
		if (this.strengthValue==4){
			//printLine("this.strengthValue=4");
			returnVal = PREFERRED;
		};
		if (this.strengthValue==5){
			//printLine("this.strengthValue=5");
			returnVal = REQUIRED;
		};
		returnVal;
	}

}

//Strength constants
var REQUIRED        = new Strength;
var STRONG_PREFERRED = new Strength;
var PREFERRED       = new Strength;
var STRONG_DEFAULT  = new Strength;
var NORMAL          = new Strength;
var WEAK_DEFAULT    = new Strength;
var WEAKEST         = new Strength;



/* --- *
 * C o n s t r a i n t
 * --- */

/**
 * An abstract class representing a system-maintainable relationship
 * (or "constraint") between a set of variables. A constraint supplies
 * a strength instance variable; concrete subclasses provide a means
 * of storing the constrained variables and other information required
 * to represent a constraint.
 */


state Constraint {
	var strength;
	
	method setConstraintFields(s){
		//printLine("setting constraint fields "+s.name);
		this.strength=s;
		//printLine("out of setting constraint fields");
	}
	
	
	/**
	 * Activate this constraint and attempt to satisfy it.
	 */
	method addConstraint(){
		//printLine("addconstraint constraint");
		//printLine("before addtograph");
		//printLine(this.tree);
		//printLine(this.addToGraph);
		this.addToGraph();
		//printLine("after addtograph, before incrementaladd");
		planner.incrementalAdd(this);
		//printLine("after incrementaladd");
	}
	
	 /**
	 * Attempt to find a way to enforce this constraint. If successful,
	 * record the solution, perhaps modifying the current dataflow
	 * graph. Answer the constraint that this constraint overrides, if
	 * there is one, or nil, if there isn't.
	 * Assume: I am not already satisfied.
	 */
	 method satisfy(mark){
	 	//printLine("in satisfy");
	 	this.chooseMethod(mark);
	 	//printLine("after chooseMethod");
	 	var returnVal=NEWNONE;
		ifElse (!this.isSatisfied()) {
			//printLine("not satisfied");
		    if (this.strength == REQUIRED){
		      printLine("Could not satisfy a required constraint!");
		    };
		    //printLine("about to return null because strength isn't 'required'");
		    //we want the return value to be NEWNONE, so don't change returnval
		}
		{
			//printLine("about to markInputs");
			this.markInputs(mark);
			//printLine("past markInputs");
			var out = this.output();
			//printLine("this.output()");
			var overridden = out.determinedBy;
			//printLine("past out.determinedBy");
		 	if (overridden != NEWNONE) {overridden.markUnsatisfied();};
			//printLine("past overridden!=NEWNONE");
			out.determinedBy = this;
			//printLine("past out.determinedBy 2");
			if (!planner.addPropogate(this, mark)){
			  printLine("Cycle encountered");
			};
			//printLine("past !planner.addpropogate");
			out.mark = mark;
			//printLine("SATISFY MARK "+mark);
			returnVal = overridden;
		};
		returnVal;
	 }
	 
	 method destroyConstraint() {
		  ifElse (this.isSatisfied()){
		  	planner.incrementalRemove(this);}
		  {this.removeFromGraph();};
	 }
	 
	 /**
	 * Normal constraints are not input constraints.  An input constraint
	 * is one that depends on external state, such as the mouse, the
	 * keybord, a clock, or some arbitraty piece of imperative code.
	 */
	 method isInput() {
	 	new False;
	 }
	
}


/* --- *
 * U n a r y   C o n s t r a i n t
 * --- */

/**
 * Abstract superclass for constraints having a single possible output
 * variable.
 */
 
state UnaryConstraint case of Constraint {
	var myOutput;
	var satisfied;
	
	method setUnaryConstraintFields(v, strength){
		//printLine("setting unary constraint fields "+v.value+" "+strength.name);
		this.setConstraintFields(strength); //this is a likely problems spot; debug
		this.myOutput = v;
		//printLine("DEBUG, this.myOutput "+this.myOutput+" this.myOutput.value "+this.myOutput.value);
		this.satisfied=new False;
		this.addConstraint();
		//printLine("out of setUnaryConstraintFields");
	}
	
	 /**
	 * Adds this constraint to the constraint graph
	 */
	method addToGraph(){
		//printLine("DEBUG2, this.myOutput "+this.myOutput+" this.myOutput.value "+this.myOutput.value+" this.myOutput.tree "+this.myOutput.tree);
		//printLine("in add to graph, this "+this);
		this.myOutput.addConstraint(this);
		this.satisfied = new False;
	}
	
	 /**
	 * Decides if this constraint can be satisfied and records that
	 * decision.
	 */
	method chooseMethod(mark) {
		this.satisfied = (this.myOutput.mark != mark) && this.strength.stronger(this.strength, this.myOutput.walkStrength);
	}
	
	 /**
	 * Returns true if this constraint is satisfied in the current solution.
	 */
	method isSatisfied() {
		this.satisfied;
	}
	
	method markInputs(mark){
		NEWNONE; //has no inputs
	}
	
	/**
	 * Returns the current output variable.
	 */
	method output() {
		this.myOutput;
	}
		
	/**
	 * Calculate the walkabout strength, the stay flag, and, if it is
	 * 'stay', the value for the current output of this constraint. Assume
	 * this constraint is satisfied.
	 */
	method recalculate(){
		this.myOutput.walkStrength = this.strength;
		this.myOutput.stay = !this.isInput();
		if (this.myOutput.stay){
			this.execute(); //stay optimization
		};
	}
		
	/**
	 * Records that this constraint is unsatisfied
	 */
	method markUnsatisfied(){
		this.satisfied = new False;
	}
	
	method inputsKnown(){
		new True;
	}
	
	method removeFromGraph(){
		if (this.myOutput != NEWNONE){
			this.myOutput.removeConstraint(this);
		};
		this.satisfied=new False;
	}
}

//UnaryConstraint.inheritsFrom(Constraint); debug is this taken care of by making it a case of state?

/* --- *
 * S t a y   C o n s t r a i n t
 * --- */

/**
 * Variables that should, with some level of preference, stay the same.
 * Planners may exploit the fact that instances, if satisfied, will not
 * change their output during plan execution.  This is called "stay
 * optimization".
 */ 
 
state StayConstraint case of UnaryConstraint {
	method setStayConstraintFields(v,str){
		//printLine("setting stay constraint fields "+v.value+" "+str.name);
		this.setUnaryConstraintFields(v,str);//another debug
	}

	method execute(){
		NEWNONE; //stay constraints do nothing
	}
}
 
 
/* --- *
 * E d i t   C o n s t r a i n t
 * --- */

/**
 * A unary input constraint used to mark a variable that the client
 * wishes to change.
 */
 
 state EditConstraint case of UnaryConstraint {
 
 /**
 * Edits indicate that a variable is to be changed by imperative code.
 */
 
	method setEditConstraintFields(v,str){
		//printLine("setting edit constraint fields "+v.value+" "+str.name);
		this.setUnaryConstraintFields(v,str);//another debug
		//printLine("out of setting edit constraint fields");
	}
 	
 	method isInput(){
 		new True;
 	}
 	
 	method execute(){
 		NEWNONE; //edit constraints do nothing
 	}
 }
 
 
/* --- *
 * B i n a r y   C o n s t r a i n t
 * --- */
 
 

var Direction_NONE = 0;
var Direction_FORWARD = 1;
var Direction_BACKWARD = -1;

/**
 * Abstract superclass for constraints having two possible output
 * variables.
 */ 
state BinaryConstraint case of Constraint {
	var v1;
	var v2;
	var direction;

	method setBinaryConstraintFields(var1, var2, strength) {
		//printLine("setting binary constraint fields "+var1.value+" "+var2.value+" "+strength.name);
  		this.setConstraintFields(strength); //debug
		this.v1 = var1;
		this.v2 = var2;
		this.direction = Direction_NONE;
		this.addConstraint();
	}
	
	 /**
	 * Decides if this constraint can be satisfied and which way it
	 * should flow based on the relative strength of the variables related,
	 * and record that decision.
	 */
	
	method chooseMethod(mark) {
	
		if (this.v1.mark==mark){
			ifElse ((this.v2.mark != mark) && (this.strength.stronger(this.strength, this.v2.walkStrength))) {
				this.direction = Direction_FORWARD;
			}
			{
				this.direction = Direction_NONE;
			};
		};
		
		if (this.v2.mark==mark){
			ifElse ((this.v1.mark != mark) && (this.strength.stronger(this.strength, this.v1.walkStrength))) {
				this.direction = Direction_BACKWARD;
			}
			{
				this.direction = Direction_NONE;
			};
		};
		
		ifElse (this.strength.weaker(this.v1.walkStrength,this.v2.walkStrength)){
			ifElse (this.strength.stronger(this.strength, this.v1.walkStrength)) {
				this.direction = Direction_BACKWARD;
			}
			{
				this.direction = Direction_NONE;
			};
		}
		{
			ifElse (this.strength.stronger(this.strength, this.v2.walkStrength)) {
				this.direction = Direction_FORWARD;
			}
			{
				this.direction = Direction_BACKWARD;
			};
		};
		
	}
		
	
	/**
	 * Add this constraint to the constraint graph
	 */
	method addToGraph() {
	    //printLine("in binary constraint add to graph");
		this.v1.addConstraint(this);
		this.v2.addConstraint(this);
		this.direction = Direction_NONE;
	    //printLine("out of binary constraint add to graph");
	}
	
	/**
	 * Answer true if this constraint is satisfied in the current solution.
	 */
	method isSatisfied() {
		this.direction != Direction_NONE;
	}
		
	/**
	 * Mark the input variable with the given mark.
	 */
	method markInputs(mark) {
		this.input().mark = mark;
	}
	
	/**
	 * Returns the current input variable
	 */
	method input(){
		ifElse (this.direction==Direction_FORWARD) {
			this.v1;
		}
		{
			this.v2;
		};
	}
	
	/**
	 * Returns the current output variable
	 */
	method output(){
		ifElse (this.direction==Direction_FORWARD) {
			this.v2;
		}
		{
			this.v1;
		};
	}
		
	/**
	 * Calculate the walkabout strength, the stay flag, and, if it is
	 * 'stay', the value for the current output of this
	 * constraint. Assume this constraint is satisfied.
	 */
	method recalculate(){
		var ihn = this.input();
		var out = this.output();
		out.walkStrength = this.strength.weakestOf(this.strength, ihn.walkStrength);
		out.stay = ihn.stay;
		if (out.stay) {
			this.execute();
		};
	}
		
	/**
	 * Record the fact that this constraint is unsatisfied.
	 */
	method markUnsatisfied(){
		this.direction = Direction_NONE;
	}
	
	method inputsKnown(mark){
		var i= this.input();
		(i.mark == mark || i.stay || i.determinedBy==NEWNONE);
	}
	
	method removeFromGraph(){
		if (this.v1 != NEWNONE) {
			this.v1.removeConstraint(this);
		};
		if (this.v2 != NEWNONE) {
			this.v2.removeConstraint(this);
		};
		this.direction = Direction_NONE;
	}
}


/* --- *
 * S c a l e   C o n s t r a i n t
 * --- */
 

/**
 * Relates two variables by the linear scaling relationship: "v2 =
 * (v1 * scale) + offset". Either v1 or v2 may be changed to maintain
 * this relationship but the scale factor and offset are considered
 * read-only.
 */ 
 
 state ScaleConstraint case of BinaryConstraint {
 	var direction;
 	var scale;
 	var offset;
 	
 	method setScaleConstraintFields(src, scale, offset, dest, strength) {
		//printLine("setting scale constraint fields "+strength.name);
 		this.direction = Direction_NONE;
 		//printLine("this.scale "+scale);
 		this.scale = scale;
 		this.offset = offset;
 		this.setBinaryConstraintFields(src, dest, strength); //debug problem
 	}
	 	
	/**
	 * Adds this constraint to the constraint graph.
	 */
 	method addToGraph() {
 	    //printLine("in binary constraint add to graph");
 	    //printLine("in scaleconstraint add to graph");
 	    //printLine("in binaryconstraint add to graph");
		this.v1.addConstraint(this);
		//printLine("added v1 constraint");
		this.v2.addConstraint(this);
		//printLine("added v2 constraint");
		this.direction = Direction_NONE;
		//printLine("set direction to NONE");
		//printLine("out of binary constraint add to graph");
		//printLine(this.scale.tree);
 		this.scale.addConstraint(this);
		//printLine("added this constraint to scale");
		//printLine(this.offset.tree);
 		this.offset.addConstraint(this);
		//printLine("added this constraint to offset");
 		//printLine("out of scaleconstraint add to graph");
 	}
 	
 	method removeFromGraph() {
 		this.removeFromGraph.call(this);
 		//debug
  		if (this.scale != NEWNONE) {this.scale.removeConstraint(this);};
  		if (this.offset != NEWNONE) {this.offset.removeConstraint(this);};
 		
 	}
 	
 	method markInputs(mark){
		this.input().mark = mark;
 		//this.markInputs(mark); //debug
  		this.scale.mark = mark;
  		this.offset.mark = mark;
 	}
 	
	/**
	 * Enforce this constraint. Assume that it is satisfied.
	 */
	 method execute(){
	 	ifElse(this.direction==Direction_FORWARD){
	 		this.v2.value = this.v1.value*this.scale.value+this.offset.value;
	 	}
	 	{
	 		this.v1.value = (this.v2.value - this.offset.value) / this.scale.value;
	 	};
	 }
	 
	/**
	 * Calculate the walkabout strength, the stay flag, and, if it is
	 * 'stay', the value for the current output of this constraint. Assume
	 * this constraint is satisfied.
	 */
	 method recalculate(){
	 	var ihn = this.input();
	 	var out = this.output();
	 	out.walkStrength = this.strength.weakestOf(this.strength, ihn.walkStrength);
  		out.stay = ihn.stay && this.scale.stay && this.offset.stay;
  		if (out.stay){ this.execute();};
	 }
 }
 
 
 /* --- *
 * E q u a l i t  y   C o n s t r a i n t
 * --- */

/**
 * Constrains two variables to have the same value.
 */
 
 state EqualityConstraint case of BinaryConstraint {
 	method setEqualityConstraintFields(var1, var2, strength){
		//printLine("setting equality constraint fields "+var1.value+" "+var2.value+" "+strength.name);
 		this.setBinaryConstraintFields(var1, var2, strength); //debug
 	}
 	
	/**
 	* Enforce this constraint. Assume that it is satisfied.
 	*/
 	method execute(){
 		this.output().value=this.input().value;
 	}
 }
 	
 /* --- *
 * V a r i a b l e
 * --- */
 	
 	
/**
 * A constrained variable. In addition to its value, it maintain the
 * structure of the constraint graph, the current dataflow graph, and
 * various parameters of interest to the DeltaBlue incremental
 * constraint solver.
 **/
 
 state Variable{
 	var value;
 	var constraints;
 	var determinedBy;
 	var mark;
 	var walkStrength;
 	var stay;
 	var name;
 	
 	method setVariableFields(name, initialValue){
 		//printLine("I think weakest is..."+WEAKEST);
 		this.constraints = new OrderedCollection;
 		this.constraints.startStack();
 		this.determinedBy=NEWNONE;
 		this.mark=0;
 		this.walkStrength=WEAKEST;
 		this.stay = new True;
 		this.name=name;
 		ifElse (initialValue==NEWNONE){
 			this.value = 0;
 		}
 		{
 			this.value=initialValue;
 		};
 		//printLine("variable..."+this.value+" "+this.walkStrength.name);
 	}
 	
 	/**
	 * Add the given constraint to the set of all constraints that refer
	 * this variable.
	 */
 	method addConstraint(c) {
 		//printLine("addconstraint variable");
 		this.constraints.add(c);
 	}
 	
	/**
	 * Removes all traces of c from this variable.
	 */
 	method removeConstraint(c) {
 		//printLine(this.constraints.tree);
 		this.constraints.removeItem(c);
 		if (this.determinedBy==c) {
 			this.determinedBy=NEWNONE;
 		};
 	}
 }
 

/* --- *
 * P l a n n e r
 * --- */

/**
 * The DeltaBlue planner
 */
 state Planner {
 	var currentMark;
 	
 	method setData(){
 		this.currentMark=0;
 	}
 	
 	/**
	 * Attempt to satisfy the given constraint and, if successful,
	 * incrementally update the dataflow graph.  Details: If satifying
	 * the constraint is successful, it may override a weaker constraint
	 * on its output. The algorithm attempts to resatisfy that
	 * constraint using some other method. This process is repeated
	 * until either a) it reaches a variable that was not previously
	 * determined by any constraint or b) it reaches a constraint that
	 * is too weak to be satisfied using any of its methods. The
	 * variables of constraints that have been processed are marked with
	 * a unique mark value so that we know where we've been. This allows
	 * the algorithm to avoid getting into an infinite loop even if the
	 * constraint graph has an inadvertent cycle.
	 */
	 method incrementalAdd(c) {
	 	var mark = this.newMark();
	 	//printLine("mark "+mark);
	 	var overridden = c.satisfy(mark);
	 	//var counter=0; //printLine
	 	while ({overridden !=NEWNONE}){
	 		//counter=counter+1; //printLine
	 		//printLine("counter "+counter);
	 		//printLine("overridden "+overridden.strength.name);
	 		//printLine("mark "+mark);
	 		overridden = overridden.satisfy(mark);
	 	};
	 }
	 
	/**
	 * Entry point for retracting a constraint. Remove the given
	 * constraint and incrementally update the dataflow graph.
	 * Details: Retracting the given constraint may allow some currently
	 * unsatisfiable downstream constraint to be satisfied. We therefore collect
	 * a list of unsatisfied downstream constraints and attempt to
	 * satisfy each one in turn. This list is traversed by constraint
	 * strength, strongest first, as a heuristic for avoiding
	 * unnecessarily adding and then overriding weak constraints.
	 * Assume: c is satisfied.
	 */
	 method incrementalRemove(c){
	 	var out = c.output();
	 	c.markUnsatisfied();
	 	c.removeFromGraph();
	 	var unsatisfied = this.removePropogateFrom(out);
	 	var strength = REQUIRED;
	 	//possible debug section below...might need to do this once no matter what
	 	while ({strength!=WEAKEST}){
	 		//possible debug; is map what I want? add map to collection?
	 		unsatisfied.map(fn(elem) => {
	 			if (elem.strength == strength){
	 				this.incrementalAdd(elem);
	 			};
	 			//printLine("before strength.nextWeaker()");
	 			//printLine(strength);
	 			//printLine(strength.tree);
	 			//printLine(strength.nextWeaker);
	 			//printLine(strength.nextWeaker());
	 			strength=strength.nextWeaker();
	 			//printLine("after strength.nextWeaker()");
	 			//printLine(strength);
	 			//printLine(strength.tree);
	 			});
	 	};
	 } 

	/**
	 * Select a previously unused mark value.
	 */
	 method newMark() {
	 	this.currentMark=this.currentMark+1;
	 }
	 
	 /**
 	* Extract a plan for resatisfaction starting from the given source
	 * constraints, usually a set of input constraints. This method
	 * assumes that stay optimization is desired; the plan will contain
	 * only constraints whose output variables are not stay. Constraints
	 * that do no computation, such as stay and edit constraints, are
	 * not included in the plan.
	 * Details: The outputs of a constraint are marked when it is added
	 * to the plan under construction. A constraint may be appended to
	 * the plan when all its input variables are known. A variable is
	 * known if either a) the variable is marked (indicating that has
	 * been computed by a constraint appearing earlier in the plan), b)
	 * the variable is 'stay' (i.e. it is a constant at plan execution
	 * time), or c) the variable is not determined by any
	 * constraint. The last provision is for past states of history
	 * variables, which are not stay but which are also not computed by
	 * any constraint.
	 * Assume: sources are all satisfied.
	 */
	 method makePlan(sources) {
	 	//printLine("entered makePlan");
	 	var mark = this.newMark();
	 	var plan = new Plan;
	 	plan.startPlan();
	 	var todo = sources;
	 	//var counter=0;
	 	//printLine("todo size"+todo.size());
	 	while ({todo.size()>0}){
	 		//printLine("todo size "+todo.size());
    		//printLine("todo.removeFirst: "+todo.removeFirst+"<br>");
	 		var c = todo.removeFirst();
	 		//printLine("makePlan "+counter+" "+c.output().mark);
	 		//printLine("makePlan "+counter+" "+c.output().mark);
	 		if (c.output().mark != mark && c.inputsKnown(mark)){
	 			plan.addConstraint(c);
	 			c.output().mark = mark;
	 			//printLine("getting here");
	 			this.addConstraintsConsumingTo(c.output(),todo);
	 		};
	 		//counter=counter+1;
	 	};
	 	plan;
	 }
	 
	/**
	 * Extract a plan for resatisfying starting from the output of the
	 * given constraints, usually a set of input constraints.
	 */
	 method extractPlanFromConstraints(constraints){
	 	//printLine("entered extractPlan");
	 	var sources = new OrderedCollection;
	 	sources.startStack();
	 	//printLine("about to try map");
	 	//printLine(constraints.size());
	 	//printLine("initial sources size: "+sources.size());
	 	constraints.map(fn(c) => {
	 				//printLine("trying another constraint to see if it's already in sources");
	 				if(c.isInput() && c.isSatisfied()){
	 					//printLine("! "+constraints.elms.elems);
	 					//printLine("! "+sources.elms.elems);
	 					//printLine("adding another source");
	 					//not in plan already and eligible for inclusion
	 					sources.add(c);
	 					//printLine("sources size: "+sources.size());
	 					//printLine("! "+constraints.elms.elems);
	 					//printLine("! "+sources.elms.elems);
	 				};
	 			});
	 	//printLine("about to call makePlan");
	 	this.makePlan(sources);
	 }
	 
	/**
	 * Recompute the walkabout strengths and stay flags of all variables
	 * downstream of the given constraint and recompute the actual
	 * values of all variables whose stay flag is true. If a cycle is
	 * detected, remove the given constraint and answer
	 * false. Otherwise, answer true.
	 * Details: Cycles are detected when a marked variable is
	 * encountered downstream of the given constraint. The sender is
	 * assumed to have marked the inputs of the given constraint with
	 * the given mark. Thus, encountering a marked node downstream of
	 * the output constraint means that there is a path from the
	 * constraint's output to one of its inputs.
	 */
	 method addPropogate(c, mark){
	 	var todo = new OrderedCollection;
	 	todo.startStack();
	 	todo.add(c);
	 	var condition = todo.size();
	 	while ({condition>0}){
	 		var d = todo.removeFirst();
	 		ifElse (d.output().mark==mark){
	 			//printLine("in addPropogate if");
	 			this.incrementalRemove(c);
	 			condition = -1;
	 			new False;
	 		}
	 		{
	 			//printLine("in addPropogate else");
	 			//printLine(d.tree);
	 			d.recalculate();
	 			//printLine("past d.recalculate");
	 			this.addConstraintsConsumingTo(d.output(),todo);
	 			//printLine("past addconstraintsconsumingto");
	 			condition=todo.size();
	 		};
	 	};
	 	new True;
	 }
	 
	/**
	 * Update the walkabout strengths and stay flags of all variables
	 * downstream of the given constraint. Answer a collection of
	 * unsatisfied constraints sorted in order of decreasing strength.
	 */
	 method removePropogateFrom(out){
	 	out.determinedBy=NEWNONE;
	 	out.walkStrength = WEAKEST;
	 	out.stay = new True;
	 	var unsatisfied = new OrderedCollection;
	 	unsatisfied.startStack();
	 	var todo = new OrderedCollection;
	 	todo.startStack();
	 	todo.add(out);
	 	while ({todo.size()>0}){
	 		var v = todo.removeFirst();
	 		v.constraints.map(fn(c) => {
	 				if (!c.isSatisfied()){
	 					unsatisfied.add(c);
	 				};
	 			});
	 		var determining = v.determinedBy;
	 		v.constraints.map(fn(next) => {
	 			if (next != determining && next.isSatisfied()) {
	 				next.recalculate();
	 				todo.add(next.output());
	 			};
	 		});
	 	};
	 	unsatisfied;
	 }
	 
	 method addConstraintsConsumingTo(v, coll){
	 	var determining = v.determinedBy;
	 	var cc = v.constraints;
	 	//printLine("in addconstraintsconsuming");
	 	//printLine(cc);
	 	//printLine(cc.tree);
	 	cc.map(fn(c) => {
	 		//printLine("in map");
	 		if (c!=determining && c.isSatisfied()){
	 			coll.add(c);
	 		};
	 	});
	 	//printLine("left addConstraintsConsuming");
	 }
 }
 	
 

/* --- *
 * P l a n
 * --- */

/**
 * A Plan is an ordered list of constraints to be executed in sequence
 * to resatisfy all currently satisfiable constraints in the face of
 * one or more changing inputs.
 */	
 
 state Plan {
   var v;
 	
 	method startPlan(){
 		this.v = new OrderedCollection;
 		this.v.startStack();
 	}
 	
 	method addConstraint(c){
 		//printLine("addconstraint plan");
 		this.v.add(c);
 	}
 	
 	method size(){
 		this.v.size();
 	}
 	
 	method constraintAt(index) {
 		this.v.at(index);
 	}
 	
 	method execute() {
 		this.v.map(fn(c) => {
 			c.execute();
	 	});
 	}
 }


/* --- *
 * M a i n
 * --- */

/**
 * This is the standard DeltaBlue benchmark. A long chain of equality
 * constraints is constructed with a stay constraint on one end. An
 * edit constraint is then added to the opposite end and the time is
 * measured for adding and removing this constraint, and extracting
 * and executing a constraint satisfaction plan. There are two cases.
 * In case 1, the added constraint is stronger than the stay
 * constraint and values must propagate down the entire length of the
 * chain. In case 2, the added constraint is weaker than the stay
 * constraint so it cannot be accomodated. The cost in this case is,
 * of course, very low. Typical situations lie somewhere between these
 * two extremes.
 */ 
 
 
//===================================================still javascript below

method chainTest(n) {
  planner = new Planner;
  planner.setData();
  var prev = NEWNONE;
  //printLine("about to declare first");
  var first = NEWNONE;
  //printLine(first);
  var last = NEWNONE;

  // Build chain of n equality constraints
  var counter = 0;
  while({counter<=n}){
  	var name = "v"+counter;
  	var v = new Variable;
  	v.setVariableFields(name);
  	if (prev!=null){
  		var ec = new EqualityConstraint;
  		ec.setEqualityConstraintFields(prev, v, REQUIRED);
  	};
  	//printLine(first);
  	if (counter==0) {first = v;};
  	//printLine("past counter=0");
  	if (counter==n) {last = v;};
  	prev=v;
  	counter=counter+1;
  	//printLine("counter: "+counter);
  	//printLine("first: "+first);
  	//printLine("last: "+last);
  };

  var sc = new StayConstraint;
  sc.setStayConstraintFields(last, STRONG_DEFAULT);
  //printLine("I seem to be finishing adding the stay constraint");
  var edit = new EditConstraint;
  //printLine("I seem to be finishing creating the edit constraint");
  edit.setEditConstraintFields(first, PREFERRED);
  //printLine("about to create new ordered collection");
  var edits = new OrderedCollection;
  edits.startStack();
  //printLine("about to add edit to edits");
  edits.add(edit);
  //printLine("about to try to extract plan");
  var plan = planner.extractPlanFromConstraints(edits);
  //printLine("past extracting plan");
  counter=0;
  while ({counter<100}){
  	//printLine("counter "+counter);
  	first.value = counter;
  	plan.execute();
  	if (last.value !=counter) {
  		printLine("Chain test failed.");
  	};
  	counter=counter+1;
  };
}

/**
 * This test constructs a two sets of variables related to each
 * other by a simple linear transformation (scale and offset). The
 * time is measured to change a variable on either side of the
 * mapping and to change the scale and offset factors.
 */
method projectionTest(n) {
  planner = new Planner;
  planner.setData();
  var scale = new Variable;
  scale.setVariableFields("scale", 10);
  var offset = new Variable;
  offset.setVariableFields("offset", 1000);
  var src = NEWNONE;
  var dst = NEWNONE;

  var dests = new OrderedCollection;
  dests.startStack();
  
  var counter=0;
  while ({counter<n}){
  	src = new Variable;
  	src.setVariableFields("src"+counter, counter);
  	dst = new Variable;
  	dst.setVariableFields("dst"+counter, counter);
  	dests.add(dst);
  	var stayC = new StayConstraint;
  	stayC.setStayConstraintFields(src, NORMAL);
  	var scaleC = new ScaleConstraint;
  	//printLine("projection test scale "+scale);
  	scaleC.setScaleConstraintFields(src, scale, offset, dst, REQUIRED);
  	//printLine("projectionTest "+counter);
  	counter=counter+1;
  };

  change(src, 17);
  if (dst.value != 1170) {printLine ("Projection 1 failed");};
  change(dst, 1050);
  if (src.value != 5) {printLine("Projection 2 failed");};
  change(scale, 5);
  counter=0;
  while({counter<(n - 1)}){
  	//printLine(dests.at(counter).value);
  	if (dests.at(counter).value != counter*5+1000){
  		printLine("Projection 3 failed");
  	};
  	counter=counter+1;
  };
  
  change(offset, 2000);
  counter=0;
  while ({counter<(n - 1)}){
  	//printLine(dests.at(counter).value);
  	if(dests.at(counter).value != counter*5+2000){
  		printLine("Projection 4 failed");
  	};
  	counter=counter+1;
  };
}

method change(v, newValue) {
  var edit = new EditConstraint;
  edit.setEditConstraintFields(v, PREFERRED);
  var edits = new OrderedCollection;
  edits.startStack();
  edits.add(edit);
  var plan = planner.extractPlanFromConstraints(edits);
  var counter=0;
  while ({counter<10}){
  	counter=counter+1;
  	v.value = newValue;
  	plan.execute();
  };
  edit.destroyConstraint();
}

// Global variable holding the current planner.
var planner = NEWNONE;

method DeltaBlue() {
  chainTest(100);
  projectionTest(100);
}


method main(){
	var start=new Date;
	REQUIRED.setStrengthFields(0, "required");
	STRONG_PREFERRED.setStrengthFields(1, "strongPreferred");
	PREFERRED.setStrengthFields(2, "preferred");
	STRONG_DEFAULT.setStrengthFields(3, "strongDefault");
	NORMAL.setStrengthFields(4, "normal");
	WEAK_DEFAULT.setStrengthFields(5, "weakDefault");
	WEAKEST.setStrengthFields(6, "weakest");
	DeltaBlue();
	//printLine("done");
	var timeOne = new Date-start;
	print(timeOne);
}