package coreExamples.compositionAndStateChange;

import java.lang.System;

state A { }

state B case of A { }

state C case of A { }

state One { }

state Two case of One { }

state Three case of One { }

method main() {

	val a = new B with Two;
	a <- C;
	System.out.print("B <- C gives");
	var states = "";
	match (a) {
		case B { states = " B" }
		default { }
	};
	match (a) {
		case C { states = states + " C" }
		default { }
	};
	match (a) {
		case Two { states = states + " One" }
		default { }
	};
	System.out.println(states);
	
	val two = new Two;
	two <- { val x = 1; };
	System.out.print("Two <- {val x} gives");
	match (two) {
		case Two { System.out.println(" Two") }
		default { System.out.println("no nominal state") }
	};	

}