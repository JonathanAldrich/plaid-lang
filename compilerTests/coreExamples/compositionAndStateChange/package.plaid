package coreExamples.compositionAndStateChange;

import java.lang.System;

state A { }

state B case of A { }

state C case of A { }

state One { }

state Two case of One { }

state Three case of One { }

//**************************
state P {
	val foo = 1;
	val bar;
}

state Q case of P {
	val bar = 2;
	val baz = 3;
}

state R case of P {
	val bar = 5;
	val bbaz = 1;
}


method main() {

	val a = new B with Two;
	a <- C;
	print("B with Two <- C gives C with Two - ");
	var states = "";
	match (a) {
		case B { printLine("failed - B still there but should be removed") }
		case C { 
			match (a) {
				case Two { printLine("ok") }
				default { printLine("failed - Two removed incorrectly") }
			}
		}
		default { printLine("failed - C not added") }
	};
	
	val two = new Two;
	two <- { val x = 1; };
	print("Two <- {val x} gives B - ");
	match (two) {
		case Two { printLine("ok") }
		default { printLine("failed - nominal state Two removed incorrectly") }
	};	

	val x = new Q;
	printLine("This should be 2: " + x.bar);
	x <- R;
	printLine("This should be 5: " + x.bar);
	x <- Q;
	printLine("This should be 2: " + x.bar);


}