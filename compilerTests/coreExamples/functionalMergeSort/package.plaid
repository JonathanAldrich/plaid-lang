package coreExamples.functionalMergeSort;

state MyList {
	method immutable MyList add(immutable Integer >> immutable Integer i)[immutable MyList >> immutable MyList];
	method immutable MyList copy()[immutable MyList>> immutable MyList];
	method immutable MyList copyEven()[immutable MyList >> immutable MyList];
	method immutable MyList copyOdd()[immutable MyList >> immutable MyList];
	method immutable MyList merge(immutable MyList >> immutable MyList other)[immutable MyList >> immutable MyList];
}

state MyCons case of MyList {
	val immutable MyList next;
	val immutable Integer data;
	
	method immutable MyList add(immutable Integer >> immutable Integer i)[immutable MyCons >> immutable MyCons] {
		match (this.data <= i) {
			case True { //insert here
				new MyCons {
					val immutable MyList next = this.copy();
					val immutable Integer data = i;
				}
			}
			case False {
				new MyCons {
					val immutable MyList next = this.next.add(i);
					val immutable Integer data = this.data;
				}
			}
		}
	}
	
	method immutable MyList copy()[immutable MyCons >> immutable MyCons] {
		new MyCons {
			val immutable MyList next = this.next.copy();
			val immutable Integer data = this.data;
		}
	}
	
	method immutable MyList copyEven()[immutable MyCons >> immutable MyCons] {
		new MyCons {
			val immutable MyList next = this.next.copyOdd();
			val immutable Integer data = this.data;
		}
	}
	
	method immutable MyList copyOdd()[immutable MyCons >> immutable MyCons] {
		this.next.copyEven();
	}
	
	method immutable MyList merge(immutable MyList >> immutable MyList other)[immutable MyCons >> immutable MyCons] {
		match (other) {
			case MyNil { this.copy(); }
			case MyCons {
				match (this.data <= other.data) {
					case True {
						new MyCons {
							val immutable MyList next = this.next.merge(other);
							val immutable Integer data = this.data;
						}
					}
					case False {
						new MyCons {
							val immutable MyList next = other.next.merge(this);
							val immutable Integer data = other.data;
						}
					}
				}
			}
		}
	}
}

state MyNil case of MyList {
	method immutable MyList add(immutable Integer >> immutable Integer i)[immutable MyNil >> immutable MyNil] {
		new MyCons {
			val immutable MyList next = new MyNil;
			val immutable Integer data = i;
		}
	}
	
	method immutable MyList copy()[immutable MyNil >> immutable MyNil] {
		new MyNil;
	}
	
	method immutable MyList copyEven()[immutable MyNil >> immutable MyNil] {
		new MyNil;
	}

	method immutable MyList copyOdd()[immutable MyNil >> immutable MyNil] {
		new MyNil;
	}
	
	method immutable MyList merge(immutable MyList >> immutable MyList other)[immutable MyList >> immutable MyList] {
		match (other) {
			case MyNil { new MyNil }
			case MyCons { other.copy(); }
		}
	}
}

val (immutable MyList) -> immutable MyList mergeSort = fn (immutable MyList list) => {
	match (list) {
		case MyNil { new MyNil }
		case MyCons {
			match (list.next) {
				case MyNil { //base case
					list.copy();
				}
				case MyCons {
					val immutable MyList left = list.copyEven();
					val immutable MyList right = list.copyOdd();
					val immutable MyList sortedLeft = mergeSort(left);
					val immutable MyList sortedRight = mergeSort(right);
					sortedLeft.merge(sortedRight);
				}
			}
			
			
		}
	}
	
};

val (immutable MyList) -> void printList = fn (immutable MyList list) => { 
	match(list) {
		case MyNil { }
		case MyCons { 
			java.lang.System.out.print("" + list.data + " ");
			printList(list.next);
		}
	}
};

method main() {
	val immutable MyList testList = 
		new MyCons {
			val immutable Integer data = 4;
			val immutable MyList next = new MyCons {
				val immutable Integer data = 8;
				val immutable MyList next = new MyCons {
					val immutable Integer data = 1;
					val immutable MyList next = new MyCons {
						val immutable Integer data = 2;
						val immutable MyList next = new MyCons {
							val immutable Integer data = 5;
							val immutable MyList next = new MyCons {
								val immutable Integer data = 0;
								val immutable MyList next = new MyNil;
							};
						};	
					};
				};
			};
		};
	printList(testList);
	val immutable MyList sortedList = mergeSort(testList);
	java.lang.System.out.println("");
	printList(sortedList);
	java.lang.System.out.println("");
}

