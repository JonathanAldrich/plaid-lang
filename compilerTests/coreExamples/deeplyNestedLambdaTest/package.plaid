package coreExamples.deeplyNestedLambdaTest;

var global = "global";
val constGlobal = "constant global";

method test() {
	fn (a) => {
		val x = "val x";
		val cantChange = "can't change me!";
		fn (b) => {
			var y = "var y";
			fn (c) => {
				var z = "var z (original)";
				printLine(z);
				var changeMe = "change me!";
				var returnFun = fn (d) => {
					var z = "var z (shadowed)";
					changeMe = "changed!";
					printLine(z);
					fn (e) => {
						changeMe = "you have been changed!";
						//cantChange = "this shouldn't have been changed!";
						//constGlobal = "this also shouldn't have been changed!";
						printLine(a);
						printLine(b);
						printLine(c);
						printLine(d);
						printLine(e);
						printLine(x);
						printLine(y);
						printLine(z);
						printLine(changeMe);
						printLine(cantChange);
						global = "changed global";
					};
				};
				returnFun("d");
				printLine(changeMe);
				printLine(z);
				returnFun;
			};
		};
	};
}

method main() {
	var f = test();
	var g = f("a");
	var h = g("b");
	var i = h("c");
	var j = i("d");
	j("e");
	printLine(global);
}