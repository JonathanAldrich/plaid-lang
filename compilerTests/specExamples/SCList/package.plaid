/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package specExamples.SCList;

state A { val a = 1; method y() { 1 } } //normal state
state B { val b = 2; method z() { 2 } } //normal state
state BPrime case of B { val bprime = 3; } //case of state
state C = A with B // state with state
state D = A with BPrime //state with case of state
state E = A with { val e = 5; } // state with field
state F = A with { method f() {6} } //state with method
state G = { method g() {8} } with {val seven = 7; } // method with field
state H = { method h() {9} } with A //method with state
state I = { method i() {10} } with BPrime //method with case of state
state J = { method j() {11} } with {method jtwo() {12} } //method with method
state K { val myState = new D ; } //single field, testing state members
state K2 = {val myState = new D ; }	//single field, testing state members using with
state TestOne = A with I with { val eight = 8;} with J with G //chained with
state TestTwo = A { val s = 1; } with J { val t = 2; } with G { val q = 3; } //chained with, testing specify
state TestFour = A { val s = 1; } //test specify - no With, just QI

state SCL { val t = 1; method s() { 1 } }

method main() {

	//these are not tests of SC-List - these are just tests of With

	val cState = new C;
	val dState = new D;
	val eState = new E;
	val fState = new F;
	val gState = new G;
	val hState = new H;
	val iState = new I;
	val jState = new J;
	val cState2 = new A with B; //state with state
	val dState2 = new A with BPrime; //state with case of state
	val eState2 = new A with { val e = 5; }; // state with field
	val fState2 = new A with { method f() {6} }; //state with method
	val gState2 = new { method g() {8} } with {val seven = 7; }; //method with field
	val hState2 = new { method h() {9} } with A; //method with state
	val iState2 = new { method i() {10} } with BPrime; //method with case of state
	val jState2 = new { method j() {11} } with {method jtwo() {12} }; //method with method
		
	val kState = new K;
	printLine("This should be 3: "+kState.myState.bprime);
	val kState2 = new K2;
	printLine("This should be 3: "+kState2.myState.bprime);
	
	val kState3 = new { val myState = new D ; } with { val myState2 = new G ; }; //field with field, testing state members
	printLine("This should be 3: "+kState3.myState.bprime);
	val kState4 = new { val myState = new D ; }; //single field, testing ability to initiate one set of fields as a state
	printLine("This should be 3: "+kState4.myState.bprime);
	
	val t1 = new TestOne;
	val t2 = new TestTwo;
	printLine("This should be 3: "+t2.q);
		
	val test = new A with I with { val eight = 8;} with J with G; //chaining withs
	val test2 = new A { val s = 1; } with J { val t = 2; } with G { val q = 3; }; //testing specialize
	printLine("This should be 3: "+test2.q);
	val test3 = new { val x = gState2.seven; } with { val g = eState2.e; }; //testing using other states' fields as variables
	printLine("This should be 5: "+test3.g);
	val test4 = new A {val s = 1; }; //test specialize - no With, just QI
	
	//these are tests of SC-List
	
	val scl1 = new SCL;
	val scl2 = new SCL;
	scl1 <- A with BPrime;
	scl2 <- A;
	scl2 <- BPrime;
	
	printLine("These should be the same: "+scl1.a+" "+scl2.a);
	printLine("These should be the same: "+scl1.b+" "+scl2.b);
	printLine("These should be the same: "+scl1.bprime+" "+scl2.bprime);
	printLine("These should be the same: "+scl1.y()+" "+scl2.y());
	printLine("These should be the same: "+scl1.z()+" "+scl2.z());
	printLine("These should be the same: "+scl1.s()+" "+scl2.s());
	printLine("These should be the same: "+scl1.t+" "+scl2.t);
	printLine("Inspect trees to ensure the metadata is the same in JavaScript implementation");
	
	
	
}