 /**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/* *** global configuration options *** */
options{	STATIC=false;
}

/* *** Specification of the parser class *** */
PARSER_BEGIN(PlaidCoreParser)
package plaid.parser;
import java.util.*;
import plaid.parser.ast.*;

public class PlaidCoreParser
{
    protected Expression combineSimpleExp1(List<Expression> exps) throws ParseException {
        Expression result;
        
        // reverse list 
        Collections.reverse(exps);
        
        if ( exps.size() == 1 ) {
            result = exps.get(0);
        } else {
            Expression left = exps.get(0);
            for ( int i = 1; i < exps.size(); i++) {
                Expression right = exps.get(i);
                if ( right instanceof Application ) {
                    Application app = (Application)right;
                    left = new Application(app.getToken(),
                                           left,
                                           app.getMetaArguments(),
                                           app.getArgument());
                } else if ( right instanceof DestructiveDereference ) {
                    DestructiveDereference ddref = (DestructiveDereference) right;
                    left = new DestructiveDereference(ddref.getToken(), 
                                                      left, 
                                                      ddref.getRight());
                } else if ( right instanceof Dereference ) {
                    Dereference dref = (Dereference) right;
                    left = new Dereference(dref.getToken(), 
                                           left, 
                                           dref.getRight());
                } else {
                    throw new ParseException("Cannot have " + exps.get(i) +" on the right hand size of an exception");
                }
            }
            result = left;
        }
        
        return result;                       
    }

    protected Expression combineSimpleExp2(List<Expression> exps) throws ParseException {
        Expression result;
        
        // reverse list
        Collections.reverse(exps);
        
        if ( exps.size() == 1 ) {
            result = exps.get(0);
        } else {
	        Expression left = exps.get(0);
	        for (int i = 1; i < exps.size(); i++ ) {
	            Expression right = exps.get(i);
	            if ( right instanceof Application ) {
	                Application app = (Application)right;
	                left = new Application(app.getToken(),
	                                       left,
	                                       app.getMetaArguments(),
	                                       app.getArgument());
	            } else {
	                throw new ParseException("Cannot have " + exps.get(i) +" on the right hand size of an exception");
	            }
            }
            result = left;
        }
        
        return result;
    }
}

PARSER_END(PlaidCoreParser)

/* *** Token specification *** */
/* Skip whitespace */
SKIP :
{
		" "
|		"\t"
|		"\n"
|		"\r"
}

SKIP :
{
		"/*" : WithinComment
|		"/**" : WithinComment
}

< WithinComment >
SKIP :
{
		"*/" : DEFAULT
}

< WithinComment >
MORE :
{
		< ~[ ] >
}

// Single-line comments
SPECIAL_TOKEN :
{
		< SINGLE_LINE_COMMENT :
				"//" (~[ "\n", "\r" ])*
				(
						"\n"
				|		"\r"
				|		"\r\n"
				) >
}

/* Keywords */
TOKEN /*[IGNORE_CASE]*/:
{
	< AS : "as" >
|   < ATOMIC : "atomic" >
| 	< CASE : "case">
|	< DEF : "default" >
|	< DYN : "dyn">
|	< DYNAMIC : "dynamic" >
|   < EXCLUSIVE : "exclusive" >
|	< FN : "fn" >
|   < FREEZE : "freeze" >
| 	< FULL : "full" >
|   < GROUP : "group" >
|	< IMMUTABLE : "immutable" >
|	< IMPORT : "import" > 
|	< MATCH : "match" >
|	< METHOD : "method">
| 	< MUTABLE : "mutable" >
|	< NEW : "new">
|	< NONE : "none" >
|	< OF : "of" >
|	< OVERRIDE : "override" >
|	< PACKAGE : "package" >
|   < PROTECTED : "protected" >
| 	< PURE : "pure" >
| 	< READONLY : "readonly" >
|	< REMOVE : "remove" >
|	< RENAME : "rename" >
|	< REQUIRES : "requires" >
| 	< SHARED : "shared" >
|	< STATE : "state" >
|   < STATEVAL : "stateval" >
|   < SPLIT : "split" >
|	< TAKE : "take" >
|	< THIS : "this" >
| 	< TYPE : "type" >
|	< UNIQUE : "unique" >
| 	< UNIT : "unit" >
|   < UNPACKINNERGROUPS : "unpackInnerGroups" >
|	< VAL : "val" >
|	< VAR : "var" >	
|	< VOID : "void" >
|	< WITH : "with" > 
}


/* Literals */
TOKEN :
{
		< STRING_LITERAL :
				"\""
				(
						(~[ "\"", "\\", "\n", "\r" ])
				|
						(
								"\\"
								(
										[ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
								|		[ "0"-"7" ] ([ "0"-"7" ])?
								|		[ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
								)
						)
				)*
				"\"" >
|       < INTEGER:
            <DECIMAL_LITERAL> 
          | <HEX_LITERAL> 
          | <OCTAL_LITERAL> 
        >
|
        < #DECIMAL_LITERAL: ("-")? ["1"-"9"] (["0"-"9"])* >
|
        < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
        < #OCTAL_LITERAL: "0" (["0"-"7"])* >

|       < FLOATING_POINT_LITERAL:
          ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? 
          | "." (["0"-"9"])+ (<EXPONENT>)? 
          | ("-")? (["0"-"9"])+ <EXPONENT> 
          | ("-")? (["0"-"9"])+ (<EXPONENT>)? 
        >
|
        < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >

}

/* Language Operators and Separators */
TOKEN :
{
		< LPAREN : "(" >
|		< RPAREN : ")" >
|		< LBRACE : "{" >
|		< RBRACE : "}" >
|		< LBRACK : "[" >
|		< RBRACK : "]" >
|		< EQUALS : "=" >
|		< RARROW : "->" >
|		< LARROW : "<-" >
| 		< DLARROW : "<<-" >
|		< DARROW : "=>" >
|		< MARROW : ">>" >
|       < DOT : "." > 
|		< SEMICOLON : ";">
| 		< COMMA : "," >
}

/* Operators with Java Precedence */
TOKEN : 
{
		< QST : "?" >
| 		< COLON : ":" >
|		< OR : "||" >
|		< AND : "&&">
|		< IOR : "|" >
|		< XOR : "^" >
|		< BITAND : "&" >
|		< EQ : "==" >
|		< NEQ : "!=" >
|       < GT : ">" >
|		< LT : "<" >
|		< GEQ : ">=" >
|		< LEQ : "<=" >
|		< LSHIFT : "<<" >
// | 	< RSHIFT : ">>" > duplicate of MARROW
|		< RUNSIGNEDSHIFT : ">>>"> 
|		< PLUS : "+" >
| 		< MINUS : "-">
|		< STAR : "*" >
| 		< SLASH : "/" >
|		< PERCENT : "%" >
|		< BANG : "!" >
|		< TILDE : "~" >
}

/* User operators */
/* Do not allow comment-like things (// or /*) as user operators */
/* Does not need to account for single character operators */
TOKEN :
{
	< OP : 
	(
		( "/" [ "=", "<", ">", "!", "~", "?", ":", "&", "|", "+", "-", "^", "%" ]) |
		( [ "=", "<", ">", "!", "~", "?", ":", "&", "|", "+", "-", "*", "^", "%" ] )
	)+
	("/")?>
}

/* Identifiers */
TOKEN :
{
		< ID : ([ "A"-"Z", "a"-"z" ]) ([ "A"-"Z", "a"-"z", "0"-"9", "_" ])* >
}

CompilationUnit CompilationUnit() :
{
		Decl d;
		QualifiedIdentifier p;
		List <Decl> decls = new ArrayList<Decl>();
		List<Import> imports = new ArrayList<Import>();
}
{
		p = Package()
		(
				imports = Imports()
		)?
		(
				d = Decl()
				{
						decls.add(d);
				}
		)+
		< EOF >
		{
				return new CompilationUnit(decls, imports, p);
		}
}

QualifiedIdentifier Package() :
{
		QualifiedIdentifier dn;
}
{
		< PACKAGE > dn = QualifiedIdentifier() < SEMICOLON >
		{
				return dn;
		}
}

/*****************************************************************************/
/*								TYPING RULES	 							 */
/*****************************************************************************/

Type Type() :
{
	Permission perm = Permission.EMPTY;
	LambdaType l;
    QualifiedIdentifier qi;
    List<MetaType> metaTypes = new ArrayList<MetaType>();
}
{   (	<UNIT>
	{
	  	return Type.UNIT;	}
|	<VOID>
	{
		return Type.VOID;
	}
	//TODO: should this be moved up higher so you cannot write fn >> fn?
|	l = LambdaType()
	{
		return l;
	}
	// TODO: Default permission?
	// KBN - 2010-11-4 permission no longer optional - currently causes parser conflict
| 	[perm = Permission()] qi = QualifiedIdentifier() [LOOKAHEAD(MetaTypes()) metaTypes = MetaTypes(false)]
	{
		return new NominalObjectType(ASTNode.DEFAULT_TOKEN, perm, qi, metaTypes);
	}
	)
}

Permission Permission() :
{
    Token t;	Permission perm;
	Expression datagroup = Expression.EMPTY;
}
{	(	t = <FULL>	{
	  	return new Permission(t, Permission.PermissionKind.FULL, datagroup);	}
| 	t = <IMMUTABLE>	{
	  	return new Permission(t, Permission.PermissionKind.IMMUTABLE, datagroup);	}
| 	t = <PURE>	{
	  	return new Permission(t, Permission.PermissionKind.PURE, datagroup);	}
| 	t = <SHARED> [<LT> datagroup = SimpleExpr() <GT>]
	{
		return new Permission(t, Permission.PermissionKind.SHARED, datagroup);
	}
| 	t = <UNIQUE>
	{
	  	return new Permission(t, Permission.PermissionKind.UNIQUE, datagroup);	}  
|	t = <NONE>
	{
		return new Permission(t, Permission.PermissionKind.NONE, datagroup);
	}
	)
}


List<ArgSpec> ArgSpecList() :{  List<ArgSpec> cl = new ArrayList<ArgSpec>();  ArgSpec c;}{  c = ArgSpec() { cl.add(c); }  ( <COMMA> c = ArgSpec() { cl.add(c); } )*  {  return cl;  }}

//List<ChangeType> ChangeTypeList() ://{//	List<ChangeType> cl = new ArrayList<ChangeType>();//	ChangeType c;////}//{//	c = ChangeType() { cl.add(c); }//	( <COMMA> c = ChangeType() { cl.add(c); } )*//	{//	return cl;//	}//}

ArgSpec ArgSpec() :
{
	Type input;
	Type output = Type.EMPTY;
	boolean borrow = false;
}
{
	input = Type() [ <MARROW> output = Type() ] //TODO: add more flexibility in what can enter as outgoing type (permType/permission/Objectype)
	{
		return new ArgSpec(ASTNode.DEFAULT_TOKEN, input,output);
	}
}

LambdaType LambdaType() :
{
	Token t;
	Map<Identifier,ArgSpec> env = new HashMap<Identifier, ArgSpec>();
	Type returnType;
	List<ArgSpec> argTypes = new ArrayList<ArgSpec>();
	List<MetaType> metaTypes = new ArrayList<MetaType>();
}
{
	// <meta>( c )[E] -> pT
	[metaTypes = MetaTypes(true)]
	t = <LPAREN> [ argTypes = ArgSpecList() ] <RPAREN> [ <LBRACK> [ env = Environment() ] <RBRACK> ]
		<RARROW> returnType = Type()
	{
		return new LambdaType(t, metaTypes, argTypes, env, returnType); 
	}

}

MetaType MetaType(boolean isMethod) : {    Token t;
    Identifier id;    boolean isAbstract = true;    Type type = Type.UNIT;    GroupPermission gp = GroupPermission.EMPTY;
    List<Expression> metaArgs = new ArrayList<Expression>();
    List<MetaArgSpec> metaArgsSpec = new ArrayList<MetaArgSpec>();
    QualifiedIdentifier caseof = QualifiedIdentifier.EMPTY;}{    (        t = <GROUP> [gp = GroupPermission()] id = Identifier() [ <EQUALS> <NEW> <GROUP> { isAbstract = false; } ]        {            if ( !isMethod && gp != GroupPermission.EMPTY ) {                throw new ParseException("Cannot specify group permissions in states.");            } else if ( isMethod && gp == GroupPermission.EMPTY ) {                throw new ParseException("Need to specify group permission.");            }            return new GroupType(t, gp, id, isAbstract);        }    |   t = <TYPE> id = Identifier() [LOOKAHEAD(MetaArgsSpec(false)) metaArgsSpec = MetaArgsSpec(false) ] [ <CASE> <OF> caseof = QualifiedIdentifier() [LOOKAHEAD(MetaArgs()) metaArgs = MetaArgs()] ]         {            return new TypeParameterType(t, id, metaArgsSpec, caseof, metaArgs);        }    )}List<MetaType> MetaTypes(boolean isMethod) :{  MetaType type;  List<MetaType> types = new ArrayList<MetaType>();}{    < LT >        type =  MetaType(isMethod) {  types.add(type); }        (            < COMMA > type =  MetaType(isMethod) {  types.add(type); }        )*     < GT >    {        return types;    }}

/*****************************************************************************/
/*							END OF TYPING RULES								 */
/*****************************************************************************/


Identifier Identifier() : {
    Token t;
}{
    (
        t = <ID>
//      | t = <TYPE>//      | t = <MUTABLE>//      | t = <EXCLUSIVE>//      | t = <SHARED>//      | t = <READONLY>
    )
    { return new Identifier(t, t.image); }  
}


QualifiedIdentifier QualifiedIdentifier() : {
    Identifier id;
    List<Identifier> ids = new ArrayList<Identifier>(); 
}{
    id = Identifier() { ids.add(id) ; }
    (LOOKAHEAD(2)
        <DOT> id = Identifier() 
            { ids.add(id); } 
    )*
    { return new QualifiedIdentifier(ASTNode.DEFAULT_TOKEN, ids); }   
}

List<Import> Imports() :
{
	Token tImp, tStar;
	QualifiedIdentifier qi;
	boolean hasStar = false;
	List <Import> imports = new ArrayList <Import> ();
}
{
		(       { hasStar = false; }
				tImp = <IMPORT>  qi = QualifiedIdentifier() [<DOT> tStar = <STAR> { hasStar= true; } ] < SEMICOLON >
				{
						imports.add(new Import(tImp, qi, hasStar));
				}
				
		)+
		{
				return imports;
		}
}


List<Expression> MetaArgs() :
{
  Expression arg;
  List<Expression> args = new ArrayList<Expression>();
}{
  <LT>
    arg =  SimpleExpr1() {  args.add(arg); }
    (
      <COMMA> arg =  SimpleExpr1() { args.add(arg); }
    )* 
  <GT>
  {
    return args;
  }
}


MetaArgSpec MetaArgSpec(boolean isMethod) :
{
  Token t;
  Identifier id;
  GroupPermission gp = GroupPermission.EMPTY;
  QualifiedIdentifier qi = QualifiedIdentifier.EMPTY;
}{
  (
    t=<GROUP> [gp = GroupPermission()] id = Identifier()
    {
        if ( isMethod && gp == GroupPermission.EMPTY ) {
            throw new ParseException("Need to specify group permission");
        } else if ( !isMethod && gp != GroupPermission.EMPTY ) {
            throw new ParseException("Group permissions are not allowed at statet level");
        }
        return new MetaGroupArgSpec(t, gp, id);
    }
  | t= <TYPE> id = Identifier() [ <CASE> <OF> qi = QualifiedIdentifier() ]     {        return new TypeParameter(t, id, qi);    }
  )
}


List<MetaArgSpec> MetaArgsSpec(boolean isMethod) :
{
    List<MetaArgSpec> args = new ArrayList<MetaArgSpec>();
    MetaArgSpec arg; 
}
{
    < LT >
        arg = MetaArgSpec(isMethod) { args.add(arg); }
        (
          < COMMA > arg = MetaArgSpec(isMethod) { args.add(arg); }          
        )*
    < GT >
    {
        return args;
    }
}



List<Modifier> Modifiers() : {
    Token t;
    List<Modifier> modifiers = new ArrayList<Modifier>();
}{
    (
            t = <OVERRIDE>   { modifiers.add(new Modifier(t, Modifier.ModifierKind.OVERRIDE));  }
        |   t = <REQUIRES>   { modifiers.add(new Modifier(t, Modifier.ModifierKind.REQUIRES));  }
        // immutable is handled by directly associating it to states to avoid conflicts with types
    )+
    {
        return modifiers;
    }
}


Specifier Specifier() : {
    Token t;  
}{
        t = <VAL> { return new Specifier(t, Specifier.SpecifierKind.VAL); }
    |   t = <VAR> { return new Specifier(t, Specifier.SpecifierKind.VAR); }
}


DeclOrStateOp DeclOrStateOp() : {
    DeclOrStateOp dop;
}{
     dop = Decl()
  |  dop = StateOp()
  {
      return dop;
  } 
}

List<DeclOrStateOp> DeclOrStateOpList() : {
    DeclOrStateOp dop;
    List<DeclOrStateOp> list = new ArrayList<DeclOrStateOp>();
}{
    <LBRACE>
        dop = DeclOrStateOp() { list.add(dop); } 
        (
            dop = DeclOrStateOp() { list.add(dop); }
        )*
    <RBRACE>
    { return list; }
}

Decl Decl() :
{
		Decl d;
		List<Modifier> modifiers = new ArrayList<Modifier>();
}
{
        [ modifiers = Modifiers() ]     

(LOOKAHEAD(2) // check for 'immutable' field vs state
		d = StateDecl(modifiers)
		{
		    return d;
		}
|       d = GroupDecl(modifiers)
        {
            return d;
        }
|
		d = FieldDecl(modifiers)
		{
		    return d;
		}
|		d = MethodDecl(modifiers)
		{
		    return d;
		}
)
}

Decl StateDecl(List< Modifier > modifiers) :
{
    Identifier name;
	Token t;
	boolean stateval = false;
	State stb = null;
	List<MetaArgSpec> metaArgsSpec = new ArrayList<MetaArgSpec>();
	List<Expression> metaCaseOfArgs = new ArrayList<Expression>();
	QualifiedIdentifier caseof = QualifiedIdentifier.EMPTY;
}
{
    [ t = <IMMUTABLE>  { modifiers.add(new Modifier(t, Modifier.ModifierKind.IMMUTABLE)); } ]
    t= <STATE> name = Identifier() [LOOKAHEAD(MetaArgsSpec(false)) metaArgsSpec = MetaArgsSpec(false)] [ <CASE> <OF> caseof = QualifiedIdentifier() [LOOKAHEAD(MetaArgsSpec(false)) metaCaseOfArgs = MetaArgs()] ] [stb = StateBinding()] // <SEMICOLON>    {
        if (stb == null) {            return new AbstractStateDecl(t, modifiers, name, metaArgsSpec, caseof, metaCaseOfArgs);
        } else {
            return new ConcreteStateDecl(t, modifiers, name, metaArgsSpec, caseof, metaCaseOfArgs,stb);
        }    }    | 
    t = <STATEVAL> name = Identifier() [LOOKAHEAD(MetaArgsSpec(false)) metaArgsSpec = MetaArgsSpec(false)] [stb = StateBinding()] // <SEMICOLON>    {        if (stb == null) {
            return new AbstractStateValDecl(t,modifiers, name, metaArgsSpec);
        } else {
            return new ConcreteStateValDecl(t, modifiers, name, metaArgsSpec, stb);
        }    }
}


State StateBinding() : {
    State state;
}{
    <EQUALS> state = State()
  | state = DeclList()
  { return state; }
}


State State() : {
    StatePrim stpLeft;
    StatePrim stpRight = null;
    Token t = null;
}{
    stpLeft = StatePrim() [LOOKAHEAD(<WITH>) t = <WITH> stpRight = StatePrim() ]
    {
        if ( stpRight != null  ) {
            return new With(t, stpLeft, stpRight);
        } else {
            return stpLeft;
        }
    }
}


StatePrim StatePrim() : {
    Token t;
    Expression e;
    List<DeclOrStateOp> dops = new ArrayList<DeclOrStateOp>();
    StatePrim stp;
}{
  (
     LOOKAHEAD(SimpleExpr())
     e = SimpleExpr() [ LOOKAHEAD(2) dops = DeclOrStateOpList()]
     {
         return new StateRef(e.getToken(), e, dops);
     }
  |  stp = DeclList() 
     {
        return stp;
     }
  | t =  <FREEZE> e = SimpleExpr() 
     {
         return new Freeze(t, e);
     }
  )
}


StateOp StateOp () : {
    Token t; 
    Identifier id, to;
}{
     t = <REMOVE> id = Identifier() <SEMICOLON>
     {
         return new StateOpRemove(t, id);
     } 
  |  t = <RENAME> id = Identifier() <AS> to = Identifier() <SEMICOLON>
     {
         return new StateOpRename(t, id, to);
     }
}

Decl FieldDecl(List<Modifier> modifiers) :
{
	Expression e;
	Identifier name;
	Type type = Type.EMPTY;
	Specifier specifier = Specifier.EMPTY;
}
{
  (  
     LOOKAHEAD(Specifier() Identifier() <SEMICOLON>)     specifier = Specifier() name = Identifier() <SEMICOLON>     {        return new AbstractFieldDecl(ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name);     }
  |
     LOOKAHEAD(Specifier() Type() Identifier() <SEMICOLON>)
     specifier = Specifier() type=Type() name = Identifier() <SEMICOLON>
     {
        return new AbstractFieldDecl(ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name);
     }
  |
     LOOKAHEAD(Type() Identifier() <SEMICOLON>)
     type = Type() name = Identifier() <SEMICOLON>
     {
        return new AbstractFieldDecl(ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name);
     }
  |  // concrete field decl
     LOOKAHEAD(Specifier() type = Type() Identifier() <EQUALS> )
     specifier = Specifier() type = Type() name = Identifier() <EQUALS> e = Expr() <SEMICOLON> 
     {
        return new ConcreteFieldDecl
            (ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name, e);
     }     
  |  
     LOOKAHEAD(Specifier() Identifier() <EQUALS>)
     specifier = Specifier() name = Identifier() <EQUALS> e = Expr() <SEMICOLON> 
     {
        return new ConcreteFieldDecl
            (ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name, e);
     }
  |  
     LOOKAHEAD(Type() Identifier() <EQUALS>)
     type = Type() name = Identifier() <EQUALS> e = Expr() <SEMICOLON> 
     {
        return new ConcreteFieldDecl
            (ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name, e);
     }
  |  
     LOOKAHEAD(Identifier() <EQUALS>)
     name = Identifier() <EQUALS> e = Expr() <SEMICOLON> 
     {
        return new ConcreteFieldDecl
            (ASTNode.DEFAULT_TOKEN, modifiers, specifier, type, name, e);
     }
  ) 
}


Decl GroupDecl(List<Modifier> modifiers) :{
    Token t;
    Identifier id;
}{    t = <GROUP> id = Identifier() <EQUALS> <NEW> <GROUP> <SEMICOLON> 
    {        return new GroupDecl(t, modifiers, id);
    }
}

GroupPermission GroupPermission() : {}{
   < EXCLUSIVE >   {
     return GroupPermission.EXCLUSIVE;   }
 | < SHARED >
   {
     return GroupPermission.SHARED;
   }
 | < PROTECTED >
   {     return GroupPermission.PROTECTED;   }   }


Decl MethodDecl(List<Modifier> modifiers) :
{
    Token t;
	Identifier methodName;
	Type returnType = Type.EMPTY;
	List<Arg> argList = new ArrayList<Arg>();
	List<ArgSpec> argTypes = new ArrayList<ArgSpec>();
	Map<Identifier,ArgSpec> env = new HashMap<Identifier, ArgSpec>();
	Expression e = Expression.EMPTY;
	MethodDecl d;
	List<MetaArgSpec> metaArgsSpec = new ArrayList<MetaArgSpec>();
}
{
//      //method [T] m([T>>T x])[T >> T] ( {e} | ; )
    t = <METHOD>
    (   
        LOOKAHEAD(Type() IdOrOperator() [MetaArgsSpec(true)] <LPAREN> [DeclArgs()] <RPAREN> [Environment()])  
        returnType = Type() methodName = IdOrOperator() [metaArgsSpec = MetaArgsSpec(true)]  <LPAREN> [argList = DeclArgs()] <RPAREN> [env = Environment()]
      |
        LOOKAHEAD(IdOrOperator() [MetaArgsSpec(true)] <LPAREN> [DeclArgs()] <RPAREN> [Environment()])  
        methodName = IdOrOperator() [metaArgsSpec = MetaArgsSpec(true)] <LPAREN> [argList = DeclArgs()] <RPAREN> [env = Environment()]
    )
    (
        e = BlockExpression() 
      | <SEMICOLON>
    )
         {
            if (e==Expression.EMPTY) {
                return new AbstractMethodDecl(t, 
                                   modifiers, 
                                   returnType,
                                   methodName, 
                                   metaArgsSpec,
                                   argList,
                                   env);
             } else {
                return new ConcreteMethodDecl(t, 
                                   modifiers, 
                                   returnType,
                                   methodName, 
                                   metaArgsSpec,
                                   argList,
                                   env,
                                   e);
             }
         }
}

List<Arg> DeclArgs() :
{
		Arg arg;
		List<Arg> args = new ArrayList<Arg>();
}
{		  arg = Arg()
		  {
			args.add(arg);
		  }
		  (
			<COMMA> arg = Arg()
			{
				args.add(arg);
			}
		  )*
		{
			return args;
		}
}

Arg Arg() :
{
	ArgSpec c = ArgSpec.EMPTY;
	Identifier argId;
}
{
  	(LOOKAHEAD(ArgSpec() Identifier()) c = ArgSpec() argId = Identifier() | argId = Identifier()) 
	{
		return new Arg(argId.getToken(), argId, c);
	}
}

DeclList DeclList() :
{
        Token t;
		List<Decl> declList = new ArrayList<Decl>();
		Decl d;
}
{
		t = <LBRACE>
		(
				d = Decl()
				{
						declList.add(d);
				}
		)*
		<RBRACE>
		{
				return new DeclList(t, declList);
		}
}

Expression BlockExpression() :
{
    Token t;
	List<Stmt > stmts = new ArrayList<Stmt>();
}
{
		t = <LBRACE> [ stmts = StmtList() ] <RBRACE>
		{
		  return new BlockExpr(t, stmts);
		}
}

List<Stmt> StmtList() :
{
    ArrayList < Stmt > stmtList = new ArrayList < Stmt > ();
	Stmt s;	
}
{
		
		s = Stmt() { stmtList.add(s); }
		(LOOKAHEAD(2)	< SEMICOLON > s = Stmt() { stmtList.add(s); }
				
		)*
		[<SEMICOLON>]
		{
            return stmtList;
		}
}

Stmt Stmt() :
{
		Stmt stmt;
}
{(
			stmt = Expr()
	|		stmt = LocalVarDecl()
	|       stmt = LocalStateValDecl()
)
{  return stmt;
}
}



Expression Expr() :
{
	Expression e;
}
{ 		e = Function()
		{
			return e;
		}
|		e = Expr1()
        {             return e;
        }
}

Expression Expr1() :
{
    Token t;
    List<Expression > metaArgs = new ArrayList<Expression>();
    List<Case > cl;
    Expression pattern;
    Identifier id;
    Expression target;
    Expression e;
    State st;
    List<Expression> datagroups;
    List<Stmt> stmtList = new ArrayList<Stmt>();}
{
    // This rule corresponds to the following rule:
    // 
    // [SimpleExp <DOT>] Identifier <EQUALS> Expr
    // 
    // Because SimpleExp.Identifier is itself an 
    // Expression we simply parse a SimpleExpression 
    // and check that we have a correct receiver. 
    LOOKAHEAD(SimpleExpr() <EQUALS>) 
    target = SimpleExpr()  t = <EQUALS> e = Expr()
    {   
        if ( target instanceof Identifier ) {
            return new Assignment(t, null, (Identifier)target, e);
        } else if ( target instanceof Dereference ) {
           Dereference dref = (Dereference)target;
           if ( dref.getRight() instanceof Identifier ) {
               return new Assignment(t, dref.getLeft(), (Identifier)dref.getRight(), e);
           } else {
               throw new ParseException("Cannot assing value to expression.");
           }
            
        } else {
            throw new ParseException("Cannot assing value to expression.");
        }
    } 
|   LOOKAHEAD(SimpleExpr() <LARROW>)
    e = SimpleExpr() t=<LARROW> st = State()
    {
        return new StateChange(t, e,st);
    }
|   LOOKAHEAD(SimpleExpr() <DLARROW>)
    e = SimpleExpr() t=<DLARROW> st = State()
    {
        return new Replace(t, e, st);
    }               
|   t = < MATCH > <LPAREN> pattern = InfixExpr() <RPAREN> < LBRACE > cl = CaseList() < RBRACE >
    {
      return new Match(t, pattern, cl);
    }
|   t = <ATOMIC> datagroups = MetaArgs() e = BlockExpression()
    {
      return new AtomicBlock(t, datagroups, e);
    }
|   t = <SPLIT> datagroups = MetaArgs() e = BlockExpression()
    {
      return new SplitBlock(t, datagroups, e);
    }
|   t = <UNPACKINNERGROUPS> e = BlockExpression() 
    {
      return new UnpackInnerGroups(t, e);
  }
|   e = InfixExpr()
{
  return e;}}

Expression InfixExpr() :
{
		Expression e;
		Token t = null;
		Type type = Type.EMPTY;
}
{
    LOOKAHEAD(2)
    e = SimpleExpr() [ t=<AS> type=Type() ]
    {
        if ( type == Type.EMPTY ) {
            return e;
        } else {
            return new Cast(t, e, type);
        }
    }
|   e = ConditionalExpression()
    {
        return e;
    }
}

Expression SimpleExpr() : {
    Expression e;
    Token t;
    State st;
    List<Expression> exps = new ArrayList<Expression>();
}{

    e = BlockExpression()
    {
        return e;
    }
|   t = <NEW> st = State()
    {
        return new NewInstance(t, st);
    }
|   e = SimpleExpr2()
    {
        return e;
    }
}


Expression SimpleExpr2() : {
    Expression e;
    List<Expression> rest;
}{
    e = SimpleExpr1() rest = SimpleExpr2Rest()
    {
        rest.add(e);
        return combineSimpleExp2(rest);
    }
}


List<Expression> SimpleExpr2Rest() : {
    Expression block;
    List<Expression> rest;
}{
    LOOKAHEAD(BlockExpression())
    block = BlockExpression() rest = SimpleExpr2Rest()
    {
        rest.add(new Application(ASTNode.DEFAULT_TOKEN, Expression.EMPTY, new ArrayList<Expression>(), block));
        return rest;
    }
  | { return new ArrayList<Expression>(); }
}


Expression SimpleExpr1() : {
    Expression e;
    List<Expression> rest;
    Token t = ASTNode.DEFAULT_TOKEN;
}{

(
    e = Literal() rest = SimpleExp1Rest()
    { rest.add (e); }
|   e = Identifier() rest = SimpleExp1Rest()
    { rest.add (e); }
|   e = THIS() rest = SimpleExp1Rest()
    { rest.add (e); }
|   e = ArgumentExpression() rest = SimpleExp1Rest()
    { rest.add (e); }
)
    { 
        return combineSimpleExp1(rest); 
    }
}


List<Expression> SimpleExp1Rest() : {
    Token t = ASTNode.DEFAULT_TOKEN;
    Expression e;
    Identifier id;
    List<Expression> metaArgs = new ArrayList<Expression>();
    List<Expression> args;
    List<Expression> rest;
}{
     t = <DOT> id = Identifier() rest = SimpleExp1Rest()
     {
        rest.add(new Dereference(t, Expression.EMPTY, id));
        return rest; 
     } 
  |  t = <BANG> id = Identifier() rest = SimpleExp1Rest()
     {
        rest.add(new DestructiveDereference(t, Expression.EMPTY, id));
        return rest; 
     } 
  |  LOOKAHEAD([MetaArgs()] ArgumentExpression()) 
     [ metaArgs = MetaArgs()] e = ArgumentExpression() rest = SimpleExp1Rest()
     {
        rest.add(new Application(t, Expression.EMPTY, metaArgs, e));
        return rest;
     }
  |  { return new ArrayList<Expression>() ;}
}

Identifier THIS() : {
    Token t;
}{
    t = <THIS> { return new Identifier(t, t.image); }
}

ArgumentExpression ArgumentExpression() : {
    Token t;
    List<Expression> args = new ArrayList<Expression>();
}{
    t = <LPAREN> [args = ExprList()] <RPAREN>
    {
        return new ArgumentExpression(t, args);
    }
}

Expression ConditionalExpression() : 
{
		Expression e;
		Expression arg;
		Expression arg2;
		Token t;
		Token t2;
}
{
		e = ConditionalOrExpression()
		(
				t = "?" arg = Expr() t2 =  ":" arg2 = ConditionalExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
						e = new MethodCall(t2, e, new Identifier(t,t.image), arg2);
				}
		)?
		{
				return e;
		}
}

Expression ConditionalOrExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = ConditionalAndExpression()
		(
				t = "||" arg = ConditionalAndExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression ConditionalAndExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = InclusiveOrExpression()
		(
				t = "&&" arg = InclusiveOrExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression InclusiveOrExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = ExclusiveOrExpression()
		(
				t = "|" arg = ExclusiveOrExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression ExclusiveOrExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = AndExpression()
		(
				t = "^" arg = AndExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression AndExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = EqualityExpression()
		(
				t = "&" arg = EqualityExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}


Expression EqualityExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = RelationalExpression()
		(
				(
						t = "=="
				|		t = "!="
				)
				arg = RelationalExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression RelationalExpression() :
{
		Expression e;
		Expression arg;
		Token t;
		List<Expression> argList = new ArrayList<Expression>();
}
{
		e = ShiftExpression() 
		(   
				(
						t = "<"
				|		t = ">"
				|		t = "<="
				|		t = ">="
				)
				arg = ShiftExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		  )*
		{
				return e;
		}
}

Expression ShiftExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = AdditiveExpression()
		(
				(
						t = "<<"
				|		t = ">>"
				|		t = ">>>"
				)
				arg = AdditiveExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression AdditiveExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = MultiplicativeExpression()
		(
				(
						t = "+"
				|		t = "-"
				)
				arg = MultiplicativeExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression MultiplicativeExpression() :
{
		Expression e;
		Expression arg;
		Token t;
}
{
		e = UnaryExpression()
		(
				(
						t = "*"
				|		t = "/"
				|		t = "%"
				)
				arg = UnaryExpression()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), arg);
				}
		)*
		{
				return e;
		}
}

Expression UnaryExpression() :
{
		Expression e;
		Token t;
}
{
		(
				(
						t = "~"
				|		t = "+"		
				|		t = "-"
				|		t = "!"
				)
				e = SimpleExpr1()
				{
						e = new MethodCall(t, e, new Identifier(t,t.image), new UnitLiteral(ASTNode.DEFAULT_TOKEN));
				}
		|		e = SimpleExpr1()
		)
		{
				return e;
		}
}


Stmt LocalVarDecl() :
{
		Specifier spec;
		Identifier id;
		Expression e;
		Type type = Type.EMPTY;
}
{
		(
				spec = Specifier()
		)
		( LOOKAHEAD( Type() ) type = Type() id = Identifier() | id = Identifier() ) 
		<EQUALS> e = Expr() //local var declarations must be initialized
		{
			return new VarDecl(spec.getToken(), spec, type, id, e);
		}
}

Stmt LocalStateValDecl() :
{
        Token t;
        Identifier id;
        State st;
}
{
        (
            t = < STATEVAL > id = Identifier() st = StateBinding()
        )
        {
            return new LocalStateValDecl(t, id, st);
        }
}

List <Case> CaseList() :
{
		Token t,caseToken;
		Expression body;
		List < Case > cl = new ArrayList < Case > ();
		QualifiedIdentifier qi;
}
{
		(
				LOOKAHEAD(2)
				caseToken = < CASE > qi = QualifiedIdentifier()
				body = BlockExpression()
				{
				    cl.add(new PatternCase(caseToken, qi, body)); // no bound variable	
				}
		)*
		[
				caseToken = < DEF > body = BlockExpression()
				{
						cl.add(new DefaultCase(caseToken, body));
				}
		]
		{
				return cl;
		}
}

Identifier IdOrOperator() :
{
	Identifier id;
}{
	id = Identifier()  { return id; }
 |  id = Operator()    { return id; }
    
}

List<Expression> ExprList() :
{
		Expression e, nextExp;
		List < Expression > expList = new ArrayList < Expression > ();
}
{
	e = Expr()
	{
		expList.add(e);
	}
	(
		< COMMA > nextExp = Expr()
		{
			expList.add(nextExp);
		}
	)*
	{
		return expList; //foldToPairs(expList);
	}
}

Identifier Operator() :
{
		Token op;
}
{
		(
				op = < QST >
		|		op = < COLON >
		|		op = < OR >
		|		op = < AND >
		|		op = < IOR >
		|		op = < XOR >
		|		op = < BITAND >
		|		op = < EQ >
		|		op = < NEQ >
		|		op = < GT >
		|		op = < LT >
		|		op = < GEQ >
		|		op = < LEQ >
		|		op = < LSHIFT >
		|		op = < MARROW >
		|		op = < RUNSIGNEDSHIFT >
		|		op = < PLUS >
		|		op = < MINUS >
		|		op = < STAR >
		|		op = < SLASH >
		|		op = < PERCENT >
		|		op = < BANG >
		|		op = < TILDE >
		
		|		op = < OP > /* User defined operator */
		)
		{
				return new Identifier(op, op.image);
		}}

Map<Identifier, ArgSpec> Environment() : {
    Identifier envVar;
    ArgSpec envType; 
    Map<Identifier, ArgSpec> env = new HashMap<Identifier, ArgSpec>();
}{
    <LBRACK> 
    envType = ArgSpec() envVar = Identifier() { env.put(envVar, envType); }
    ( 
        <COMMA> envType = ArgSpec() envVar = Identifier() 
            { env.put(envVar, envType); } 
    )*
    <RBRACK>
    { return env; }
}

Expression Function() :
{
		Token t;
		List<Arg> argList = new ArrayList<Arg>();
		List<MetaArgSpec> metaArgsSpec = new ArrayList<MetaArgSpec>();
		Map<Identifier, ArgSpec> env = new HashMap<Identifier, ArgSpec>();
		Expression body;
}
{
		t = <FN> [metaArgsSpec = MetaArgsSpec(true)] <LPAREN> [argList = DeclArgs()] <RPAREN>
		   [ env = Environment() ]<DARROW> body = Expr()
		{
			return new Lambda(t, metaArgsSpec, argList, env, body);
		}
}

Expression Literal() :
{
		Token t;
}
{
		t = < STRING_LITERAL >
		{
				return new StringLiteral(t, t.image.substring(1, t.image.length() - 1));
		}
|		t = < INTEGER >
		{
		        return new IntLiteral(t, Integer.decode(t.image));     
		}
|       t = <  FLOATING_POINT_LITERAL >
        {                return new DoubleLiteral(t, Double.valueOf(t.image));
        }
|		t = < UNIT >
		{
				return new UnitLiteral(t);
		}
}
