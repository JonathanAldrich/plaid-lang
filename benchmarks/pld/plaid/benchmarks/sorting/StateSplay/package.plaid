package plaid.benchmarks.sorting.StateSplay;

import plaid.collections.makeArray;
import java.util.Random;

state Node = {
	var value;
} with TreePart with RootType

state TreePart {
	method add(elem);
	method find(elem);
	method delete(elem);
}

state RootType = {}

state Root case of RootType {
	var tree;
}

state NotRoot case of RootType {
	var parent;
}

state Splay {
	method add(elem);
}

state EmptySplay case of Splay {
	method add(elem) {
		//this <- InitBST;
		this.root = new Node { var value = elem; } with Root { var tree = this; } with Leaf;
	}
}

state InitSplay case of Splay {
	var root = new Leaf { var value = 0; };
	
	method add(elem) {
		this.root.add(elem);
	}
	
	method find(elem) {
		this.root.find(elem);
	}
	
	method delete(elem) {
		this.root.delete(elem);
	}
}

method benchmark(runner) {
	val size = 5000;
	val elems = makeArray(size);
	val tree = new EmptySplay;
	val rand = Random.new();
	var i = 0;
	nativeWhile{i < size} {
		val elem = rand.nextInt();
		elems.set(i, elem);
		i = i + 1;
	};
	i = 0;
	runner.startTimer();
	nativeWhile{i < size} {
		tree.add(elems.get(i));
		i = i + 1;
	};
	i = 0;
	nativeWhile{i < size} {
		tree.delete(elems.get(i));
		i = i + 1;
	};
	runner.stopTimer();
}