package plaid.benchmarks.sorting.StateSplay;

state RightBranch case of TreePart {
    var right = unit;
    
    method add(elem) {
        match (elem > this.value) {
            case True {
                this.right.add(elem);
            }
            case False {
                this <- Branch;
                this.left = new Node { var value = elem; } with Leaf with NotRoot { var parent = this; };
            }
        };
    }
    
    method delete(elem) {
        match(this.value == elem) {
            case True {
                this.deleteSelf();
            }
            case False {
                match (elem > this.value) {
					case False {
					}
                    case True {
                        this.right.delete(elem);
                    }
                }
            }
        }
    }
    
    method find(elem) {
        match(this.value == elem) {
            case True {
                True;
            }
            case False {
                this.right.find(elem);
            }
        }
    }
    
    method deleteChild(child) {
        match (child.value == this.right.value) {
            case True {
				child.parent = unit;
                this <- Leaf;
            }
            case False {
            }
        }
    }
    
    method deleteChildReplace(child, replacement) {
        match (child.value == this.right.value) {
            case True {
				replacement.parent = this;
                this.right = replacement;
            }
            case False {
            }
        }
    }
    
    method deleteSelf() {
        match (this) {
            case Root {
                this.tree.root = this.right;
                this.right <- Root { var tree = this.tree; }
            }
            case NotRoot {
                this.parent.deleteChildReplace(this, this.right);
            }
        }
    }
}