package plaid.benchmarks.sorting.ShellSort;

import plaid.collections.makeArray;

method main(runner) {

	val size = runner.getProperty("nElems");
	val randGen = runner.getProperty("Random");
	val elems = makeArray(size);
	var i = 0; 
	nativeWhile {i < size} {
		elems.set(i, randGen.nextInt());
		i = i+1;
	};
	val gaps = makeArray(8);
	gaps.set(0, 701);
	gaps.set(1, 301);
	gaps.set(2, 132);
	gaps.set(3, 57);
	gaps.set(4, 23);
	gaps.set(5, 10);
	gaps.set(6, 4);
	gaps.set(7, 1);
	runner.startTimer();
	ShellSort(elems, size, gaps, 8);
	runner.stopTimer();
}

method ShellSort(elements, elementsN, gaps, gapsN) {
	var gapN = 0;
	nativeWhile{gapN < gapsN}{
		var gap = gaps.get(gapN);
		var i = gap;		
		nativeWhile{i < elementsN}{
			var temp = elements.get(i);
			var j = i;
			var again = True;
			nativeWhile{j >= gap && again}{
				again= match(elements.get(j-gap) > temp) {
					case True {
						elements.set(j, elements.get(j - gap));
						j = j- gap;
						True;
					}
					case False {
						False;
					}
				};
			};
			
			elements.set(j, temp);
			i = i+1;
		};
		gapN = gapN+1;
    };
}