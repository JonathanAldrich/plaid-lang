package plaid.benchmarks.sorting.StateBST;

state Branch case of TreePart {
    var left = unit;
    var right = unit;
    
    method add(elem) {
        match (elem > this.value) {
            case True {
                this.right.add(elem);
            }
            case False {
                this.left.add(elem);
            }
        };
    }
    
    method find(elem) {
        match(this.value == elem) {
            case True {
                True;
            }
            case False {
                match (this.right.find(elem)) {
                    case True {
                        True;
                    }
                    case False {
                        this.left.find(elem);
                    }
                }
            }
        }
    }
    
    method deleteChild(child) {
        match (child.value > this.value) {
            case True {
                match (this.right.value == child.value) {
                    case True {
                        this <- LeftBranch;
                    }
                    case False {
                    }
                }
            }
            case False {
                match (this.left.value == child.value) {
                    case True {
                        this <- RightBranch;
                    }
                    case False {
                    }
                }
            }
        }
    }
    
    method deleteChildReplace(child, replacement) {
        match (child.value > this.value) {
            case True {
                match (this.right.value == child.value) {
                    case True {
                        this.right = replacement;
                    }
                    case False {
                    }
                }
            }
            case False {
                match (this.left.value == child.value) {
                    case True {
                        this.left = replacement;
                    }
                    case False {
                    }
                }
            }
        }
    }
    
    method delete(elem) {
        match(this.value == elem) {
            case True {
                this.deleteSelf();
            }
            case False {
                match (elem > this.value) {
                    case True {
                        this.right.delete(elem);
                    }
                    case False {
                        this.left.delete(elem);
                    }
                }
            }
        }
    }
    
    method deleteSelf() {
        this.value = this.findDeleteSmallest(this.right, this).value;
    }
    
    method findDeleteSmallest(element, parent) {
        match (element) {
            case LeftBranch {
                this.findDeleteSmallest(element.left, element);
            }
            case Branch {
                this.findDeleteSmallest(element.right, element);
            }
            default {
                element.deleteSelf();
                element;
            }
        }
    }
}