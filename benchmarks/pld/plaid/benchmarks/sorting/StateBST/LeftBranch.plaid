package plaid.benchmarks.sorting.StateBST;

state LeftBranch case of TreePart {
    var left = unit;
    
    method add(elem) {
        match (elem > this.value) {
            case True {
                this <- Branch;
                this.right = new Node { var value = elem; } with Leaf with NotRoot { var parent = this; };
            }
            case False {
                this.left.add(elem);
            }
        };
    }
    
    method find(elem) {
        match(this.value == elem) {
            case True {
                True;
            }
            case False {
                this.left.find(elem);
            }
        }
    }
    
    method delete(elem) {
        match(this.value == elem) {
            case True {
                this.deleteSelf();
            }
            case False {
                match (elem > this.value) {
                    case False {
                        this.left.delete(elem);
                    }
                }
            }
        }
    }
    
    method deleteChild(child) {
        match (child.value == this.left.value) {
            case True {
                this <- Leaf;
            }
            case False {
            }
        }
    }
    
    method deleteChildReplace(child, replacement) {
        match (child.value == this.left.value) {
            case True {
                this.left = replacement;
            }
            case False {
            }
        }
    }
    
    method deleteSelf() {
        match (this) {
            case Root {
                this.tree.root = this.left;
                this.left <- Root;
                this.left.tree = this.tree;
            }
            case NotRoot {
                this.parent.deleteChildReplace(this, this.left);
            }
        }
    }
}