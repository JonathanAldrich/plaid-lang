package plaid.benchmarks.sorting.StateBST;

import plaid.collections.makeArray;

state Node = {
	var value;
	
} with TreePart with RootType

state TreePart {
	method add(elem);
	method find(elem);
	method delete(elem);
}

state RootType = {}

state Root case of RootType {
	method notRoot(parent) {
		this <- NotRoot {var parent = parent;};
	}
	var tree;
}

state NotRoot case of RootType {
	method toRoot(tree) {
		this <- Root { var tree = tree; };
	}
	var parent;
}

state BST {
	method add(elem);
}

state EmptyBST case of BST {

	method add(elem) {
		this <- InitBST;
		this.root = new Node { var value = elem; } with Root { var tree = this; } with Leaf;
	}
}

state InitBST case of BST {
	var root = new Leaf { var value = 0; };
	
	method empty() {
		this <- EmptyBST;
	}
	
	method add(elem) {
		this.root.add(elem);
	}
	
	method find(elem) {
		this.root.find(elem);
	}
	
	method delete(elem) {
		this.root.delete(elem);
	}
}

method benchmark(runner) {
	val size = runner.getProperty("nElems");
	val elems = makeArray(size);
	val tree = new EmptyBST;
	val rand = runner.getProperty("Random");
	var i = 0;
	nativeWhile{i < size} {
		val elem = rand.nextInt();
		elems.set(i, elem);
		i = i + 1;
	};
	i = 0;
	runner.startTimer();
	nativeWhile{i < size} {
		tree.add(elems.get(i));
		i = i + 1;
	};
	i = 0;
	nativeWhile{i < size} {
		tree.delete(elems.get(i));
		i = i + 1;
	};
	runner.stopTimer();
}

method main() {
	val tree = new EmptyBST;
	tree.add(5);
	tree.add(6);
	tree.add(4);
	tree.add(3);
	tree.add(2);
	tree.add(7);
}