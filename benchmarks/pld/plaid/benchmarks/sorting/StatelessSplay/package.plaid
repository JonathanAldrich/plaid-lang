package plaid.benchmarks.sorting.StatelessSplay;

import plaid.collections.makeArray;

state Node {
	var value;
	var parent;
	var tree;
	var left = new Empty;
	var right = new Empty;
	var payload;
	
	method add(elem, value) {
		match (elem > this.value) {
			case True {
				match (this.right) {
					case Node {
						this.right.add(elem, value);
					}
					case Empty {
						this.right = new Node { var value = elem; var parent = this; var tree = this.tree; var payload = value; };
						this.right.splay();
					}
				};
			}
			case False {
				match (this.left) {
					case Node {
						this.left.add(elem, value);
					}
					case Empty {
						this.left = new Node { var value = elem; var parent = this; var tree = this.tree; var payload = value; };
						this.left.splay();
					}
				};
			}
		};
	}
	
	method find(elem) {
		match (elem > this.value) {
			case True {
				match (this.right) {
					case Node {
						this.right.contains(elem);
					}
					case Empty {
						False;
					}
				};
			}
			case False {
				match (elem == this.value) {
					case True {
						this.splay();
						this;
					}
					case False {
						match (this.left) {
							case Node {
								this.left.contains(elem);
							}
							case Empty {
								False;
							}
						};
					}
				};
			}
		};
	}
	
	method contains(elem) {
		match (elem > this.value) {
			case True {
				match (this.right) {
					case Node {
						this.right.contains(elem);
					}
					case Empty {
						False;
					}
				};
			}
			case False {
				match (elem == this.value) {
					case True {
						this.splay();
						True;
					}
					case False {
						match (this.left) {
							case Node {
								this.left.contains(elem);
							}
							case Empty {
								False;
							}
						};
					}
				};
			}
		};
	}
	
	method deleteMin() {
		match (this.left) {
			case Node {
				this.left.deleteMin();
			}
			case Empty {
				match (this.parent.right == this) {
					case True {
						this.parent.right = new Empty;
						this;
					}
					case False {
						this.parent.left = new Empty;
						this;
					}
				};
			}
		};
	}
	
	method swapInPlace(swap) {
		match (this.parent.right == this) {
			case True {
				this.parent.right = swap;
			}
			case False {
				this.parent.left = swap;
			}
		};
		match (swap) {
			case Node {
				swap.parent = this.parent;
			}
		};
	}
	
	method replaceParentChild(node) {
		match (this.parent) {
			case Node {
				match (this.value > this.parent.value) {
					case True {
						this.parent.right = node;
					}
					case False {
						this.parent.left = node;
					}
				};
				match (node) {
					case Node {
						node.parent = this.parent;
					}
				};
				this.parent.splay();
			}
			case Empty {
				match (node) {
					case Node {
						node.parent = new Empty;
					}
				};
				this.tree.root = node;
			}
		};
	}
	
	method deleteIfNode(element) {
		match (element) {
			case Node {
				this.right.delete(element);
			}
		};
	}
	method findDeleteMinNode() {
		match (this.left) {
			case Node {
				this.left.findDeleteMinNode();
			}
			case Empty {
				this.replaceParentChild(this.right);
				this;
			}
		};
	}
	method delete(elem) {
		match (elem) {
			case Node {
				match (this.value == elem) {
					case True {
						match (this.left) {
							case Node {
								match (this.right) {
									case Node {
										this.value = this.right.findDeleteMinNode().value;
										match (this.parent) {
											case Node {
												this.splay();
											}
											default {}
										}
									}
									case Empty {
										this.replaceParentChild(this.left);
									}
								};
							}
							case Empty {
								match (this.right) {
									case Node {
										this.replaceParentChild(this.right);
									}
									case Empty {
										this.replaceParentChild(new Empty);
									}
								};
							}
						};
					}
					case False {
						match (elem > this.value) {
							case True {
								this.deleteIfNode(this.right);
							}
							case False {
								this.deleteIfNode(this.left);
							}
						};
					}
				};
			}
			default {
			}
		};
	}
	
	method splay() {
		var dummy = new Node;
		var left = dummy;
		var right = left;
		var current = this.tree.root;
		var flag = True;
		nativeWhile{flag == True}{
			match (this.value < current.value) {
				case True {
					match (current.left) {
						case Empty {
							flag = False;
						}
						case Node {
							match (this.value < current.left.value) {
								case True {
									// Rotate right.
									var tmp = current.left;
									current.left = tmp.right;
									tmp.right = current;
									current = tmp;
									match (current.left) {
										case Empty {
											flag = False;
										}
										default {}
									}
								}
								default {
								}
							};
							match (flag) {
								case True {
									right.left = current;
									right = current;
									current = current.left;
									// Link right.
								}
								default {}
							};
						}
					}
				} 
				case False {
					match (this.value > current.value) {
						case True {
							match (current.right) {
								case Empty {
									flag = False;
								}
								case Node {
									match (this.value > current.right.value) {
										case True {											
											// Rotate left.
											var tmp = current.right;
											current.right = tmp.left;
											tmp.left = current;
											current = tmp;
											match (current.right) {
												case Empty {
													flag = False;
												}
												default {}
											}
										}
										default {
										}
									};
									match (flag) {
										case True {
											// Link left.
											left.right = current;
											left = current;
											current = current.right;
										}
										default {}
									};
								}
							}
						}
						case False {
							flag = False;
						}
					}
				}
				default {
					flag = False;
				}
			}
		};
		left.right = current.left;
		right.left = current.right;
		current.left = dummy.right;
		current.right = dummy.left;
		this.tree.root = current;
	}
}

state Empty {
}

state SplayTree {
	var root = new Empty;

	method add(elem) {
		match(this.root) {
			case Empty {
				this.root = new Node { var value = elem; var tree = this; }
			}
			case Node {
				this.root.add(elem, unit);
			}
		};
	}
	method find(elem) {
		match(this.root) {
			case Empty {
				False;
			}
			case Node {
				this.root.contains(elem);
			}
		};
	}
	method delete(elem) {
		match (this.root) {
			case Empty {
			}
			case Node {
				this.root.delete(elem);
			}
		}
	}
	
	method print() {
		this.print(this.root, 0);
		java.lang.System.out.println();
	}
	method print(elem, n) {
		match (elem) {
			case Empty {
			}
			case Node {
				java.lang.System.out.print("{");
				this.print(elem.left, n+1);
				java.lang.System.out.print(","+elem.value.toString()+",");
				this.print(elem.right, n+1);
				java.lang.System.out.print("}");
			}
		}
	}
}

method benchmark(handle) {
	val splayTree = new SplayTree;
	val size = handle.getProperty("nElems");
	val keys = makeArray(size);
	val rand = handle.getProperty("Random");
	var i = 0;
	nativeWhile{i < size} {
		val elem = rand.nextInt();
		keys.set(i, i);
		i = i + 1;
	};
	i = 0;
	handle.startTimer();
	nativeWhile{i < size}{
		splayTree.add(keys.get(i));
		i = i + 1;
	};
	var j = 0;
	nativeWhile{j < 10}{
		nativeWhile{i < size}{
			splayTree.find(keys.get(i));
			i = i + 1;
		};
		i = 0;
		j=j+1;
	};
	i = 0;
	nativeWhile{i < size}{
		splayTree.delete(keys.get(i));
		i = i + 1;
	};
	handle.stopTimer();
}