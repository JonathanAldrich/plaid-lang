package plaid.V8Benchmarks.richards;

/**
 * The task is running and is currently scheduled.
 */
var STATE_RUNNING = 0;

/**
 * The task has packets left to process.
 */
var STATE_RUNNABLE = 1;

/**
 * The task is not currently running.  The task is not blocked as such and may
* be started by the scheduler.
 */
var STATE_SUSPENDED = 2;

/**
 * The task is blocked and cannot be run until it is explicitly released.
 */
var STATE_HELD = 4;

var STATE_SUSPENDED_RUNNABLE = STATE_SUSPENDED | STATE_RUNNABLE;
var STATE_NOT_HELD = ~STATE_HELD;

var NEWNONE = new None;


var COUNT = 1000;

/**
 * These two constants specify how many times a packet is queued and
 * how many times a task is put on hold in a correct run of richards.
 * They don't have any meaning a such but are characteristic of a
 * correct run so if the actual queue or hold count is different from
 * the expected there must be a bug in the implementation.
 **/
var EXPECTED_QUEUE_COUNT = 2322;
var EXPECTED_HOLD_COUNT = 928;


var ID_IDLE       = 0;
var ID_WORKER     = 1;
var ID_HANDLER_A  = 2;
var ID_HANDLER_B  = 3;
var ID_DEVICE_A   = 4;
var ID_DEVICE_B   = 5;
var NUMBER_OF_IDS = 6;

var KIND_DEVICE   = 0;
var KIND_WORK     = 1;

method makeRichards(){
  var Richards = new BenchmarkSuite;
  var arr = new Array;
  var bm = new Benchmark;
  bm.setData("Richards",runRichards);
  arr.push(bm);
  Richards.setData("Richards", 35302, arr);
}


/**
 * The Richards benchmark simulates the task dispatcher of an
 * operating system.
 **/
method runRichards() {
  
  var scheduler = new Scheduler;
  scheduler.setBlocks();
  scheduler.addIdleTask(ID_IDLE, 0, NEWNONE, COUNT);

  printLine("here");
  var queue = new Packet;
  queue.setData("first",NEWNONE, ID_WORKER, KIND_WORK);
  queue.printRep();
  printLine("here2");
  var queue2 = new Packet;
  queue2.setData("second",queue,  ID_WORKER, KIND_WORK);
  printLine("here3");
  queue2.printRep();
  printLine("here4");
  scheduler.addWorkerTask(ID_WORKER, 1000, queue2);
  printLine("here5");

  var queue3 = new Packet;
  queue3.setData("third",NEWNONE, ID_DEVICE_A, KIND_DEVICE);
  queue3.printRep();
  var queue4 = new Packet;
  queue4.setData("fourth",queue3,  ID_DEVICE_A, KIND_DEVICE);
  queue4.printRep();
  var queue5 = new Packet;
  queue5.setData("fifth",queue4,  ID_DEVICE_A, KIND_DEVICE);
  queue5.printRep();
  scheduler.addHandlerTask(ID_HANDLER_A, 2000, queue5);

  var queue6 = new Packet;
  queue6.setData("sixth",NEWNONE, ID_DEVICE_B, KIND_DEVICE);
  queue6.printRep();
  var queue7 = new Packet;
  queue7.setData("seventh",queue6,  ID_DEVICE_B, KIND_DEVICE);
  queue7.printRep();
  var queue8 = new Packet;
  queue8.setData("eighth",queue7,  ID_DEVICE_B, KIND_DEVICE);
  queue8.printRep();
  scheduler.addHandlerTask(ID_HANDLER_B, 3000, queue8);

  scheduler.addDeviceTask(ID_DEVICE_A, 4000, NEWNONE);

  scheduler.addDeviceTask(ID_DEVICE_B, 5000, NEWNONE);

  scheduler.schedule();

  if (scheduler.queueCount != EXPECTED_QUEUE_COUNT ||
      scheduler.holdCount != EXPECTED_HOLD_COUNT) {
    var msg =
        "Error during execution: queueCount = " + scheduler.queueCount +
        ", holdCount = " + scheduler.holdCount + ".";
    printLine(msg);
  }
}

/**
 * A scheduler can be used to schedule a set of tasks based on their relative
 * priorities.  Scheduling is done by maintaining a list of task control blocks
 * which holds tasks and the data queue they are processing.
 * @constructor
 */
state Scheduler {
  var queueCount = 0;
  var holdCount = 0;
  var blocks;
  var list = NEWNONE;
  var currentTcb = NEWNONE;
  var currentId = NEWNONE;
  
method setBlocks(){
  	this.blocks = java.util.ArrayList.new();
  	this.blocks.ensureCapacity(NUMBER_OF_IDS);
}

/**
 * Add an idle task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {int} count the number of times to schedule the task
 */
method addIdleTask(id, priority, queue, count) {
  var it = new IdleTask;
  it.setData(this,1,count);
  this.addRunningTask(id, priority, queue, it);
}

/**
 * Add a work task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addWorkerTask(id, priority, queue) {
  var wt = new WorkerTask;
  wt.setData(this, ID_HANDLER_A, 0);
  this.addTask(id, priority, queue, wt);
}

/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addHandlerTask(id, priority, queue) {
  var ht = new HandlerTask;
  ht.setData(this);
  this.addTask(id, priority, queue, ht);
}

/**
 * Add a handler task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 */
method addDeviceTask(id, priority, queue) {
  var dt = new DeviceTask;
  dt.setData(this);
  this.addTask(id, priority, queue, dt)
}

/**
 * Add the specified task and mark it as running.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */
method addRunningTask(id, priority, queue, task) {
  this.addTask(id, priority, queue, task);
  this.currentTcb.setRunning();
}

/**
 * Add the specified task to this scheduler.
 * @param {int} id the identity of the task
 * @param {int} priority the task's priority
 * @param {Packet} queue the queue of work to be processed by the task
 * @param {Task} task the task to add
 */
method addTask(id, priority, queue, task) {
  this.currentTcb = new TaskControlBlock;
  printLine("adding task"+" "+this.list+" "+id+" "+priority+" "+queue+" "+task);
  printLine("---");
  printLine("this.list: "+this.list);
  printLine("id: "+id);
  printLine("priority: "+priority);
  printLine("queue: "+queue);
  printLine("task: "+task);
  this.currentTcb.setData(this.list, id, priority, queue, task);
  printLine("---");
  this.list = this.currentTcb;
  printLine(id);
  this.blocks.add(id,this.currentTcb);
}

/**
 * Execute the tasks managed by this scheduler.
 */
method schedule() {
  this.currentTcb = this.list;
  printLine("list: "+this.list);
  while ({this.currentTcb != NEWNONE}) {
    printLine("while loop in schedule");
    ifElse (this.currentTcb.isHeldOrSuspended()) {
      printLine("held");
      this.currentTcb = this.currentTcb.link;
    }
    {
      printLine("not held");
      this.currentId = this.currentTcb.id;
      this.currentTcb = this.currentTcb.run();
    };
    printLine(this.currentTcb);
  }
}

/**
 * Release a task that is currently blocked and return the next block to run.
 * @param {int} id the id of the task to suspend
 */
method release(id) {
  var tcb = this.blocks.get(id);
  printLine("1");
  match(tcb) {
  	case None {
  		tcb;
  	}
  	default{
	  	tcb.markAsNotHeld();
	    ifElse (tcb.priority > this.currentTcb.priority) {
	      tcb;
	    }
	    {
	      this.currentTcb;
	    }
  	}
  };
}

/**
 * Block the currently executing task and return the next task control block
 * to run.  The blocked task will not be made runnable until it is explicitly
 * released, even if new work is added to it.
 */
method holdCurrent() {
  this.holdCount=this.holdCount+1;
  this.currentTcb.markAsHeld();
  this.currentTcb.link;
}

/**
 * Suspend the currently executing task and return the next task control block
 * to run.  If new work is added to the suspended task it will be made runnable.
 */
method suspendCurrent() {
  this.currentTcb.markAsSuspended();
  this.currentTcb;
}

/**
 * Add the specified packet to the end of the worklist used by the task
 * associated with the packet and make the task runnable if it is currently
 * suspended.
 * @param {Packet} packet the packet to add
 */
method queue(packet) {
  var t = this.blocks.get(packet.id);
  printLine("2");
  match(t) {
  	case None {
  		t;
  	}
  	default{
	    this.queueCount=this.queueCount+1;
	    packet.link = NEWNONE;
	    packet.id = this.currentId;
	    t.checkPriorityAdd(this.currentTcb, packet);
  	}
  };
}

}
//End Scheduler



/**
 * A task control block manages a task and the queue of work packages associated
 * with it.
 * @param {TaskControlBlock} link the preceding block in the linked block list
 * @param {int} id the id of this block
 * @param {int} priority the priority of this block
 * @param {Packet} queue the queue of packages to be processed by the task
 * @param {Task} task the task
 * @constructor
 */
state TaskControlBlock {
  var link;
  var id;
  var priority;
  var queue;
  var task;
  var currState;

method setData(link, id, priority, queue, task){
  this.link = link;
  this.id = id;
  this.priority = priority;
  this.queue = queue;
  this.task = task;
  printLine("2.5");
  match(queue){
  	case None{
    	printLine("change to suspended");
    	this.currState = STATE_SUSPENDED;
  	}
  	default{
  		printLine(STATE_SUSPENDED);
    	printLine("change to suspended_runnable");
    	this.currState = STATE_SUSPENDED_RUNNABLE;
  	}
  };
  printLine("I'm here");
}

method setRunning() {
  printLine("change to running");
  this.currState = STATE_RUNNING;
}

method markAsNotHeld() {
  printLine("change to not_held");
  this.currState = this.currState & STATE_NOT_HELD;
}

method markAsHeld() {
  printLine("change to held");
  this.currState = this.currState | STATE_HELD;
}

method isHeldOrSuspended() {
  printLine("3");
  (this.currState & STATE_HELD) != 0 || (this.currState == STATE_SUSPENDED);
}

method markAsSuspended() {
    printLine("change to suspended");
  this.currState = this.currState | STATE_SUSPENDED;
}

method markAsRunnable() {
    printLine("change to runnable");
  this.currState = this.currState | STATE_RUNNABLE;
}

/**
 * Runs this task, if it is ready to be run, and returns the next task to run.
 */
method run() {
  //error might be here???  returning wrong link?
  var packet = "";
    //printLine("IN RUN -----------");
    //this.queue.printRep();
    //this.queue.link.printRep();
    //this.queue.link.link.printRep();
    //printLine("END RUN -----------");
  printLine("4");
  ifElse (this.currState == STATE_SUSPENDED_RUNNABLE) {
    packet = this.queue;
    this.queue = packet.link;
    printLine("5");  
	match(this.queue) {
	  	case None {
      		printLine("change to running");
      		this.currState = STATE_RUNNING;
	  	}
	  	default{
      		printLine("change to runnable");
      		this.currState = STATE_RUNNABLE;
	  	}
	};
  }
  {
    packet = NEWNONE;
  };
  this.task.run(packet);
}

/**
 * Adds a packet to the worklist of this block's task, marks this as runnable if
 * necessary, and returns the next runnable object to run (the one
 * with the highest priority).
 */
method checkPriorityAdd(task, packet) {
  var toReturn=task;
  printLine("6");
  match(this.queue) {
  	case None {
	    this.queue = packet;
	    this.markAsRunnable();
	    if (this.priority > task.priority){
	      toReturn=this;
	    }
  	}
  	default{
    	this.queue = packet.addTo(this.queue);
  	}
  };
  toReturn;
}

method toString() {
  "tcb { " + this.id +": " + this.task + "@" + this.currState + " }";
}

}
//ends TaskControlBlock

/**
 * An idle task doesn't do any work itself but cycles control between the two
 * device tasks.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed value that controls how the device tasks are scheduled
 * @param {int} count the number of times this task should be scheduled
 * @constructor
 */
state IdleTask {
  var scheduler;
  var v1;
  var count;

method setData(scheduler, v1, count) {
  this.scheduler = scheduler;
  this.v1 = v1;
  this.count = count;
}

method run(packet) {
  this.count=this.count - 1;
  var toReturn = "";
  printLine("7");
  ifElse (this.count == 0) {
  	printLine("1");
    toReturn = this.scheduler.holdCurrent();
  }
  {
  printLine("8");
    ifElse ((this.v1 & 1) == 0) {
  	  printLine("2");
      this.v1 = this.v1 >> 1;
      toReturn = this.scheduler.release(ID_DEVICE_A);
    }
    {
  	  printLine("3");
      this.v1 = (this.v1 >> 1) ^ 0xD008;
      toReturn = this.scheduler.release(ID_DEVICE_B);
    };
  };
  toReturn;
}

method toString() {
  "IdleTask";
}
}
//end IdleTask

/**
 * A task that suspends itself after each time it has been run to simulate
 * waiting for data from an external device.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */
state DeviceTask {
  var v1 = NEWNONE;
  var scheduler;

method setData(scheduler) {
  this.scheduler = scheduler;
}

method run (packet) {
  var toReturn="";
  printLine("9");
  match(packet) {
  	case None {
	  	printLine("10");  
		  match(this.v1) {
		  	case None {
	      		toReturn = this.scheduler.suspendCurrent();
		  	}
			default{
			    var v = this.v1;
			    this.v1 = NEWNONE;
			    toReturn = this.scheduler.queue(v);
		  	}
		  };
  	}
  	default{
    	this.v1 = packet;
    	toReturn = this.scheduler.holdCurrent();
  	}
  };
}

method toString() {
  "DeviceTask";
}
}
//end DeviceTask

/**
 * A task that manipulates work packets.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @param {int} v1 a seed used to specify how work packets are manipulated
 * @param {int} v2 another seed used to specify how work packets are manipulated
 * @constructor
 */
state WorkerTask {
  var scheduler;
  var v1;
  var v2;

method setData(scheduler, v1, v2) {
  this.scheduler = scheduler;
  this.v1 = v1;
  this.v2 = v2;
}

method run(packet) {
  var toReturn="";
  printLine("11");
  match(packet) {
  	case None {
    	toReturn = this.scheduler.suspendCurrent();
  	}
  	default{
	  	printLine("12");
	    ifElse (this.v1 == ID_HANDLER_A) {
	      this.v1 = ID_HANDLER_B;
	    }
	    {
	      this.v1 = ID_HANDLER_A;
	    };
	    packet.id = this.v1;
	    packet.a1 = 0;
	    var i=0;
	    while ({i < DATA_SIZE;}) {
	      this.v2=this.v2+1;
	      if (this.v2 > 26) {
	        this.v2 = 1;
	      };
	      packet.a2.set(i, this.v2);
	      i=i+1;
	    };
	    toReturn = this.scheduler.queue(packet);
  	}
  };
  toReturn;
}

method toString() {
  "WorkerTask";
}
}
//end WorkerTask

/**
 * A task that manipulates work packets and then suspends itself.
 * @param {Scheduler} scheduler the scheduler that manages this task
 * @constructor
 */
state HandlerTask{
  var scheduler;
  var v1;
  var v2;

method setData(scheduler) {
  this.scheduler = scheduler;
  this.v1 = NEWNONE;
  this.v2 = NEWNONE;
}

method run(packet) {
  //this might be where problem is.  returning wrong item?
  if (packet != NEWNONE) {
  printLine("13");
    ifElse (packet.kind == KIND_WORK) {
      this.v1 = packet.addTo(this.v1);
    }
    {
      this.v2 = packet.addTo(this.v2);
    };
  };
  var toReturn="";
  if (this.v1 != NEWNONE) {
    var count = this.v1.a1;
    var v="";
    ifElse (count < DATA_SIZE) {
      if (this.v2 != NEWNONE) {
        v = this.v2;
        this.v2 = this.v2.link;
        v.a1 = this.v1.a2.get(count);
        this.v1.a1 = count + 1;
  	    printLine("1");
        toReturn = this.scheduler.queue(v);
      }
    }
    {
      v = this.v1;
      this.v1 = this.v1.link;
  	  printLine("2");
      toReturn = this.scheduler.queue(v);
    };
  };
  printLine("14");
  if (toReturn==""){
  	printLine("3");
    toReturn = this.scheduler.suspendCurrent();
  };
  toReturn;
}

method toString() {
  "HandlerTask";
}
}
//end HandlerTask

/* --- *
 * P a c k e t
 * --- */

var DATA_SIZE = 4;

/**
 * A simple package of data that is manipulated by the tasks.  The exact layout
 * of the payload data carried by a packet is not importaint, and neither is the
 * nature of the work performed on packets by the tasks.
 *
 * Besides carrying data, packets form linked lists and are hence used both as
 * data and worklists.
 * @param {Packet} link the tail of the linked list of packets
 * @param {int} id an ID for this packet
 * @param {int} kind the type of this packet
 * @constructor
 */
state Packet {
  var name;
  var link;
  var id;
  var kind;
  var a1;
  var a2;

method printRep(){
  printLine("packet print rep: "+this.name+" "+this.link+" "+this.id+" "+this.kind+" "+this.a1+" "+this.a2);
}

method setData(name, link, id, kind) {
  this.name = name;
  this.link = link;
  this.id = id;
  this.kind = kind;
  this.a1 = 0;
  var temp = java.util.ArrayList.new();
  temp.ensureCapacity(DATA_SIZE);
  this.a2 = temp;
}

/**
 * Add this packet to the end of a worklist, and return the worklist.
 * @param {Packet} queue the worklist to add this packet to
 */
method addTo(queue) {
  this.link = NEWNONE;
  printLine("15");
  match(queue) {
  	case None {
  		this;
  	}
  	default{
	  var peek = queue;
	  var next = queue;
	  while ({peek != NEWNONE}) {
	    next = peek;
	    peek=next.link;
	  };
	  next.link = this;
	  queue;
  	}
  };
}

method toString() {
  "Packet";
}
}
//end Packet

method main(){
  runRichards();
}
