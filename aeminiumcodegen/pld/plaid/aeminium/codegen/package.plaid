package plaid.aeminium.codegen;

import plaid.ast.visitor.ASTViewer;
import plaid.ast.types.*;
import plaid.ast.*;

val integerStructuralType = new StructuralType {
	val typeAbbrevs = java.util.HashSet.new();
	val typeDecls = java.util.HashSet.new();
};

val immutableInteger = new PermType {
	val perm = new ImmutablePermission;
	val type = integerStructuralType;
};

val uniqueInteger = new PermType {
	val perm = new UniquePermission;
	val type = integerStructuralType;
};

method makeID(n) {
	new ID {
		val token = new None;
		val name = n;
	};
}

method makeCallee() {
	val calleeBody = new UnitLiteral {
		val token = new None;
	};

	val calleeArgTypes = new List { var head = new Nil; };
	calleeArgTypes.add(immutableInteger);
	val calleeArgNames = new List { var head = new Nil; };
	calleeArgNames.add(makeID("x"));
	
	val calleeMethodType = new MethodTypeDecl {
		val token = new None;
		val name = "callee";
		val retPermType = new Void;
		val argTypes = calleeArgTypes;
		val argNames = calleeArgNames;
	};
	
	new MethodDecl {
		val token = new None;
		val name = "callee";
		val body = calleeBody;
		val arg = new None;
		val abstractMethod = false;
		val methodType = calleeMethodType;
	};	
}

method makeCaller() {
	val callerBody = new UnannotatedLetBinding {
		val token = new None;
		val x = makeID("temp0");
		val exp = new Application {
			val token = new None;
			val f = makeID("callee");
			val arg = makeID("x");
		};
		val body = new Application {
			val token = new None;
			val f = makeID("callee");
			val arg = makeID("x");
		};
		val mutable = false;
	};
	
	val callerArgTypes = new List { var head = new Nil; };
	callerArgTypes.add(immutableInteger);
	val callerArgNames = new List { var head = new Nil; };
	callerArgNames.add(makeID("x"));
	
	val callerMethodType = new MethodTypeDecl {
		val token = new None;
		val name = "caller";
		val retPermType = new Void;
		val argTypes = callerArgTypes;
		val argNames = callerArgNames;
	};	
	
	new MethodDecl {
		val token = new None;
		val name = "caller";
		val body = callerBody;
		val arg = new None;
		val abstractMethod = false;
		val methodType = callerMethodType;
	};
}

method makeMain() {
	val mainBody = new Application {
		val token = new None;
		val f = new ID {
			val token = new None;
			val name = "caller";
		};
		val arg = new IntLiteral {
			val token = new None;
			val integer = 42;
		};
	};
	
	val mainMethodType = new MethodTypeDecl {
		val token = new None;
		val name = "main";
		val retPermType = new Void;
		val argTypes = new List { var head = new Nil; };
		val argNames = new List { var head = new Nil; };
	};

	new MethodDecl {
		val token = new None;
		val name = "main";
		val body = mainBody;
		val arg = new None;
		val abstractMethod = false;
		val methodType = mainMethodType;
	};
}

method buildParallelCallsExample() {
	val thePackageName = new List { var head = new Nil; };
	thePackageName.add("testInputs");
	thePackageName.add("parallelCalls");
	
	val theDecls = new List { var head = new Nil; };
	theDecls.add(makeMain());
	theDecls.add(makeCaller());
	theDecls.add(makeCallee());
	
	val theImports = new ImportList {
		val imports = new List { var head = new Nil; };
		val token = new None;
	};

	new CompilationUnit {
		val decls = theDecls;
		val packageName = thePackageName;
		val imports = theImports;
		val sourceFile = "parallelCalls.plaid";
	};
}


method main() {
	val myAST = buildParallelCallsExample();
	myAST.accept(new ASTViewer);
}