package plaid.aeminium.codegen;

import plaid.ast.visitor.ASTViewer;
import plaid.ast.*;
import plaid.typechecker.*;

method main() {
	val javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new("../typechecker/testInputs/fibonacci/package.plaid")));
	val translator = new ASTTranslator;
	val plaidAST = translator.translateAST(javaAST);
	val stTranslator = new StateTableBuilderVisitor;
	plaidAST.accept(stTranslator);
	stTranslator.stateTable.printTable();
	stTranslator.initialContext.printContext();
	
	// Bring AST to let normal form.
	plaidAST.accept(new LetNormalFormVisitor);
	
	//plaidAST.accept(new ASTViewer);
	
	// Run the type checking visitor.
	plaidAST.accept(new InitialTypechecker {
		val context = stTranslator.initialContext;
		val stateTable = stTranslator.stateTable;
	});
	// plaidAST.accept(new ASTViewer);
	
	
	val depAnalysis = new DependencyAnalysisVisitor;
	plaidAST.accept(depAnalysis);
	
	/*
	val codeGen = new AeminiumCodeGenVisitor;
	myAST.accept(codeGen);
	*/
}