package plaid.aeminium.codegen;

state TransitiveReduction {
	val reachabilities = java.util.HashMap.new();
	
	method removeTransitiveDependencies(astNode) {
		val predReach = java.util.HashSet.new();
		this.reachabilities.put(astNode.num, java.util.HashSet.new());
		
		var it = astNode.dependencies.value.iterator();
		while { it.hasNext(); } {
			val to = it.next().to;
			predReach.addAll(this.reachabilities.get(to.num));
		};
		
		val deps = java.util.HashSet.new();
		it = astNode.dependencies.value.iterator();
		while { it.hasNext(); } {
			val dep = it.next();
			if (!predReach.contains(dep.to.num)) {
				// Not reachable via predecessors
				deps.add(dep);
				this.reachabilities.get(astNode.num).add(dep.to.num);
			}
		};
		
		this.reachabilities.get(astNode.num).addAll(predReach);
				
		astNode.dependencies = new Some { val value = deps; };
	}
}