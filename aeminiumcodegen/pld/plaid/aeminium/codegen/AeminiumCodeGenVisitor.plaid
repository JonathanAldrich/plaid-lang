package plaid.aeminium.codegen;

import plaid.codegen.CodeGenVisitor;

state AeminiumCodeGenVisitor case of CodeGenVisitor {
	var lastNodeNum = -1;
	
	method emitAeminiumBodyHeader(name, astNode) {
		match (astNode.dependencies) {
			case Some {
				this.out.append("aeminium.runtime.Body b" + name + " = new aeminium.runtime.Body() {");
				this.out.append("public String toString() {");
				this.out.append("return \"" + name + "\";");
				this.out.append("}");
				this.out.append("public void execute(aeminium.runtime.Runtime rt, aeminium.runtime.Task current) {");
			}
			case None {
			}
		};
	}
	
	method emitAeminiumBodyFooter(name, astNode) {
		match (astNode.dependencies) {
			case Some {
				this.out.closeBlock();
				this.out.append("};");
				this.out.append("final aeminium.runtime.Task t" + name + " = aeminium.runtime.implementations.Factory.getRuntime().");
				this.out.append("createNonBlockingTask(b" + name + ", aeminium.runtime.Runtime.NO_HINTS);");
				
				val depIt = astNode.dependencies.value.iterator();
				ifElse (!depIt.hasNext()) {
					this.out.append("aeminium.runtime.implementations.Factory.getRuntime().schedule(t" + astNode.num + ", current, aeminium.runtime.Runtime.NO_DEPS);");
				} {
					this.out.append("java.util.Collection<aeminium.runtime.Task> deps" + astNode.num + " = new java.util.ArrayList<aeminium.runtime.Task>();");
					while { depIt.hasNext(); } {
						// TODO: Fix this.
						val dep = depIt.next();
						if (dep.to.num != 0) {
							this.out.append("deps" + astNode.num + ".add(t" + dep.to.num + ");");
						};
					};
					this.out.append("aeminium.runtime.implementations.Factory.getRuntime().schedule(t" + astNode.num + ", current, deps" + astNode.num + ");");
				};
			}
			case None {
			}
		};
	}


	method visitSplit(node) {
		this.emitAeminiumBodyHeader(node.num, node);
		this.lastNodeNum = node.num;
		this.emitAeminiumBodyFooter(node.num, node);
		
		node.body.accept(this);
	}
	
	method visitJoin(node) {
		this.emitAeminiumBodyHeader(node.num, node);
		this.lastNodeNum = node.num;
		this.emitAeminiumBodyFooter(node.num, node);
		
		node.body.accept(this);
	}
	
	override method visitUnitLiteral(node) {
		this.emitAeminiumBodyHeader(node.num, node);
		this.lastNodeNum = node.num;

		// TODO: Fix this.
		this.out.append("current.setResult(");
		this.out.unit2(); // Identical to unit(), but that's a reserved word
		this.out.append(");");
		
		this.emitAeminiumBodyFooter(node.num, node);
	}
	
	override method visitLetBinding(node) {
		this.emitAeminiumBodyHeader(node.num, node);
		this.lastNodeNum = node.num;
		
		val /* ID */ y = this.y;
	
		this.setLocation(node.token);
		this.out.declareFinalVar(this.out.plaidObjectType, node.x.name);
		
		this.y = node.x;
		node.exp.accept(this);

		if (!node.x.name.contains("$plaid")) {
			// set the immutability of the variable
			this.out.insertIntoScope(this.out.localScope, node.x.name, !node.mutable);
		};
		
		this.emitAeminiumBodyFooter(node.num, node);
		
		node.body.accept(this);
	}
	
	override method visitApplication(node) {
		this.emitAeminiumBodyHeader(node.num, node);
		this.lastNodeNum = node.num;
		
		val oldY = this.y;
		this.setLocation(node.token);
		var /* ID */ x = this.idgen.getId();
		var /* ID */ y = this.idgen.getId();
		var /* ID */ z = this.idgen.getId();
		var t = this.idgen.getId();
		this.out.declareFinalVar(this.out.plaidObjectType, x.name);
		this.out.declareFinalVar(this.out.plaidObjectType, y.name);
		this.out.declareFinalVar(this.out.plaidObjectType, z.name);
		this.out.declareFinalVar(this.out.plaidObjectType, t.name);
		
		this.y = x;
		node.f.accept(this);
		
		this.y = z;
		node.arg.accept(this);
		
		this.setLocation(node.token);
		this.out.assignToCall(t.name, x.name, z.name);
		
		this.out.append("if ((" + t.name + " instanceof plaid.runtime.models.map.PlaidJavaObjectMap) && ");
		this.out.append("(((plaid.runtime.models.map.PlaidJavaObjectMap) " + t.name + ").getJavaObject() instanceof aeminium.runtime.Task)) {");
		this.out.append("aeminium.runtime.Task retTask = (aeminium.runtime.Task) (((plaid.runtime.models.map.PlaidJavaObjectMap) " + t.name + ").getJavaObject());");
		this.out.append("aeminium.runtime.implementations.Factory.getRuntime().schedule(retTask, current, aeminium.runtime.Runtime.NO_DEPS);");
		this.out.append(y.name + " = (plaid.runtime.PlaidObject) retTask.getResult();");
		this.out.append("} else {");
		this.out.append(y.name + " = " + t.name + ";}");
		
		match (node.dependencies) {
			case Some {
				this.out.append("current.setResult(" + y.name + ");");
			}
			case None {
				this.out.append(oldY.name + " = " + y.name + ";");
			}
		};
		
		this.emitAeminiumBodyFooter(node.num, node);
	}

	override method visitMethodDecl(node) {
		val newName = this.jCodeGen.convertOpNames(node.name);
		java.lang.System.out.println("Generating code for method '" + newName + "'...");

		val freshImports = this.idgen.getId();
		
		val cc = plaid.compilerjava.CompilerConfiguration.new();
		cc.setPrettyPrint(true);
		cc.setDebugMode(true);
		cc.setAeminiumMode(true);
		cc.setOutputDir("testOutput/");
		this.out = this.jCodeGen.new(cc);
		
		val qid = new QI {val qid = this.packageName;};
		val thisMethod = newName + "_func";
		val thePackage = qid.toString();
		
		//package and needed imports
		this.out.declarePackage(thePackage);
		
		//annotation and class definition
		this.out.topMethodAnnotation(newName, thePackage);
		this.out.declarePublicClass(newName);
		this.out.openBlock(); //public class newName {

		//generate code to create the package scope with imports
		this.out.declarePublicStaticFinalVar("java.util.List<plaid.runtime.utils.Import>", freshImports.name);
		
		this.y = freshImports;
		this.imports.accept(this);

		this.out.declareGlobalScope(qid.toString(), freshImports.name);
		
		if (newName.equals("main")) {
			this.out.topLevelMain(newName + "_func");
		};

		this.out.methodAnnotation(newName);
		this.out.declarePublicStaticFinalVar(this.out.plaidMethodType, thisMethod);
		this.out.openStaticBlock(); // static {
		// add local scope so that the lambda creation works properly
		this.out.declareLocalScope(this.out.globalScope);
		match (node.arg) {
			case Some {
				this.out.assignToNewLambda(thisMethod, node.arg.value.name);
			}
			case None {
				this.out.assignToNewLambda(thisMethod, "NONE"); // FIXME
			}
		};
		
		ifElse (newName.equals("main")) {
			this.out.append("aeminium.runtime.Body bMain = new aeminium.runtime.Body() {");
			this.out.append("public String toString(){");
			this.out.append("return \"main\" ;");
			this.out.append("}");
			this.out.append("public void execute(aeminium.runtime.Runtime rt, aeminium.runtime.Task current) {");
			
			node.body.accept(this);
			
			this.out.append("current.setResult(t" + this.lastNodeNum + ".getResult());");
			this.out.closeBlock();
			this.out.append("};");
			this.out.append("aeminium.runtime.Task tMain = aeminium.runtime.implementations.Factory.getRuntime().");
			this.out.append("createNonBlockingTask(bMain, aeminium.runtime.Runtime.NO_HINTS);");
			this.out.append("aeminium.runtime.implementations.Factory.getRuntime().schedule(tMain, aeminium.runtime.Runtime.NO_PARENT, aeminium.runtime.Runtime.NO_DEPS);");
			this.out.append("return (plaid.runtime.PlaidObject) tMain.getResult();");
		} {
			this.emitAeminiumBodyHeader(newName, node);
			node.body.accept(this);
			// TODO: Fix this.
			this.out.append("current.setResult(t" + this.lastNodeNum + ".getResult());");
			this.out.closeBlock();
			this.out.append("};");
			this.out.append("final aeminium.runtime.Task t" + newName + " = aeminium.runtime.implementations.Factory.getRuntime().");
			this.out.append("createNonBlockingTask(b" + newName + ", aeminium.runtime.Runtime.NO_HINTS);");
			this.out.append("return plaid.runtime.PlaidRuntime.getRuntime().getClassLoader().packJavaObject(t" + newName + ");");
		};
		
		this.out.closeAnonymousDeclaration(); // }});
		
		this.out.closeBlock(); // }  (for static block)
		this.out.closeBlock(); // }  (for class declaration)
		
		plaid.compilerjava.util.FileGen.createOutputFile(newName, cc.getOutputDir(), this.out.formatFile(), qid.toDirectoryName());
	}
}