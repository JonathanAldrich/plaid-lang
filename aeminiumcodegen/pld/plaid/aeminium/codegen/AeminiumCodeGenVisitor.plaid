package plaid.aeminium.codegen;

import plaid.codegen.CodeGenVisitor;

state AeminiumCodeGenVisitor case of CodeGenVisitor {
	method printNodeList(name, nodeList) {
		java.lang.System.out.println("Method: " + name);
		nodeList.map(fn (n) => {
			java.lang.System.out.println(n.num);
			java.lang.System.out.println(n.astRef);
		});
		java.lang.System.out.println("--------------------------------");
	}
	
	override method visitMethodDecl(node) {
		val nodeCreator = new NodeCreator { val methodTypes = this.methodTypes; };
		val nodeList = nodeCreator.createNodes(node);
		printNodeList(node.name, nodeList);
		
		(new DependencyAnalysis).computeDependencies(nodeList);
	}
	
	method visitSplit(node) {
		node.body.accept(this);
	}
	
	method visitJoin(node) {
		node.body.accept(this);
	}
}