package plaid.aeminium.codegen;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.visitor.*;

state SplitJoinRemoveVisitor case of LeafVisitor {
	override method visitLetBinding(node) {
		val token = node.token;
		val x = node.x;
		val exp = node.exp;
		val body = node.body;
		val mutable = node.mutable;
		
		match (node.body) {
			case Split {
				node <- None;
				node <- UnannotatedLetBinding {
					val /*Token*/ token = token;
					val /*ID*/ x = x;
					val /*Expression*/ exp = exp;
					val /*Expression*/ body = body.body;
					val /*Boolean*/ mutable = mutable;
				};
				
				node.accept(this);
			}
			
			case Join {
				node <- None;
				node <- UnannotatedLetBinding {
					val /*Token*/ token = token;
					val /*ID*/ x = x;
					val /*Expression*/ exp = exp;
					val /*Expression*/ body = body.body;
					val /*Boolean*/ mutable = mutable;
				};
				
				node.accept(this);
			}
			
			default {
				node.body.accept(this);
			}
		};
	}
}