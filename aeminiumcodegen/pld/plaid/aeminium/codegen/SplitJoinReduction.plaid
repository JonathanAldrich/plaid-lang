package plaid.aeminium.codegen;

state SplitJoinReduction {
	method reduceDependencies(astNode) {
		val newDeps = java.util.HashSet.new();
		val it = astNode.dependencies.value.iterator();
		
		while { it.hasNext(); } {
			// If astNode depends on a Split or Join, replace this dependency
			// by all dependencies of the Split/Join node in question.
			val dep = it.next();
			val depNode = dep.to;
			
			match (depNode) {
				case Split {
					newDeps.addAll(depNode.dependencies.value);
				}
				
				case Join {
					newDeps.addAll(depNode.dependencies.value);
				}
				
				default {
					newDeps.add(dep);
				}
			};
		};
		
		astNode.dependencies = new Some { val value = newDeps; };
	}
}