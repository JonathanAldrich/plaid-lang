package plaid.aeminium.codegen.testcases;

import plaid.ast.types.*;
import plaid.ast.*;

state FibonacciMatch case of TestCase {
	val methodTypes = java.util.HashMap.new();
	
	// method immutable Integer fibonacci(immutable Integer n) {
	//   match (n <= 2) {
	//     case True {
	//       1;
	//     }
	//     default {
	//       fibonacci(n - 1) + fibonacci(n - 2);
	//     }
	//   };
	// }
	
	
	
	// $ifBody:
	//   1;
	
	method makeIfBody() {
		new IntLiteral {
			val token = new None;
			val integer = 1;
		};
	}
	
	
	// $elseBody:
	//   Split (n : immutable Integer => n : immutable Integer / n : immutable Integer) in
	//   Let u0 = invoke(n, -, 1) in
	//   Join (n : immutable Integer / n : immutable Integer => n : immutable Integer) in
	//   Let u1 = apply(fibonacci, u0) in
	//   Split (n : immutable Integer => n : immutable Integer / n : immutable Integer) in
	//   Let u2 = invoke(n, -, 2) in
	//   Join (n : immutable Integer / n : immutable Integer => n : immutable Integer) in
	//   Let u3 = apply(fibonacci, u2) in
	//       invoke(u1, +, u3)
	
	method makeElseBody() {
		val invoke2 = new MethodInvocation {
			val token = new None;
			val obj = makeID("u1");
			val function = makeID("+");
			val arg = makeID("u3");
		};
		
		val let3 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID("u3");
			val exp = new Application {
				val token = new None;
				val f = makeID("fibonacci");
				val arg = makeID("u2");
			};
			val body = invoke2;
			val mutable = false;
		};
		
		val join1 = new Join {
			val in1 = makeIDWithType("n", getImmutableIntegerPermType());
			val in2 = makeIDWithType("n", getImmutableIntegerPermType());
			val out = makeIDWithType("n", getImmutableIntegerPermType());
			val body = let3;
		};
		
		val let2 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID("u2");
			val exp = new MethodInvocation {
				val token = new None;
				val obj = makeID("n");
				val function = makeID("-");
				val arg = new IntLiteral {
					val token = new None;
					val integer = 2;
				};
			};
			val body = join1;
			val mutable = false;
		};
		
		val split1 = new Split {
			val in = makeIDWithType("n", getImmutableIntegerPermType());
			val out1 = makeIDWithType("n", getImmutableIntegerPermType());
			val out2 = makeIDWithType("n", getImmutableIntegerPermType());
			val body = let2;
		};
		
		val let1 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID("u1");
			val exp = new Application {
				val token = new None;
				val f = makeID("fibonacci");
				val arg = makeID("u0");
			};
			val body = split1;
			val mutable = false;
		};
		
		val join0 = new Join {
			val in1 = makeIDWithType("n", getImmutableIntegerPermType());
			val in2 = makeIDWithType("n", getImmutableIntegerPermType());
			val out = makeIDWithType("n", getImmutableIntegerPermType());
			val body = let1;
		};
		
		val let0 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID("u0");
			val exp = new MethodInvocation {
				val token = new None;
				val obj = makeID("n");
				val function = makeID("-");
				val arg = new IntLiteral {
					val token = new None;
					val integer = 1;
				};
			};
			val body = join0;
			val mutable = false;
		};
		
		val split0 = new Split {
			val in = makeIDWithType("n", getImmutableIntegerPermType());
			val out1 = makeIDWithType("n", getImmutableIntegerPermType());
			val out2 = makeIDWithType("n", getImmutableIntegerPermType());
			val body = let0;
		};
		
		split0;		
	}
	
	// method unique Integer fibonacci(immutable Integer n) {
	//   Split (n : immutable Integer => n : immutable Integer / n : immutable Integer) in
	//   Let t0 = invoke(n, <=, 2) in
	//   Join (n : immutable Integer / n : immutable Integer => n : immutable Integer) in
	//     match(t0, $ifBody, $elseBody)
	// }
	
	method makeFibonacci() {
		val q = new List { var head = new Nil; };
		q.add("plaid");
		q.add("lang");
		q.add("True");
		
		val case0 = new Case {
			val token = new None;
			val qi = new Some {
				val value = new QI {
					val token = new None;
					val qid = q;
					val initState = new None;
				};
			};
			val x = new None;
			val e = makeIfBody();
			val defaultCase = false;
			val boundVar = false;
		};
		
		val case1 = new Case {
			val token = new None;
			val qi = new None;
			val x = new None;
			val e = makeElseBody();
			val defaultCase = true;
			val boundVar = false;
		};
		
		val caseList = new List { var head = new Nil; };
		caseList.add(case0);
		caseList.add(case1);
		
		val match0 = new Match {
			val token = new None;
			val e = makeID("t0");
			val caseList = caseList;
		};
		
		val let0 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID("t0");
			val exp = new MethodInvocation {
				val token = new None;
				val obj = makeID("n");
				val function = makeID("<=");
				val arg = new IntLiteral {
					val token = new None;
					val integer = 2;
				};
			};
			val body = match0;
			val mutable = false;
		};		
		
		val argTypes = new List { var head = new Nil; };
		argTypes.add(getImmutableIntegerPermType());
		val argNames = new List { var head = new Nil; };
		argNames.add(makeID("n"));
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = "fibonacci";
			val retPermType = getImmutableIntegerPermType();
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new MethodDecl {
			val token = new None;
			val name = "fibonacci";
			val body = let0;
			val arg = new Some { val value = makeID("n"); };
			val abstractMethod = false;
			val methodType = methodType;
		};
	}
	
	method makeMain() {
		val mainBody = new Application {
			val token = new None;
			val f = makeID("fibonacci");
			val arg = new IntLiteral {
				val token = new None;
				val integer = 7;
			};
		};
		
		val mainMethodType = new MethodTypeDecl {
			val token = new None;
			val name = "main";
			val retPermType = new Void;
			val argTypes = new List { var head = new Nil; };
			val argNames = new List { var head = new Nil; };
		};
		
		new MethodDecl {
			val token = new None;
			val name = "main";
			val body = mainBody;
			val arg = new None;
			val abstractMethod = false;
			val methodType = mainMethodType;
		};
	}
	
	method buildFibonacciExample() {
		val thePackageName = new List { var head = new Nil; };
		thePackageName.add("testInputs");
		thePackageName.add("FibonacciMatch");
		
		val theDecls = new List { var head = new Nil; };
		theDecls.add(makeMain());
		theDecls.add(makeFibonacci());
		
		theDecls.map(fn (m) => {
			this.methodTypes.put(m.name, m.methodType);
		});
		
		val theImports = new ImportList {
			val imports = new List { var head = new Nil; };
			val token = new None;
		};
	
		new CompilationUnit {
			val decls = theDecls;
			val packageName = thePackageName;
			val imports = theImports;
			val sourceFile = "FibonacciMatch.plaid";
		};
	}


	method getAST() {
		buildFibonacciExample();
	}
	
	method getMethodTypes() {
		this.methodTypes;
	}
}