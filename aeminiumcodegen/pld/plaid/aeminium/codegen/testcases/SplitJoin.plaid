package plaid.aeminium.codegen.testcases;

import plaid.ast.types.*;
import plaid.ast.*;

state SplitJoin case of TestCase {
	val methodTypes = java.util.HashMap.new();
	
	method makeDummyMethod(name, argumentType) {
		val body = new UnitLiteral {
			val token = new None;
		};
	
		val argTypes = new List { var head = new Nil; };
		argTypes.add(argumentType);
		val argNames = new List { var head = new Nil; };
		argNames.add(makeID(makeToken(),"x"));
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = name;
			val retPermType = new Void;
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new MethodDecl {
			val token = new None;
			val name = name;
			val body = body;
			val arg = new Some { val value = makeID(makeToken(),"x"); };
			val abstractMethod = false;
			val methodType = methodType;
		};
	}
	
	// method getAveragePrice(immutable List x) {
	// }
	method makeGetAveragePrice() {
		makeDummyMethod("getAveragePrice", getImmutableIntegerPermType());
	}
	
	// method getHighestPrice(immutable List x) {
	// }
	method makeGetHighestPrice() {
		makeDummyMethod("getHighestPrice", getImmutableIntegerPermType());
	}
	
	// method sortList(unique List x) {
	// }
	method makeSortList() {
		makeDummyMethod("sortList", getUniqueIntegerPermType());
	}
	
	// method doSomething(unique List x) {
	//   Split (x : unique List => x : immutable List / x : immutable List) in
	//    Let immutable List a = x in
	//     Split (x : List Integer => x : immutable List / x : immutable List) in
	//      Let immutable List b = x in
	//       Let temp0 = getAveragePrice(a) in
	//        Let temp1 = getHighestPrice(b) in
	//         Join (b : immutable List / x : immutable List => x : immutable List) in
	//          Join (a : immutable List / x : immutable List => x : unique List) in
	//           sortList(x)
	// }
	
	method makeDoSomething() {
		val join2 = new Join {
			val in1 = makeIDWithType("a", getImmutableIntegerPermType());
			val in2 = makeIDWithType("x", getImmutableIntegerPermType());
			val out = makeIDWithType("x", getUniqueIntegerPermType());
			val body = new Application {
				val token = new None;
				val f = makeID(makeToken(),"sortList");
				val arg = makeID(makeToken(),"x");
			};
		};
		
		val join1 = new Join {
			val in1 = makeIDWithType("b", getImmutableIntegerPermType());
			val in2 = makeIDWithType("x", getImmutableIntegerPermType());
			val out = makeIDWithType("x", getImmutableIntegerPermType());
			val body = join2;
		};
		
		val let4 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID(makeToken(),"temp1");
			val exp = new Application {
				val token = new None;
				val f = makeID(makeToken(),"getHighestPrice");
				val arg = makeID(makeToken(),"b");
			};
			val body = join1;
			val mutable = false;
		};
		
		val let3 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID(makeToken(),"temp0");
			val exp = new Application {
				val token = new None;
				val f = makeID(makeToken(),"getAveragePrice");
				val arg = makeID(makeToken(),"a");
			};
			val body = let4;
			val mutable = false;
		};
		
		val let2 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID(makeToken(),"b");
			val exp = makeIDWithType("x", getImmutableIntegerPermType());
			val body = let3;
			val mutable = false;
		};
		
		val split2 = new Split {
			val in = makeIDWithType("x", getImmutableIntegerPermType());
			val out1 = makeIDWithType("x", getImmutableIntegerPermType());
			val out2 = makeIDWithType("x", getImmutableIntegerPermType());
			val body = let2;
		};
		
		val let1 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID(makeToken(),"a");
			val exp = makeIDWithType("x", getImmutableIntegerPermType());
			val body = split2;
			val mutable = false;
		};
		
		val split1 = new Split {
			val in = makeIDWithType("x", getUniqueIntegerPermType());
			val out1 = makeIDWithType("x", getImmutableIntegerPermType());
			val out2 = makeIDWithType("x", getImmutableIntegerPermType());
			val body = let1;
		};
		
		val body = split1;
		
		val argTypes = new List { var head = new Nil; };
		argTypes.add(getUniqueIntegerPermType());
		val argNames = new List { var head = new Nil; };
		argNames.add(makeID(makeToken(),"x"));
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = "doSomething";
			val retPermType = new Void;
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new MethodDecl {
			val token = new None;
			val name = "doSomething";
			val body = body;
			val arg = new Some { val value = makeID(makeToken(),"x"); };
			val abstractMethod = false;
			val methodType = methodType;
		};
	}
	
	method makeMain() {
		val mainBody = new Application {
			val token = new None;
			val f = new ID {
				val token = new None;
				val name = "doSomething";
			};
			val arg = new IntLiteral {
				val token = new None;
				val integer = 42;
			};
		};
		
		val mainMethodType = new MethodTypeDecl {
			val token = new None;
			val name = "main";
			val retPermType = new Void;
			val argTypes = new List { var head = new Nil; };
			val argNames = new List { var head = new Nil; };
		};
		
		new MethodDecl {
			val token = new None;
			val name = "main";
			val body = mainBody;
			val arg = new None;
			val abstractMethod = false;
			val methodType = mainMethodType;
		};
	}
	
	method buildListExample() {
		val thePackageName = new List { var head = new Nil; };
		thePackageName.add("testInputs");
		thePackageName.add("ListExample");
		
		val theDecls = new List { var head = new Nil; };
		theDecls.add(makeMain());
		theDecls.add(makeDoSomething());
		theDecls.add(makeGetAveragePrice());
		theDecls.add(makeGetHighestPrice());
		theDecls.add(makeSortList());
		
		theDecls.map(fn (m) => {
			this.methodTypes.put(m.name, m.methodType);
		});
		
		val theImports = new ImportList {
			val imports = new List { var head = new Nil; };
			val token = new None;
		};
	
		new CompilationUnit {
			val decls = theDecls;
			val packageName = thePackageName;
			val imports = theImports;
			val sourceFile = "ListExample.plaid";
		};
	}


	method getAST() {
		buildListExample();
	}
	
	method getMethodTypes() {
		this.methodTypes;
	}
}