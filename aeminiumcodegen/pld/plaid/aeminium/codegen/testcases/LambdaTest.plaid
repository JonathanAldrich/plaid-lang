package plaid.aeminium.codegen.testcases;

import plaid.ast.types.*;
import plaid.ast.*;

state LambdaTest case of TestCase {
	val methodTypes = java.util.HashMap.new();
	
	// method unit modify(unique T y);
	
	method makeModify() {
		val argTypes = new List { var head = new Nil; };
		argTypes.add(getUniqueIntegerPermType());
		val argNames = new List { var head = new Nil; };
		argNames.add(makeID(makeToken(),"y"));
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = "modify";
			val retPermType = new Void;
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new MethodDecl {
			val token = new None;
			val name = "modify";
			val body = new UnitLiteral {
				val token = new None;
			};
			val arg = new Some { val value = makeID(makeToken(),"y"); };
			val abstractMethod = false;
			val methodType = methodType;
		};
	}
	
	method makeLambda() {
		val argTypes = new List { var head = new Nil; };
		val argNames = new List { var head = new Nil; };
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = "$Lambda$";
			val retPermType = new Void;
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new Lambda {
			val token = new None;
			val x = makeID(makeToken(),"_");
			val body = new IntLiteral {
				val token = new None;
				val integer = 1;
			};
			val methodType = methodType;
		};
	}
	
	method makePermTypeChange(variable, from, to) {
		new PermTypeChange {
			val variable = variable;
			val from = from;
			val to = to;
		};
	}
	
	method makeLambdaType() {
		val sideEffects = new List { var head = new Nil; };
		sideEffects.add(makePermTypeChange(makeID(makeToken(),"x"), getUniqueIntegerPermType(), getUniqueIntegerPermType()));
		
		new LambdaType {
			val returnType = new Void;
			val argType = new Void;
			val sideEffects = sideEffects;
		};
	}
	
	// method unit lambdaTest(unique T x) {
	//   val lam = fn () => { modify(x); };
	//   lam();
	//   modify(x);
	// }
	
	method makeLambdaTest() {
		val let1 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeID(makeToken(),"u0");
			val exp = new Application {
				val token = new None;
				val f = makeIDWithType("lam", makeLambdaType());
				val arg = new UnitLiteral {
					val token = new None;
				};
			};
			val body = new Application {
				val token = new None;
				val f = makeID(makeToken(),"modify");
				val arg = makeID(makeToken(),"x");
			};
			val mutable = false;
		};
		
		val let0 = new UnannotatedLetBinding {
			val token = new None;
			val x = makeIDWithType("lam", makeLambdaType());
			val exp = makeLambda();
			val body = let1;
			val mutable = false;
		};
	
		val argTypes = new List { var head = new Nil; };
		argTypes.add(getUniqueIntegerPermType());
		val argNames = new List { var head = new Nil; };
		argNames.add(makeID(makeToken(),"x"));
		
		val methodType = new MethodTypeDecl {
			val token = new None;
			val name = "lambdaTest";
			val retPermType = new Void;
			val argTypes = argTypes;
			val argNames = argNames;
		};
		
		new MethodDecl {
			val token = new None;
			val name = "lambdaTest";
			val body = let0;
			val arg = new Some { val value = makeID(makeToken(),"x"); };
			val abstractMethod = false;
			val methodType = methodType;
		};
	}
	
	method makeMain() {
		val mainBody = new Application {
			val token = new None;
			val f = new ID {
				val token = new None;
				val name = "lambdaTest";
			};
			val arg = new UnitLiteral {
				val token = new None;
			};
		};
		
		val mainMethodType = new MethodTypeDecl {
			val token = new None;
			val name = "main";
			val retPermType = new Void;
			val argTypes = new List { var head = new Nil; };
			val argNames = new List { var head = new Nil; };
		};
		
		new MethodDecl {
			val token = new None;
			val name = "main";
			val body = mainBody;
			val arg = new None;
			val abstractMethod = false;
			val methodType = mainMethodType;
		};
	}
	
	method buildLambdaExample() {
		val thePackageName = new List { var head = new Nil; };
		thePackageName.add("testInputs");
		thePackageName.add("LambdaTest");
		
		val theDecls = new List { var head = new Nil; };
		theDecls.add(makeMain());
		theDecls.add(makeModify());
		theDecls.add(makeLambdaTest());
		
		theDecls.map(fn (m) => {
			this.methodTypes.put(m.name, m.methodType);
		});
		
		val theImports = new ImportList {
			val imports = new List { var head = new Nil; };
			val token = new None;
		};
	
		new CompilationUnit {
			val decls = theDecls;
			val packageName = thePackageName;
			val imports = theImports;
			val sourceFile = "LambdaTest.plaid";
		};
	}


	method getAST() {
		buildLambdaExample();
	}
	
	method getMethodTypes() {
		this.methodTypes;
	}
}