package plaid.aeminium.codegen.testcases;

import plaid.ast.types.*;
import plaid.ast.*;

state TestCase {
	val integerStructuralType = new StructuralType {
		val typeAbbrevs = java.util.HashSet.new();
		val typeDecls = java.util.HashSet.new();
	};
	
	val booleanStructuralType = new StructuralType {
		val typeAbbrevs = java.util.HashSet.new();
		val typeDecls = java.util.HashSet.new();
	};
	
	method getImmutableIntegerPermType() {
		new PermType {
			val perm = new ImmutablePermission;
			val type = this.integerStructuralType;
		};
	}
	
	method getUniqueIntegerPermType() {
		new PermType {
			val perm = new UniquePermission;
			val type = this.integerStructuralType;
		};
	}
	
	method getImmutableBooleanPermType() {
		new PermType {
			val perm = new ImmutablePermission;
			val type = this.booleanStructuralType;
		};
	}
	
	method getUniqueBooleanPermType() {
		new PermType {
			val perm = new UniquePermission;
			val type = this.booleanStructuralType;
		};
	}
	
	method makeID(n) {
		new ID {
			val token = new None;
			val name = n;
		};
	}
	
	method makeIDWithType(n, t) {
		new ID {
			val token = new None;
			val name = n;
			override val type = new Some {
				val value = t;
			};
		};
	}
	
	method getAST();
	method getMethodTypes();
}