package tartan.stdlib.ui.style;

state Availability{}

state Enabled case of Availability {
	method onEnabled(ctx) {
		ctx.jqnode.removeAttr("disabled");
	}
	method offEnabled(ctx){}
}

state Disabled case of Availability {
  method onDisabled(ctx) {
    ctx.jqnode.attr("disabled", "disabled");
	}
	method offDisabled(ctx) {}
}

state Visibility {}
state Visible case of Visibility {
  method onVisible(ctx) {
		ctx.jqnode.show();
	}
  method offVisible(ctx) {}
}
state Invisible case of Visibility {
  method onInvisible(ctx) {
		ctx.jqnode.hide();
	}
  method offInvisible(ctx) {}
}

state Align {
  var align = "";
  method onAlign(ctx) {
    ctx.jqnode.css("float", ctx.align);
  }

  method offAlign(ctx) {
    ctx.jqnode.css("float", "");
  }
}
state LeftAlign case of Align {
  var align = "left";
}
state CenterAlign case of Align {
  var align = "center";
}
state RightAlign case of Align {
  var align = "right";
}

state Width {
  var width = -1;
  method onWidth(ctx) {
    if(ctx.width >= 0) {
      ctx.jqnode.css("width", ctx.width);
    }
  }
  method offWidth(ctx) {}
}

state Height {
  var height = -1;
  method onHeight(ctx) {
    if(ctx.height >= 0) {
      ctx.jqnode.css("height", ctx.height);
    }
  }
  method offHeight(ctx) {}
}


state Background {
  var backgroundColor = "";
  method onBackground(ctx) {
    ctx.jqnode.css("background-color", ctx.backgroundColor);
  }

  method offBackground(ctx) {
    ctx.jqnode.css("background-color", "");
  }
}

state Margin {
  var margin = 0;
  method onMargin(ctx) {
    ctx.jqnode.css("margin", ctx.margin);
  }

  method offMargin(ctx) {
    ctx.jqnode.css("margin", 0);
  }
}

state Padding {
  var padding = 0;
  method onPadding(ctx) {
    ctx.jqnode.css("padding", ctx.padding);
  }

  method offPadding(ctx) {
    ctx.jqnode.css("padding", 0);
  }
}


state Border {
  var borderStyle = "";
  var borderWidth = 0;
  var borderColor = "";

  method onBorder(ctx) {
    ctx.jqnode.css("border-style", ctx.borderStyle);
    ctx.jqnode.css("border-width", ctx.borderWidth);
    ctx.jqnode.css("border-color", ctx.borderColor);
  }

  method offBorder(ctx) {
    ctx.jqnode.css("border-style", "");
    ctx.jqnode.css("border-width", 0);
    ctx.jqnode.css("border-color", "");
  }
}

state TextDecoration {
  var textDecoration = "";

  method onTextDecoration(ctx) {
    ctx.jqnode.css("text-decoration", ctx.textDecoration);
  }

  method offTextDecoration(ctx) {
    ctx.jqnode.css("text-decoration", "");
  }
}

state Color {
  var color = "";

  method onColor(ctx) {
    ctx.jqnode.css("color", ctx.color);
  }

  method offColor(ctx) {
    ctx.jqnode.css("color", "");
  }
}

// ButtonStyle.plaid
state ButtonStyle {
	method onNormalButton(ctx) {
	  ctx <- NormalButtonStyle;
	}

	method onHoveredButton(ctx) {
	  ctx <- HoveredButtonStyle;
	}

  method onPressedButton(ctx) {
	  ctx <- PressedButtonStyle;
	}
}

state NormalButtonStyle  case of ButtonStyle = Background{ backgroundColor="#E9FDFF"; }
state HoveredButtonStyle case of ButtonStyle = Background{ backgroundColor="#D0F1AC"; }
state PressedButtonStyle case of ButtonStyle = Background{ backgroundColor="#88B800"; }

