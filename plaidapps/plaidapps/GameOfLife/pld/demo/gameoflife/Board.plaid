package demo.gameoflife;

state Board {
  var width;
	var height;
	var cells;

	method init() {
  	this.cells = this.createArray();
		this.resetBoard();
	}

  method resetBoard() {
  	var elm = jQuery("#"+this.id); elm.html("");
		var deadCell = jQuery("<div />").addClass("cell");
		var lineBreak = jQuery("<br />");
    var sepalater = "_";
		this.cells.clear();

		var i = 0;
		while { i < this.height }{
		  var j = 0;
		  while { j < this.width } {
		    var cellId = "cell" + this.sepalater + i + this.sepalater + j;
				elm.append(deadCell.clone().attr("id", cellId));

        var cell = new Box{ id = cellId; } with Cell with Population;
				cell <- Unpopulated;
			  this.cells.push(cell);

				j = j + 1;
		  };
			elm.append(lineBreak.clone());
		  i = i + 1;
		};
  }
	
	method update(){
	  var previousCells = this.cells.clone();
		this.each(fn(cell, i) => {
 		  cell.update(this.getAround(previousCells, i));
		});
	}

	method getAround(previousCells, idx){
    var around = this.createArray();
		var r = this.getRow(idx);
		var c = this.getCol(idx);
		
		var i = -1;
		while { i <= 1 } {
		  var j = -1;
			while { j <= 1 } {
			  if(i != 0 || j != 0) {
  			  around.push(this.getCell(previousCells, r+i,c+j));
			  };
				j = j + 1;
			};
			i = i + 1;
		};
		around;
	}

	method getCell(cells, row, col) {
	  ifElse (0 <= row && row < this.width && 0 <= col && col < this.height){
  	  cells.get(row*this.width+col);
		}{
		  new NilCell{};
		};
	}

	method getRow(idx) {
	  Math.floor(idx/this.width);
	}

	method getCol(idx) {
//	  idx % this.col;
    idx - Math.floor(idx/this.width) * this.width;
	}

  method createArray() {
    var array = jQuery.makeArray("");
  	var length = array.length;
  	while { length > 0 } {
  	  array.pop();
  		length = length - 1;
  	};
    array;
  }

	method each(f) {
	  var i = 0;
		while {i < this.cells.length} {
		  f(this.cells.get(i), i);
		  i = i + 1;
		};
	}
}

state TenCellRow case of Board {
  method onTenCellRow() {
	  var row = Math.floor(this.height/2);
		var right = Math.floor(this.width/2);
		var left = right - 1;
		
		var i = 0;
		while { i < 5 } {
		  this.getCell(this.cells, row, left-i) <- Populated;
		  this.getCell(this.cells, row, right+i) <- Populated;
			i = i + 1;
		};
	}
	method offTenCellRow() {
	  this.resetBoard();
	}
}

state Glider case of Board {
  method onGlider() {
    var row = Math.floor(this.height/2);
		var col = Math.floor(this.width/2);

	  this.getCell(this.cells, row - 1, col    ) <- Populated;
	  this.getCell(this.cells, row    , col + 1) <- Populated;
	  this.getCell(this.cells, row + 1, col - 1) <- Populated;
	  this.getCell(this.cells, row + 1, col    ) <- Populated;
	  this.getCell(this.cells, row + 1, col + 1) <- Populated;
	}

	method offGlider() {
	  this.resetBoard();
	}
}

state SmallExploder case of Board {
  method onSmallExploder() {
    var row = Math.floor(this.height/2);
		var col = Math.floor(this.width/2);

	  this.getCell(this.cells, row - 1, col    ) <- Populated;
	  this.getCell(this.cells, row    , col - 1) <- Populated;
	  this.getCell(this.cells, row    , col    ) <- Populated;
	  this.getCell(this.cells, row    , col + 1) <- Populated;
	  this.getCell(this.cells, row + 1, col - 1) <- Populated;
	  this.getCell(this.cells, row + 1, col + 1) <- Populated;
	  this.getCell(this.cells, row + 2, col    ) <- Populated;
	}

	method offSmallExploder() {
	  this.resetBoard();
	}
}

state Exploder case of Board {
  method onExploder() {
    var row = Math.floor(this.height/2);
		var col = Math.floor(this.width/2);

	  this.getCell(this.cells, row - 2, col    ) <- Populated;
	  this.getCell(this.cells, row + 2, col    ) <- Populated;

	  this.getCell(this.cells, row - 2, col - 2) <- Populated;
	  this.getCell(this.cells, row - 1, col - 2) <- Populated;
	  this.getCell(this.cells, row    , col - 2) <- Populated;
	  this.getCell(this.cells, row + 1, col - 2) <- Populated;
	  this.getCell(this.cells, row + 2, col - 2) <- Populated;

	  this.getCell(this.cells, row - 2, col + 2) <- Populated;
	  this.getCell(this.cells, row - 1, col + 2) <- Populated;
	  this.getCell(this.cells, row    , col + 2) <- Populated;
	  this.getCell(this.cells, row + 1, col + 2) <- Populated;
	  this.getCell(this.cells, row + 2, col + 2) <- Populated;
	}

	method offExploder() {
	  this.resetBoard();
	}
}

state Spaceship case of Board {
  method onSpaceship() {
    var row = Math.floor(this.height/2);
		var col = Math.floor(this.width/2);

	  this.getCell(this.cells, row - 2, col - 1) <- Populated;
	  this.getCell(this.cells, row - 2, col    ) <- Populated;
	  this.getCell(this.cells, row - 2, col + 1) <- Populated;
	  this.getCell(this.cells, row - 2, col + 2) <- Populated;

	  this.getCell(this.cells, row - 1, col - 2) <- Populated;
	  this.getCell(this.cells, row - 1, col + 2) <- Populated;

	  this.getCell(this.cells, row    , col + 2) <- Populated;

	  this.getCell(this.cells, row + 1, col - 2) <- Populated;
	  this.getCell(this.cells, row + 1, col + 1) <- Populated;
	}

	method offSpaceship() {
	  this.resetBoard();
	}
}

