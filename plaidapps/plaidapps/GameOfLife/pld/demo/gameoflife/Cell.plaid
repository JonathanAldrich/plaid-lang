package demo.gameoflife;

state Cell {
}

state NilCell case of Cell {}

state AliveCell case of Cell {
  method updatePopulation(surroundCells) {
	  var numActive = 0;
		var numDead = 0;
		surroundCells.each(fn(cell) => {
		  match(cell) {
			  case AliveCell {
				  numActive = numActive + 1;
				}
				case DeadCell {
				  numDead = numDead + 1;
				}
		  }
		});
		
		ifElse(numActive <= 1) {
		  this <- Lonely;
		}{
		  ifElse(numActive >= 4) {
			  this <- OverPopulated;
			}{
			  this <- Survive;
			};
		};
	}

	method updateCell() {
	  match(this) {
		  case Survive {
			  this <- AliveCell;
			}
			case Lonely {
			  this <- DeadCell;
			}
			case OverPopulated {
			  this <- DeadCell;
			}
		};
	}

  method onAliveCell() {
		jQuery("#"+this.id).addClass("alive");
	}
	method offAliveCell() {
		jQuery("#"+this.id).removeClass("alive");
	}
}

state DeadCell case of Cell {
  method updatePopulation(surroundCells){
	  var numActive = 0;
	  surroundCells.each(fn(cell) => {
		  match(cell) {
			  case AliveCell {
				  numActive = numActive + 1;
				}
		  }
		});
		ifElse(numActive == 3){
		  this <- Populated;
		}{
		  this <- Unpopulated;
		};
	}

	method updateCell() {
    match(this) {
		  case Populated {
			  this <- AliveCell;
			}
			case Unpopulated {
			  this <- DeadCell;
			}
		}
	}

  method onDeadCell() {
		jQuery("#"+this.id).addClass("dead");
	}
	method offDeadCell() {
		jQuery("#"+this.id).removeClass("dead");
	}
}
