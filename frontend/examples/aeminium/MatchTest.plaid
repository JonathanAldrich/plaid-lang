package examples.aeminium;

state MatchTest {
     @sequential
     method void foo() [immutable MatchTest this] {}

     method void simpleMatch(immutable Boolean value) [immutable MatchTest this] {
         val immutable Integer x = 0;
         
         match (value) {
            case True { 
                val immutable Integer y = x + 1;
                x + y
            }
            case False { x + 2 }
            default {
                this.foo();
                this.foo();

                match (value) {
                    case True  { x + 1 } 
                    case False { x + 2 }
                    default {
                        this.foo();
                        this.foo();
                    }
                };
            }
         };
         
         /*
         match (value) {
              case True { 
                 this.foo();
                 this.foo();
              }
              case False { x } 
         };
         */
         
         x + 3
     }

     /*
     method void matches(immutable Boolean value) [immutable MatchTest this] {
         val immutable Integer x = 1;
         val immutable Integer y = 2;
         match (value) {
             case True  {
                val immutable Integer  z = x  + 1;
                match (z) {
                    case Integer { x } 
                    default { y }
                }; 
             }
             case False { this }
         };
         
         val immutable Integer foo = x + y;
     }
     */
     
}