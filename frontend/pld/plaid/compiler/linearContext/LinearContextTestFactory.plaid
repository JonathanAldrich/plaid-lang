/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.linearContext;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;
import plaid.ast.parsed.*;
import plaid.compiler.types.*;
import plaid.compiler.permissions.*;
import plaid.compiler.symbol.*;

import plaid.collections.makeLinkedList;

state LinearContextTestFactory case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeLinkedList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		var result = new None;  //dummy variable to get around match scoping bug
	  
	  val unique SymbolFactory symFac = new SymbolFactory;
	  val immutable ParsedAST dummyAST = new ParsedEmptyExpr; //AST not used in Symbol equality
	  val immutable VariableSymbol var1 = symFac.makeVariableSymbol("var1",dummyAST);
	  val immutable VariableSymbol var2 = symFac.makeVariableSymbol("var2",dummyAST);
	  val immutable VariableSymbol var3 = symFac.makeVariableSymbol("var3",dummyAST);
	  val immutable VariableSymbol var4 = symFac.makeVariableSymbol("var4",dummyAST);
	  val immutable VariableSymbol var5 = symFac.makeVariableSymbol("var4",dummyAST);
	  
	  //setup values to use for tests
    val immutable String stateName1 = "state1";
    val immutable String stateName2 = "state2";
    val immutable String stateName3 = "state3";
    val immutable String stateName4 = "state4";
    
    //Top symbol
    val immutable TopSymbol topSym = TOPSYM;
    
    //package symbols and structures
    val immutable PackageSymbol packSym1 = symFac.makePackageSymbol("pack1",topSym);
    val immutable PackageStructure packStruct1 = makePackageStructure(TOPSTRUCT, "pack1");
    
    //state Symbols
    val immutable ParsedIdentifier stateID1 = new ParsedIdentifier { val name = stateName1; };
    val immutable ParsedAbstractStateDecl stateAST1 = new ParsedStateDecl {
      val name = stateID1;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    
    val stateCaseOf2 = makeLinkedList();
    stateCaseOf2.add(stateID1);
    val immutable ParsedAbstractStateDecl stateAST2 = new ParsedStateDecl {
      val name = new ParsedIdentifier { val name = stateName2; };
      val modifiers = makeLinkedList();
      val caseOf = stateCaseOf2;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    
    val stateCaseOf3 = makeLinkedList();
    stateCaseOf3.add(stateID1);
    val immutable ParsedAbstractStateDecl stateAST3 = new ParsedStateDecl {
      val name = new ParsedIdentifier { val name = stateName3; };
      val modifiers = makeLinkedList();
      val caseOf = stateCaseOf3;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    
    val immutable ParsedAbstractStateDecl stateAST4 = new ParsedStateDecl {
      val name = new ParsedIdentifier { val name = stateName4; };
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    
    val immutable StateSymbol stateSym1 = symFac.makeStateSymbol(stateName1, stateAST1, packSym1);
    val immutable StateSymbol stateSym2 = symFac.makeStateSymbol(stateName2, stateAST2, packSym1);
    val immutable StateSymbol stateSym3 = symFac.makeStateSymbol(stateName3, stateAST3, packSym1);
    val immutable StateSymbol stateSym4 = symFac.makeStateSymbol(stateName4, stateAST4, packSym1);
    val immutable Symbol owner = new Symbol { val name = "owner"; };
    
    addSymbolForAST(stateCaseOf2,stateSym1);
    addSymbolForAST(stateCaseOf3,stateSym1);
	  
    val immutable NominalStructure nomStruct1 = makeNominalStructure(stateSym1,packStruct1,stateName1);
    val immutable NominalStructure nomStruct2 = makeNominalStructure(stateSym2,packStruct1,stateName2);
    val immutable NominalStructure nomStruct3 = makeNominalStructure(stateSym3,packStruct1,stateName3);
    val immutable NominalStructure nomStruct4 = makeNominalStructure(stateSym4,packStruct1,stateName4);
	  
    /****************** LinearContext.== and put *******************/
    
    val unique LinearContext emptyContext = new LinearContext;
    
    val unique LinearContext c1 = new LinearContext;
    c1.put(var1,VOID);
    val unique LinearContext c1eq = new LinearContext;
    c1eq.put(var1,VOID);
    val unique LinearContext c1neq1 = new LinearContext;
    c1neq1.put(var2,VOID);
    val unique LinearContext c1neq2 = new LinearContext;
    c1neq2.put(var1,DYNAMICTYPE);
    
    val unique LinearContext c2 = new LinearContext;
    c2.put(var1,VOID);
    c2.put(var2,VOID);
    c2.put(var3,VOID);
    c2.put(var5,VOID);
    val unique LinearContext c2eq = new LinearContext;
    c2eq.put(var1,VOID);
    c2eq.put(var5,VOID);
    c2eq.put(var2,VOID);
    c2eq.put(var3,VOID);
    val unique LinearContext c2neq1 = new LinearContext;
    c2neq1.put(var1,VOID);
    c2neq1.put(var2,VOID);
    c2neq1.put(var3,VOID);
    val unique LinearContext c2neq2 = new LinearContext;
    c2neq2.put(var1,VOID);
    c2neq2.put(var2,VOID);
    c2neq2.put(var3,VOID);
    c2neq2.put(var4,VOID);
    val unique LinearContext c2neq3 = new LinearContext;
    c2neq3.put(var1,VOID);
    c2neq3.put(var2,DYNAMICTYPE);
    c2neq3.put(var3,VOID);
    c2neq3.put(var5,VOID);

    test("LinearContext equality and put", fn(ctx) => {
      ctx.assertTrue(emptyContext == new LinearContext);
      ctx.assertTrue(c1 == c1eq);
      ctx.assertFalse(c1 == c1neq1);
      ctx.assertFalse(c1 == c1neq2);
      ctx.assertTrue(c2 == c2eq);
      ctx.assertFalse(c2 == c2neq1);
      ctx.assertFalse(c2 == c2neq2);
      ctx.assertFalse(c2 == c2neq3);
    });
    
    /****************** LinearContext.get *******************/
	
	  test("LinearContext get", fn(ctx) => {
      ctx.assertTrue(c1.get(var1) == VOID);
      ctx.assertFalse(c1.get(var1) == DYNAMICTYPE);
      //test exception thrown when trying to get something that isn't there since no null in plaid
    });
    
    /****************** LinearContext.getOption *******************/
  
    test("LinearContext getOption", fn(ctx) => {
      ctx.assertTrue(match (c1.getOption(var1)) { case Some { c1.getOption(var1).value == VOID } case None { false } });
      ctx.assertTrue(match (c1.getOption(var2)) { case Some { false } case None { true } });
    });
    
    /****************** LinearContext.containsSymbol *******************/
  
    test("LinearContext containsSymbol", fn(ctx) => {
      ctx.assertTrue(c1.containsSymbol(var1));
      ctx.assertFalse(c1.containsSymbol(var2));
    });
    
    /****************** LinearContext.remove *******************/
  
    val unique LinearContext cr1 = new LinearContext;
    cr1.put(var1,VOID);
    cr1.remove(var1);
    
    val unique LinearContext cr2 = new LinearContext;
    cr2.put(var1,VOID);
    cr2.put(var5,VOID);
    cr2.put(var2,VOID);
    cr2.put(var3,VOID);
    cr2.remove(var5);
    
    val unique LinearContext cr3 = new LinearContext;
    cr3.put(var1,VOID);
    cr3.remove(var2);
  
    test("LinearContext remove", fn(ctx) => {
      ctx.assertTrue(cr1 == emptyContext);
      ctx.assertTrue(cr2 == c2neq1);
      ctx.assertTrue(cr3 == c1);
    });
    
    /****************** LinearContext.update *******************/
  
    val unique LinearContext cu1 = new LinearContext;
    cu1.put(var1,VOID);
    cu1.update(var1,DYNAMICTYPE);
    
    val unique LinearContext cu2 = new LinearContext;
    cu2.put(var1,DYNAMICTYPE);
    cu2.put(var2,DYNAMICTYPE);
    cu2.update(var2,VOID);
    
    val unique LinearContext cu3 = new LinearContext;
    cu3.put(var1,VOID);
    cu3.update(var2,DYNAMICTYPE);
  
    test("LinearContext update", fn(ctx) => {
      ctx.assertTrue(cu1.get(var1) == DYNAMICTYPE);
      ctx.assertTrue(cu2.get(var1) == DYNAMICTYPE && cu2.get(var2) == VOID);
      ctx.assertTrue(cu3 == c1);
    });

    /****************** LinearContext.downgrade *******************/
    
    val unique LinearContext cd1 = new LinearContext;
    cd1.put(var1,VOID);
    cd1.put(var2,makeType(SHARED,nomStruct1));
    cd1.put(var3,DYNAMICTYPE);
    cd1.put(var4,makeType(UNIQUE,nomStruct1));
    cd1.put(var5,makeType(NONEP,nomStruct1));
    cd1.downgrade();
    
    val unique LinearContext cd1cmp = new LinearContext;
    cd1cmp.put(var1,VOID);
    cd1cmp.put(var2,makeType(SHARED,TOPSTRUCT));
    cd1cmp.put(var3,DYNAMICTYPE);
    cd1cmp.put(var4,makeType(UNIQUE,nomStruct1));
    cd1cmp.put(var5,makeType(NONEP,TOPSTRUCT));
  
    test("LinearContext downgrade", fn(ctx) => {
      ctx.assertTrue(cd1 == cd1cmp);
    });
    
    /****************** LinearContext.merge *******************/
    
    val unique LinearContext cm1 = new LinearContext;
    cm1.put(var1,makeType(IMMUTABLE, nomStruct2));
    
    val unique LinearContext cm2 = new LinearContext;
    cm2.put(var1,makeType(IMMUTABLE, nomStruct2));
    cm2.put(var2,makeType(SHARED,nomStruct1));
    cm2.put(var3,DYNAMICTYPE);
    
    val unique LinearContext cm3 = new LinearContext;
    cm3.put(var1,makeType(LOCALIMMUTABLE, nomStruct1));
    cm3.put(var2,makeType(NONEP,nomStruct4));
    cm3.put(var3,DYNAMICTYPE);
    
    val unique LinearContext cm23Cmp = new LinearContext;
    cm23Cmp.put(var1,makeType(IMMUTABLE, nomStruct1));
    cm23Cmp.put(var2,makeType(SHARED,TOPSTRUCT));
    cm23Cmp.put(var3,DYNAMICTYPE);
    
    val unique LinearContext cm4 = new LinearContext;
    cm4.put(var1,makeType(LOCALIMMUTABLE, nomStruct1));
    cm4.put(var2,makeType(NONEP,nomStruct4));
    cm4.put(var3,VOID);
    
    test("LinearContext merge", fn(ctx) => {
      result = cm1.merge(cm2);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm1);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm3);
      //java.lang.System.out.println(result.toString());
      ctx.assertTrue(match (result) { case Some { result.value == cm23Cmp } case None { false } });
      result = cm3.merge(cm2);
      ctx.assertTrue(match (result) { case Some { result.value == cm23Cmp } case None { false } });
      result = cm4.merge(cm2);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm4);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
    });
  
		tests
	}
}