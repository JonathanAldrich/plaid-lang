/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.linearContext;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;

import plaid.collections.makeLinkedList;

state LinearContextTestFactory case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeLinkedList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		var t = new None;  //dummy variable to get around match scoping bug
	  
	  val unique SymbolFactory symFac = new SymbolFactory;
	  val immutable ParsedAST dummyAST = new ParsedEmptyExpr; //AST not used in Symbol equality
	  val immutable VariableSymbol var1 = symFac.makeVariableSymbol("var1",dummyAST);
	  val immutable VariableSymbol var2 = symFac.makeVariableSymbol("var2",dummyAST);
	  val immutable VariableSymbol var3 = symFac.makeVariableSymbol("var3",dummyAST);
	  val immutable VariableSymbol var4 = symFac.makeVariableSymbol("var4",dummyAST);
	  val immutable VariableSymbol var5 = symFac.makeVariableSymbol("var4",dummyAST);
	  
	  
	   
	   
	   
    /****************** LinearContext.== *******************/
    
    val unique LinearContext c1 = new LinearContext;
    c1.put(var1,VOID);
    val unique LinearContext c1eq = new LinearContext;
    c1eq.put(var1,VOID);
    val unique LinearContext c1neq1 = new LinearContext;
    c1neq1.put(var2,VOID);
    val unique LinearContext c1neq2 = new LinearContext;
    c1neq2.put(var1,DYNAMICTYPE);
    
    val unique LinearContext c2 = new LinearContext;
    c2.put(var1,VOID);
    c2.put(var2,VOID);
    c2.put(var3,VOID);
    c2.put(var5,VOID);
    val unique LinearContext c2eq = new LinearContext;
    c2eq.put(var1,VOID);
    c2eq.put(var5,VOID);
    c2eq.put(var2,VOID);
    c2eq.put(var3,VOID);
    val unique LinearContext c2neq1 = new LinearContext;
    c2neq1.put(var1,VOID);
    c2neq1.put(var2,VOID);
    c2neq1.put(var3,VOID);
    val unique LinearContext c2neq2 = new LinearContext;
    c2neq2.put(var1,VOID);
    c2neq2.put(var2,VOID);
    c2neq2.put(var3,VOID);
    c2neq2.put(var4,VOID);
    val unique LinearContext c2neq3 = new LinearContext;
    c2neq3.put(var1,VOID);
    c2neq3.put(var2,DYNAMICTYPE);
    c2neq3.put(var3,VOID);
    c2neq3.put(var5,VOID);
    
    
    test("LinearContext equality", fn(ctx) => {
      ctx.assertTrue(new LinearContext == new LinearContext);
      ctx.assertTrue(c1 == c1eq);
      ctx.assertFalse(c1 == c1neq1);
      ctx.assertFalse(c1 == c1neq2);
      ctx.assertTrue(c2 == c2eq);
      ctx.assertFalse(c2 == c2neq1);
      ctx.assertFalse(c2 == c2neq2);
      ctx.assertFalse(c2 == c2neq3);
    });
	
  
		
	}
}