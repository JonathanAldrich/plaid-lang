package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typechecker.*;
import plaid.ast.util.EMPTY_TOKEN;
import plaid.compiler.permissions.*;

import plaid.collections.makeLinkedList;

state PermissionsForTests {
    var unique SharedPermission sharedEmpty = SHARED;
    var unique SharedPermission sharedFoo = unit;
    var unique SharedPermission sharedFooBar = unit;
    var unique LocalPermission localSharedFoo = unit;
    var unique LocalPermission localSharedFooBar = unit;
    var unique BorrowedPermission borrowedSharedFoo = unit;
    var unique BorrowedPermission borrowedSharedFooBar = unit;
    var unique BorrowedPermission borrowedLocalSharedFoo = unit;
    var unique BorrowedPermission borrowedLocalSharedFooBar = unit;
    
    method void init() {
    	// create shared permissions with data groups
        val unique LinkedList list_Foo = makeLinkedList();
        list_Foo.add("Foo");
        this.sharedFoo = makeShared(list_Foo);
        
        val unique LinkedList list_Foo_Bar = makeLinkedList();
        list_Foo_Bar.addLast("Foo");
        list_Foo_Bar.addLast("Bar");
        sharedFooBar = makeShared(list_Foo_Bar);
        
        this.localSharedFoo    = makeLocal(this.sharedFoo);
        this.localSharedFooBar = makeLocal(this.sharedFooBar);
        
        this.borrowedSharedFoo = makeBorrowedPerm(this.sharedFoo, this.sharedFoo, 1);
        this.borrowedSharedFooBar = makeBorrowedPerm(this.sharedFooBar, this.sharedFooBar, 1);

        this.borrowedLocalSharedFoo = makeBorrowedPerm(this.sharedFoo, this.localSharedFoo, 1);
        this.borrowedLocalSharedFooBar = makeBorrowedPerm(this.sharedFooBar, this.localSharedFooBar, 1);
    }
}