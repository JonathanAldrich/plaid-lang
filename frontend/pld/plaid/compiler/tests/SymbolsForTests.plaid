package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typechecker.*;

import plaid.collections.makeLinkedList;

/**
 *  Manually built Symbols for a compiler run
 *  Used in tests
 */
state SymbolsForTests {

  /*************************************
  **************************************
        SYMBOL FIELD DECLARATIONS
  **************************************
  *************************************/   
  
  // ***** Package Symbols ***** //
  var immutable PackageSymbol packageSym1 = unit;
  var immutable PackageSymbol packageSym2 = unit;
  var immutable PackageSymbol packageSym3 = unit;
  var immutable PackageSymbol packageSym4 = unit;
  
  // ***** State Symbols ***** //
  var immutable StateSymbol stateSym1 = unit;
  var immutable StateSymbol stateSym2 = unit;
  var immutable StateSymbol stateSym3 = unit;
  var immutable StateSymbol stateSym4 = unit;
  
  // ***** Field Symbols ***** //
  var immutable FieldSymbol fvalSym1u1Op1 = unit;
  var immutable FieldSymbol fvalSym1s1Op1 = unit;
  var immutable FieldSymbol fvarSym2e2Op1 = unit;
  var immutable FieldSymbol fvalSym1u1Os1 = unit;
  var immutable FieldSymbol fvarSym1u1Os1 = unit;
  var immutable FieldSymbol fvarSym1s1Os1 = unit;
  var immutable FieldSymbol fvalSym2e2Os1 = unit;
  var immutable FieldSymbol fvalSym3u1Os1 = unit;
  var immutable FieldSymbol fvarSym3u1Os1 = unit;
  
  var immutable FieldSymbol fvarSym1u2Os3 = unit;
  var immutable FieldSymbol fvalSym3u3Os3 = unit;
  var immutable FieldSymbol fvarSym4i4Os3 = unit;
  
  var immutable FieldSymbol fvarSym1u1OSP = unit;
  var immutable FieldSymbol fvarSym3u1OSP = unit;
  
  // ***** Arg Symbols ***** //
  var immutable VariableSymbol argSym1 = unit;
  var immutable VariableSymbol argSym2 = unit;
  var immutable VariableSymbol argSym3 = unit;

  // ***** Env Symbols ***** //
  var immutable VariableSymbol envSym1 = unit;
  var immutable VariableSymbol envSym2 = unit;
  var immutable VariableSymbol envSym3 = unit;

  // ***** Variable Symbols ***** //
  var immutable VariableSymbol valSym1u1 = unit;
  var immutable VariableSymbol valSym1li1 = unit;
  var immutable VariableSymbol valSym2u2 = unit;
  var immutable VariableSymbol valSym3u3 = unit;
  var immutable VariableSymbol valSym4u4 = unit;
  var immutable VariableSymbol varSym1u1 = unit;
  var immutable VariableSymbol varSym1li1 = unit;
  var immutable VariableSymbol varSym2u2 = unit;
  var immutable VariableSymbol varSym2s2 = unit;
  var immutable VariableSymbol varSym3u3 = unit;
  var immutable VariableSymbol varSym4u4 = unit;
  var immutable VariableSymbol valSymThis = unit;
  
  // ***** Top Level Field Var Symbols ***** //
  var immutable VariableSymbol topFSym1valu1 = unit;
  var immutable VariableSymbol topFSym1vals1 = unit;
  var immutable VariableSymbol topFSym2vare2 = unit;
  
  // ***** Method Symbols ***** //
  var immutable MethodSymbol methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 = unit;
  var immutable MethodSymbol methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1 = unit;
  var immutable MethodSymbol methodSym1Ru1A1u1n12u1u1Tu1n1E = unit;
  var immutable MethodSymbol methodSym2Ru1A1u1n12u1u1TE = unit;
  
  // ***** Literal state Symbols ***** //
  var immutable StateSymbol integerSymbol = unit;
  var immutable StateSymbol stringSymbol = unit;
  var immutable StateSymbol doubleSymbol = unit;

  /*************************************
  **************************************
              INITIALIZATION
  **************************************
  *************************************/  
  
  method initSymbols(immutable ASTsForTests ast) {
    var args = unit;
    var env = unit;
    var idList = unit;
    var mods = unit;
    
    val unique SymbolFactory symFac = new SymbolFactory;
    
    // ***** Package Symbols ***** //
    this.packageSym1 = symFac.makePackageSymbol(ast.packageName1,TOPSYM);
    this.packageSym2 = symFac.makePackageSymbol(ast.packageName2,TOPSYM);
    this.packageSym3 = symFac.makePackageSymbol(ast.packageName3,this.packageSym1);
    this.packageSym4 = symFac.makePackageSymbol(ast.packageName4,this.packageSym3);
    
    // ***** State Symbols ***** //
    this.stateSym1 = symFac.makeStateSymbol(ast.stateName1, ast.stateAST1, this.packageSym1);
    this.stateSym2 = symFac.makeStateSymbol(ast.stateName2, ast.stateAST2, this.packageSym1);
    this.stateSym3 = symFac.makeStateSymbol(ast.stateName3, ast.stateAST3, this.stateSym1);
    this.stateSym4 = symFac.makeStateSymbol(ast.stateName4, ast.stateAST4, this.packageSym3);
    
    addSymbolForAST(ast.stateQI1,this.stateSym1);
    addSymbolForAST(ast.stateQI2,this.stateSym2);
    addSymbolForAST(ast.stateQI3,this.stateSym3);
    addSymbolForAST(ast.stateQI4,this.stateSym4);
    addSymbolForAST(ast.stateID1,this.stateSym1);
    addSymbolForAST(ast.stateID2,this.stateSym2);
    addSymbolForAST(ast.stateID3,this.stateSym3);
    addSymbolForAST(ast.stateID4,this.stateSym4);
    addSymbolForAST(ast.stateAST1,this.stateSym1);
    addSymbolForAST(ast.stateAST2,this.stateSym2);
    addSymbolForAST(ast.stateAST3,this.stateSym3);
    addSymbolForAST(ast.stateAST4,this.stateSym4);
  
    // ***** Field Symbols ***** //
    this.fvalSym1u1Op1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1u1P, this.packageSym1);
    this.fvalSym1s1Op1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1s1P, this.packageSym1);
    this.fvarSym2e2Op1 = symFac.makeFieldSymbol(ast.fieldName2,ast.fvarAST2e2P, this.packageSym1);
    this.fvalSym1u1Os1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1u1, this.stateSym1);
    this.fvarSym1u1Os1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvarAST1u1, this.stateSym1);
    this.fvarSym1s1Os1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvarAST1s1, this.stateSym1);
    this.fvalSym2e2Os1 = symFac.makeFieldSymbol(ast.fieldName2,ast.fvalAST2e2, this.stateSym1);
    this.fvalSym3u1Os1 = symFac.makeFieldSymbol(ast.fieldName3,ast.fvalAST3u1, this.stateSym1);
    this.fvarSym3u1Os1 = symFac.makeFieldSymbol(ast.fieldName3,ast.fvarAST3u1, this.stateSym1);
    
    this.fvarSym1u2Os3 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvarAST1u2, this.stateSym3);
    this.fvalSym3u3Os3 = symFac.makeFieldSymbol(ast.fieldName3,ast.fvalAST3u3, this.stateSym3);
    this.fvarSym4i4Os3 = symFac.makeFieldSymbol(ast.fieldName4,ast.fvarAST4i4, this.stateSym3);
    
    this.fvarSym1u1OSP = symFac.makeFieldSymbol(ast.fieldName4,ast.fvarAST1u1, this.stateSym4);
    this.fvarSym3u1OSP = symFac.makeFieldSymbol(ast.fieldName4,ast.fvarAST3u1, this.stateSym4);
    
    addSymbolForAST(ast.fvalAST1u1P,this.fvalSym1u1Op1);
    addSymbolForAST(ast.fvalAST1s1P,this.fvalSym1s1Op1);
    addSymbolForAST(ast.fvarAST2e2P,this.fvarSym2e2Op1);
    addSymbolForAST(ast.fvalAST1u1,this.fvalSym1u1Os1);
    addSymbolForAST(ast.fvarAST1u1,this.fvarSym1u1Os1);
    addSymbolForAST(ast.fvarAST1s1,this.fvarSym1s1Os1);
    addSymbolForAST(ast.fvalAST2e2,this.fvalSym2e2Os1);
    addSymbolForAST(ast.fvalAST3u1,this.fvalSym3u1Os1); 
    addSymbolForAST(ast.fvarAST3u1,this.fvarSym3u1Os1); 
    addSymbolForAST(ast.fvarAST1u2,this.fvarSym1u2Os3);
    addSymbolForAST(ast.fvalAST3u3,this.fvalSym3u3Os3);
    addSymbolForAST(ast.fvarAST4i4,this.fvarSym4i4Os3);
    addSymbolForAST(ast.fvarAST1u1sp,this.fvarSym1u1OSP);
    addSymbolForAST(ast.fvarAST3u1sp,this.fvarSym3u1OSP); 
  
    //add fields to states
    this.stateSym1.addMember(this.fvarSym1u1Os1);  //concrete
    this.stateSym1.addAbstractMember(this.fvalSym3u1Os1);  //abstract
    
    this.stateSym2.addMember(this.fvalSym3u3Os3); //
    
    this.stateSym3.addMember(this.fvarSym1u2Os3);  //override field 1 of state 1
    this.stateSym3.addMember(this.fvalSym3u3Os3);  //implement field 3 of state1
    this.stateSym3.addMember(this.fvarSym4i4Os3);  //new member
  
    this.stateSym4.addMember(this.fvarSym1u1Os1);
    this.stateSym4.addMember(this.fvarSym3u1Os1);
  
    // ***** Arg Symbols ***** //  
    this.argSym1 = symFac.makeVariableSymbol(ast.argName1,ast.argAST1u1n1);
    this.argSym2 = symFac.makeVariableSymbol(ast.argName2,ast.argAST1u1n1);
    this.argSym3 = symFac.makeVariableSymbol(ast.argName3,ast.argAST1u1n1);
    
    addSymbolForAST(ast.argAST1u1n1, this.argSym1);
    //test already-generated symbol case of sig generation
    addSymbolForAST(ast.argID2, this.argSym2); 

    // ***** Env Symbols ***** //
    this.envSym1 = symFac.makeVariableSymbol(ast.envName1,ast.envID1);
    this.envSym2 = symFac.makeVariableSymbol(ast.envName2,ast.envID2);
    this.envSym3 = symFac.makeVariableSymbol(ast.envName3,ast.envID3);
    
    // ***** Variable Symbols ***** //
    this.valSym1u1 = symFac.makeVariableSymbol(ast.valName1,ast.valDeclAST1u1EQnewS1);
    this.valSym1li1 = symFac.makeVariableSymbol(ast.valName1,ast.valDeclAST1li1EQval2);
    this.valSym2u2 = symFac.makeVariableSymbol(ast.valName2,ast.valDeclAST2u2EQnewS2);
    this.valSym3u3 = symFac.makeVariableSymbol(ast.valName3,ast.valDeclAST3u3EQnewS3);
    this.valSym4u4 = symFac.makeVariableSymbol(ast.valName4,ast.valDeclAST4u4EQnewS4);
    this.varSym1u1 = symFac.makeVariableSymbol(ast.varName1,ast.varDeclAST1u1EQnewS1);
    this.varSym1li1 = symFac.makeVariableSymbol(ast.varName1,ast.varDeclAST1li1EQval1);
    this.varSym2u2 = symFac.makeVariableSymbol(ast.varName2,ast.varDeclAST2u2EQnewS2);
    this.varSym2s2 = symFac.makeVariableSymbol(ast.varName2,ast.varDeclAST2s2EQnewS2);
    this.varSym3u3 = symFac.makeVariableSymbol(ast.varName3,ast.varDeclAST3u3EQnewS3);
    this.varSym4u4 = symFac.makeVariableSymbol(ast.varName4,ast.varDeclAST4u4EQnewS4);
    this.valSymThis = symFac.makeVariableSymbol(ast.thisName,new ParsedEmptyExpr);
    
    addSymbolForAST(ast.valID1u1,this.valSym1u1);
    addSymbolForAST(ast.valID1li1,this.valSym1li1);
    addSymbolForAST(ast.valID2u2,this.valSym2u2);
    addSymbolForAST(ast.valID3u3,this.valSym3u3);
    addSymbolForAST(ast.valID4u4,this.valSym4u4);
    addSymbolForAST(ast.varID1u1,this.varSym1u1);
    addSymbolForAST(ast.varID1li1,this.varSym1li1);
    addSymbolForAST(ast.varID2u2,this.varSym2u2);
    addSymbolForAST(ast.varID2s2,this.varSym2s2);
    addSymbolForAST(ast.varID3u3,this.varSym3u3);
    addSymbolForAST(ast.varID4u4,this.varSym4u4);
    addSymbolForAST(ast.valDeclAST1u1EQnewS1,this.valSym1u1);
    addSymbolForAST(ast.valDeclAST2u2EQnewS2,this.valSym2u2);
    addSymbolForAST(ast.valDeclAST3u3EQnewS3,this.valSym3u3);
    addSymbolForAST(ast.valDeclAST4u4EQnewS4,this.valSym4u4);
    addSymbolForAST(ast.varDeclAST1u1EQnewS1,this.varSym1u1);
    addSymbolForAST(ast.varDeclAST2u2EQnewS2,this.varSym2u2);
    addSymbolForAST(ast.varDeclAST2s2EQnewS2,this.varSym2s2);
    addSymbolForAST(ast.varDeclAST3u3EQnewS3,this.varSym3u3);
    addSymbolForAST(ast.varDeclAST4u4EQnewS4,this.varSym4u4);
    addSymbolForAST(ast.valDeclAST1u1EQval2,this.valSym1u1);
    addSymbolForAST(ast.varDeclAST1u1EQval1,this.varSym1u1);
    addSymbolForAST(ast.valDeclAST1u1EQval4,this.valSym1u1);
    addSymbolForAST(ast.valDeclAST1li1EQval2,this.valSym1li1);
    addSymbolForAST(ast.varDeclAST1li1EQval1,this.varSym1li1);
    addSymbolForAST(ast.thisID,this.valSymThis);
    
    // ***** Top Level field Variable ***** //
    this.topFSym1valu1 = symFac.makeVariableSymbol(ast.fieldName1, ast.fvalAST1u1P);
    this.topFSym1vals1 = symFac.makeVariableSymbol(ast.fieldName1, ast.fvalAST1s1P);
    this.topFSym2vare2 = symFac.makeVariableSymbol(ast.fieldName1, ast.fvarAST2e2P);
    
     // ***** Method Symbols ***** //
    this.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1TE1u1u12u1u1, this.packageSym1);
    this.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1 = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1Tu1n1E1u1u1, this.packageSym1);
    this.methodSym1Ru1A1u1n12u1u1Tu1n1E = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1Tu1n1E, this.stateSym1);
    this.methodSym2Ru1A1u1n12u1u1TE = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1TE, this.stateSym1);
    
    this.stateSym1.addMember(this.methodSym1Ru1A1u1n12u1u1Tu1n1E);
    this.stateSym1.addMember(this.methodSym2Ru1A1u1n12u1u1TE);
    
    addSymbolForAST(ast.methodAST1Ru1A1u1n12u1u1Tu1n1E,this.methodSym1Ru1A1u1n12u1u1Tu1n1E);
    addSymbolForAST(ast.methodAST2Ru1A1u1n12u1u1TE,this.methodSym2Ru1A1u1n12u1u1TE);
    
    // ***** Literal state Symbols ***** //
    this.integerSymbol = symFac.makeStateSymbol(ast.stateNameInt,ast.stateASTInt,TOPSYM);
    this.stringSymbol = symFac.makeStateSymbol(ast.stateNameString,ast.stateASTString,TOPSYM);
    this.doubleSymbol = symFac.makeStateSymbol(ast.stateNameDouble,ast.stateASTDouble,TOPSYM);
    
    addSymbolForAST(ast.literalAST_Int, this.integerSymbol);
    addSymbolForAST(ast.literalAST_String, this.stringSymbol);
    addSymbolForAST(ast.literalAST_Double, this.doubleSymbol); 
    
  }

}