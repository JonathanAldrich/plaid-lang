package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typecheckerUtil.*;

import plaid.collections.makeLinkedList;

/**
 *  Manually built Symbols for a compiler run
 *  Used in tests
 */
state SymbolsForTests {

  /*************************************
  **************************************
        SYMBOL FIELD DECLARATIONS
  **************************************
  *************************************/   
  
  // ***** Package Symbols ***** //
  var immutable PackageSymbol packageSym1 = unit;
  var immutable PackageSymbol packageSym2 = unit;
  var immutable PackageSymbol packageSym3 = unit;
  var immutable PackageSymbol packageSym4 = unit;
  
  // ***** State Symbols ***** //
  var immutable StateSymbol stateSym1 = unit;
  var immutable StateSymbol stateSym2 = unit;
  var immutable StateSymbol stateSym3 = unit;
  var immutable StateSymbol stateSym4 = unit;
  
  // ***** Field Symbols ***** //
  var immutable FieldSymbol fvalSym1u1Op1 = unit;
  var immutable FieldSymbol fvalSym1s1Op1 = unit;
  var immutable FieldSymbol fvalSym2e2Op1 = unit;
  var immutable FieldSymbol fvalSym1u1Os1 = unit;
  var immutable FieldSymbol fvalSym1s1Os1 = unit;
  var immutable FieldSymbol fvalSym2e2Os1 = unit;
  
  // ***** Arg Symbols ***** //
  var immutable VariableSymbol argSym1 = unit;
  var immutable VariableSymbol argSym2 = unit;

  // ***** Env Symbols ***** //
  var immutable VariableSymbol envSym1 = unit;
  var immutable VariableSymbol envSym2 = unit;
  
  // ***** Method Symbols ***** //
  var immutable MethodSymbol methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 = unit;
  var immutable MethodSymbol methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1 = unit;
  var immutable MethodSymbol methodSym1Ru1A1u1n12u1u1Tu1n1E = unit;
  var immutable MethodSymbol methodSym2Ru1A1u1n12u1u1TE = unit;

  // ***** This Symbols ***** //
  var immutable ThisSymbol thisSym1 = unit;
  var immutable ThisSymbol thisSym2 = unit;
  var immutable ThisSymbol thisSym3 = unit;
  var immutable ThisSymbol thisSym4 = unit;

  /*************************************
  **************************************
              INITIALIZATION
  **************************************
  *************************************/  
  
  method initSymbols(immutable ASTsForTests ast) {
    var args = unit;
    var env = unit;
    var idList = unit;
    var mods = unit;
    
    val unique SymbolFactory symFac = new SymbolFactory;
    
    // ***** Package Symbols ***** //
    this.packageSym1 = symFac.makePackageSymbol(ast.packageName1,TOPSYM);
    this.packageSym2 = symFac.makePackageSymbol(ast.packageName2,TOPSYM);
    this.packageSym3 = symFac.makePackageSymbol(ast.packageName3,this.packageSym1);
    this.packageSym4 = symFac.makePackageSymbol(ast.packageName4,this.packageSym3);
    
    // ***** State Symbols ***** //
    this.stateSym1 = symFac.makeStateSymbol(ast.stateName1, ast.stateAST1, this.packageSym1);
    this.stateSym2 = symFac.makeStateSymbol(ast.stateName2, ast.stateAST2, this.packageSym1);
    this.stateSym3 = symFac.makeStateSymbol(ast.stateName3, ast.stateAST3, this.stateSym1);
    this.stateSym4 = symFac.makeStateSymbol(ast.stateName4, ast.stateAST4, this.packageSym3);
    
    addSymbolForAST(ast.stateQI1,this.stateSym1);
    addSymbolForAST(ast.stateQI2,this.stateSym2);
    addSymbolForAST(ast.stateQI3,this.stateSym3);
    addSymbolForAST(ast.stateQI4,this.stateSym4);
  
    // ***** Field Symbols ***** //
    this.fvalSym1u1Op1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1u1, this.packageSym1);
    this.fvalSym1s1Op1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1s1, this.packageSym1);
    this.fvalSym2e2Op1 = symFac.makeFieldSymbol(ast.fieldName2,ast.fvalAST2e2, this.packageSym1);
    this.fvalSym1u1Os1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1u1, this.stateSym1);
    this.fvalSym1s1Os1 = symFac.makeFieldSymbol(ast.fieldName1,ast.fvalAST1s1, this.stateSym1);
    this.fvalSym2e2Os1 = symFac.makeFieldSymbol(ast.fieldName2,ast.fvalAST2e2, this.stateSym1);
    
    //package versions are mapped
    addSymbolForAST(ast.fvalAST1u1,this.fvalSym1u1Op1);
    addSymbolForAST(ast.fvalAST1s1,this.fvalSym1s1Op1);
    addSymbolForAST(ast.fvalAST2e2,this.fvalSym2e2Op1);    
  
    //add fields to states
    this.stateSym1.addMember(this.fvalSym1u1Os1);
    this.stateSym1.addMember(this.fvalSym2e2Os1);
  
    // ***** Arg Symbols ***** //
    this.argSym1 = symFac.makeVariableSymbol(ast.argName1,ast.argID1);
    this.argSym2 = symFac.makeVariableSymbol(ast.argName2,ast.argID2);
    
    //test already-generated symbol case of sig generation
    addSymbolForAST(ast.argID2, this.argSym2); 

    // ***** Env Symbols ***** //
    this.envSym1 = symFac.makeVariableSymbol(ast.envName1,ast.envID1);
    this.envSym2 = symFac.makeVariableSymbol(ast.envName2,ast.envID2);
    
     // ***** Method Symbols ***** //
    this.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1TE1u1u12u1u1, this.packageSym1);
    this.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1 = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1Tu1n1E1u1u1, this.packageSym1);
    this.methodSym1Ru1A1u1n12u1u1Tu1n1E = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1Tu1n1E, this.stateSym1);
    this.methodSym2Ru1A1u1n12u1u1TE = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1TE, this.stateSym1);
    
    // ***** This Symbols ***** //
    this.thisSym1 = symFac.makeThisSymbol(this.stateSym1,ast.thisID1);
    this.thisSym2 = symFac.makeThisSymbol(this.stateSym2,ast.thisID2);
    this.thisSym3 = symFac.makeThisSymbol(this.stateSym3,ast.thisID3);
    this.thisSym4 = symFac.makeThisSymbol(this.stateSym4,ast.thisID4);
    
  }

}