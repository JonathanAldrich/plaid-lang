package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typechecker.*;
import plaid.compiler.permissions.*;

import plaid.collections.makeLinkedList;

/**
 *  Manually built Symbols for a compiler run
 *  Used in tests
 */
state TypesForTests {

  /*************************************
  **************************************
        TYPE FIELD DECLARATIONS
  **************************************
  *************************************/   
  
  // ***** BorrowedPermissions ***** //
  var immutable BorrowedPermission permBi3u = unit;
  var immutable BorrowedPermission permBs1u = unit;
  var immutable BorrowedPermission permBs2u = unit;
  var immutable BorrowedPermission permBi2u = unit;
  var immutable BorrowedPermission permBi1li = unit;
  
  // ***** package Structures ***** //
  var immutable PackageStructure packageStruct1 = unit;
  var immutable PackageStructure packageStruct2 = unit;
  var immutable PackageStructure packageStruct3 = unit;
  var immutable PackageStructure packageStruct4 = unit;
  
  // ***** Nominal Structures ***** //
  var immutable NominalStructure nominalStruct1 = unit;
  var immutable NominalStructure nominalStruct2 = unit;
  var immutable NominalStructure nominalStruct3 = unit;
  var immutable NominalStructure nominalStruct4 = unit;
  
  // ***** Nominal Types ***** //
  var immutable Type nominalType_u1 = unit;
  var immutable Type nominalType_n1 = unit;
  var immutable Type nominalType_s1 = unit;
  var immutable Type nominalType_ls1 = unit;
  var immutable Type nominalType_i1 = unit;
  var immutable Type nominalType_li1 = unit;
  var immutable Type nominalType_u2 = unit;
  var immutable Type nominalType_i2 = unit;
  var immutable Type nominalType_s2 = unit;
  var immutable Type nominalType_sT = unit;
  var immutable Type nominalType_iT = unit;
  var immutable Type nominalType_u4 = unit;
  var immutable Type nominalType_n4 = unit;
  var immutable Type nominalType_Bs1u1 = unit;
  var immutable Type nominalType_Bs2u1 = unit;
  
  // ***** Arg Specs ***** //
  var immutable ArgSpec argSpec_vv = unit;
  var immutable ArgSpec argSpec_dd = unit;
  var immutable ArgSpec argSpec_u1u1 = unit;
  var immutable ArgSpec argSpec_u1n1 = unit;
  
  // ***** Field Signatures ***** //
  var immutable FieldSignature fvalSig1u1 = unit;
  var immutable FieldSignature fvarSig1u1 = unit;
  var immutable FieldSignature fvalSig1s1 = unit;
  var immutable FieldSignature fvalSig2u2 = unit;
  var immutable FieldSignature fvalSig2u1 = unit;
  var immutable FieldSignature fvalSig3u1 = unit;
  var immutable FieldSignature fvarSig3u1 = unit;
  
  // ***** Unpacked Field Signatures ***** //
  var immutable FieldSignature upkfvalSig1u1_1v = unit;
  var immutable FieldSignature upkfvarSig1u1_1v = unit;
  var immutable FieldSignature upkfvalSig1u1_1i1 = unit;
  var immutable FieldSignature upkfvalSig1u1_1Bs1 = unit;
  var immutable FieldSignature upkfvalSig1u1_1Bs2 = unit;
  var immutable FieldSignature upkfvalSig1u1_2v = unit;
  var immutable FieldSignature upkfvalSig3u1_1Bs1 = unit;
  var immutable FieldSignature upkfvalSig3u1_1Bs2 = unit;
  var immutable FieldSignature upkfvarSig3u1_1Bs1 = unit;
  
  // ***** Method Signatures ***** //
  var immutable MethodSignature methodSig1Ru1A1u1n12u1u1TvvE1u1u12u1u1 = unit;
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu1n1E1u1u1 = unit;
  var immutable MethodSignature methodSig1Ru1A1u1n12u1u1Tu1n1E = unit;
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu1u1E = unit;
  
  // ***** Unpacked Structures ***** //
  var immutable UnpackedStructure unpackedStruct1Val1u1_1vVal3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct1Val1u1_1vVal3u1_1Bs2 = unit;
  var immutable UnpackedStructure unpackedStruct1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct1Val1u1_1i1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct4Var1u1_1vVar3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct4Var3u1_1Bs1 = unit;
  
  // ***** Unpacked Types ***** //
  var immutable UnpackedStructure unpackedType_u1Val1u1_1vVal3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u1Val1u1_1vVal3u1_1Bs2 = unit;
  var immutable UnpackedStructure unpackedType_u1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u1Val1u1_1i1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u4Var1u1_1vVar3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u4Var3u1_1Bs1 = unit;
  
  /*************************************
  **************************************
              INITIALIZATION
  **************************************
  *************************************/  
  
  method initPermissions() {
     
     // ***** BorrowedPermissions ***** //
    this.permBi3u = makeBorrowedPerm(IMM,UNIQUE,3);
    this.permBi2u = makeBorrowedPerm(IMM,UNIQUE,2);
    this.permBs1u = makeBorrowedPerm(SHARED,UNIQUE,1);
    this.permBs2u = makeBorrowedPerm(SHARED,UNIQUE,2);
    this.permBi1li = makeBorrowedPerm(IMM,LOCALIMMUTABLE,1);
  }
  
  method initTypes(immutable ASTsForTests ast, immutable SymbolsForTests symbols) {
    
    var mSigArgs = unit;
    var mSigEnv = unit;
    var fieldMap = unit;
    
    // ***** package Structures ***** //
    this.packageStruct1 = makePackageStructure(TOPSTRUCT,ast.packageName1);
    this.packageStruct2 = makePackageStructure(TOPSTRUCT,ast.packageName2);
    this.packageStruct3 = makePackageStructure(this.packageStruct1,ast.packageName3);
    this.packageStruct4 = makePackageStructure(this.packageStruct3,ast.packageName4);
    
    // ***** Nominal Structures ***** //
    this.nominalStruct1 = makeNominalStructure(symbols.stateSym1,this.packageStruct1,ast.stateName1);
    this.nominalStruct2 = makeNominalStructure(symbols.stateSym2,this.packageStruct1,ast.stateName2);
    this.nominalStruct3 = makeNominalStructure(symbols.stateSym3,this.nominalStruct1,ast.stateName3);
    this.nominalStruct4 = makeNominalStructure(symbols.stateSym4,this.packageStruct3,ast.stateName4);
 
    // ***** Nominal Types ***** //
    this.nominalType_u1 = makeType(UNIQUE,this.nominalStruct1);
    this.nominalType_n1 = makeType(NONEP,this.nominalStruct1);
    this.nominalType_s1 = makeType(SHARED,this.nominalStruct1);
    this.nominalType_ls1 = makeType(LOCALSHARED,this.nominalStruct1);
    this.nominalType_i1 = makeType(IMMUTABLE,this.nominalStruct1);
    this.nominalType_li1 = makeType(LOCALIMMUTABLE,this.nominalStruct1);
    this.nominalType_u2 = makeType(UNIQUE,this.nominalStruct2);
    this.nominalType_i2 = makeType(IMMUTABLE,this.nominalStruct2);
    this.nominalType_s2 = makeType(SHARED,this.nominalStruct2);
    this.nominalType_sT = makeType(SHARED,TOPSTRUCT);
    this.nominalType_iT = makeType(IMMUTABLE,TOPSTRUCT);
    this.nominalType_u4 = makeType(UNIQUE,this.nominalStruct4);
    this.nominalType_n4 = makeType(NONEP,this.nominalStruct4);
    this.nominalType_Bs1u1 = makeType(this.permBs1u,this.nominalStruct1);
    this.nominalType_Bs2u1 = makeType(this.permBs2u,this.nominalStruct1);
    
    // ***** Arg Specs ***** //
    this.argSpec_vv = makeArgSpec(VOID,VOID);
    this.argSpec_dd = makeArgSpec(DYNAMICTYPE,DYNAMICTYPE);
    this.argSpec_u1u1 = makeArgSpec(this.nominalType_u1,this.nominalType_u1);
    this.argSpec_u1n1 = makeArgSpec(this.nominalType_u1,this.nominalType_n1);
    
    // ***** Field Signatures ***** //
    this.fvalSig1u1 = makeFieldSignature(false,this.nominalType_u1,ast.fieldName1);
    this.fvalSig1s1 = makeFieldSignature(false,this.nominalType_s1,ast.fieldName1);
    this.fvalSig2u2 = makeFieldSignature(false,this.nominalType_u2,ast.fieldName2);
    this.fvarSig1u1 = makeFieldSignature(true,this.nominalType_u1,ast.fieldName1);
    this.fvalSig2u1 = makeFieldSignature(false,this.nominalType_u1,ast.fieldName2);
    this.fvalSig3u1 = makeFieldSignature(false,this.nominalType_u1,ast.fieldName3);
    this.fvarSig3u1 = makeFieldSignature(true,this.nominalType_u1,ast.fieldName3);
    
    // ***** Unpacked Field Signatures ***** //
    this.upkfvalSig1u1_1v = makeUnpackedFieldSignature(this.fvalSig1u1,1,VOID);
    this.upkfvalSig1u1_1i1 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_i1);
    this.upkfvalSig1u1_1Bs1 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_Bs1u1);
    this.upkfvalSig1u1_1Bs2 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_Bs2u1);
    this.upkfvalSig1u1_2v = makeUnpackedFieldSignature(this.fvalSig1u1,2,VOID);
    this.upkfvarSig1u1_1v = makeUnpackedFieldSignature(this.fvarSig1u1,1,VOID);
    this.upkfvalSig3u1_1Bs1 = makeUnpackedFieldSignature(this.fvalSig3u1,1,this.nominalType_Bs1u1);
    this.upkfvalSig3u1_1Bs2 = makeUnpackedFieldSignature(this.fvalSig3u1,1,this.nominalType_Bs2u1);
    this.upkfvarSig3u1_1Bs1 = makeUnpackedFieldSignature(this.fvarSig3u1,1,this.nominalType_Bs1u1);
    
    // ***** Method Signatures ***** //
    mSigArgs = makeLinkedList();
    mSigArgs.add(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.add(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    mSigEnv.put(symbols.envSym1,this.argSpec_u1u1);
    mSigEnv.put(symbols.envSym2,this.argSpec_u1u1);
    this.methodSig1Ru1A1u1n12u1u1TvvE1u1u12u1u1 = 
      makeMethodSignature(this.nominalType_u1, ast.methodName1, 
                          mSigArgs, this.argSpec_vv,mSigEnv, 
                          makeLinkedList());
                          
    mSigArgs = makeLinkedList();
    mSigArgs.add(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.add(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    mSigEnv.put(symbols.envSym1,this.argSpec_u1u1);
    this.methodSig2Ru1A1u1n12u1u1Tu1n1E1u1u1 = 
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.add(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.add(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig1Ru1A1u1n12u1u1Tu1n1E = 
      makeMethodSignature(this.nominalType_u1, ast.methodName1, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.add(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.add(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1u1n12u1u1Tu1u1E = 
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1u1,mSigEnv, 
                          makeLinkedList());
    
    // ***** Unpacked Structures ***** //
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val1u1_1vVal3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1i1);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val1u1_1i1Val3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs2);
    this.unpackedStruct1Val1u1_1vVal3u1_1Bs2 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvarSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvarSig3u1_1Bs1);
    this.unpackedStruct4Var1u1_1vVar3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct4,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName3,this.upkfvarSig3u1_1Bs1);
    this.unpackedStruct4Var3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct4,fieldMap);
  
    // ***** Unpacked Types ***** //
    
    this.unpackedType_u1Val1u1_1vVal3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct1Val1u1_1vVal3u1_1Bs1);
      
    this.unpackedType_u1Val1u1_1i1Val3u1_1Bs1 =
      makeType(UNIQUE, this.unpackedStruct1Val1u1_1i1Val3u1_1Bs1);
      
    this.unpackedType_u1Val1u1_1vVal3u1_1Bs2 =
      makeType(UNIQUE,this.unpackedStruct1Val1u1_1vVal3u1_1Bs2);
      
    this.unpackedType_u1Val3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct1Val3u1_1Bs1);
      
    this.unpackedType_u4Var1u1_1vVar3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct4Var1u1_1vVar3u1_1Bs1);
      
    this.unpackedType_u4Var3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct4Var3u1_1Bs1);
  
  }
}