package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typechecker.*;
import plaid.compiler.permissions.*;

import plaid.collections.makeLinkedList;

/**
 *  Manually built Symbols for a compiler run
 *  Used in tests
 */
state TypesForTests {

  /*************************************
  **************************************
        TYPE FIELD DECLARATIONS
  **************************************
  *************************************/   
  
  // ***** BorrowedPermissions ***** //
  var immutable BorrowedPermission permBi3u = unit;
  var immutable BorrowedPermission permBs1u = unit;
  var immutable BorrowedPermission permBs2u = unit;
  var immutable BorrowedPermission permBi2u = unit;
  var immutable BorrowedPermission permBi1u = unit;
  var immutable BorrowedPermission permBi1li = unit;
  
  // ***** package Structures ***** //
  var immutable PackageStructure packageStruct1 = unit;
  var immutable PackageStructure packageStruct2 = unit;
  var immutable PackageStructure packageStruct3 = unit;
  var immutable PackageStructure packageStruct4 = unit;
  
  // ***** Nominal Structures ***** //
  var immutable NominalStructure nominalStruct1 = unit;
  var immutable NominalStructure nominalStruct2 = unit;
  var immutable NominalStructure nominalStruct3 = unit;
  var immutable NominalStructure nominalStruct4 = unit;
  var immutable NominalStructure nominalStructString = unit;
  var immutable NominalStructure nominalStructInt = unit;
  var immutable NominalStructure nominalStructDouble = unit;

  // ***** Option Structures ***** //
  var immutable OptionStructure optStruct1 = unit;
  var immutable OptionStructure optStruct2 = unit;
  var immutable OptionStructure optStruct3 = unit;
  var immutable OptionStructure optStruct4 = unit;
  var immutable OptionStructure optStructString = unit;
  var immutable OptionStructure optStructInt = unit;
  var immutable OptionStructure optStructDouble = unit;
  
  // ***** Nominal Types ***** //
  var immutable Type nominalType_u1 = unit;
  var immutable Type nominalType_n1 = unit;
  var immutable Type nominalType_s1 = unit;
  var immutable Type nominalType_ls1 = unit;
  var immutable Type nominalType_i1 = unit;
  var immutable Type nominalType_li1 = unit;
  var immutable Type nominalType_u2 = unit;
  var immutable Type nominalType_i2 = unit;
  var immutable Type nominalType_s2 = unit;
  var immutable Type nominalType_n2 = unit;
  var immutable Type nominalType_sT = unit;
  var immutable Type nominalType_iT = unit;
  var immutable Type nominalType_liT = unit;
  var immutable Type nominalType_u3 = unit;
  var immutable Type nominalType_s3 = unit;
  var immutable Type nominalType_n3 = unit;
  var immutable Type nominalType_u4 = unit;
  var immutable Type nominalType_n4 = unit;
  var immutable Type nominalType_Bs1u1 = unit;
  var immutable Type nominalType_Bs2u1 = unit;
  var immutable Type nominalType_Bi1u1 = unit;
  var immutable Type nominalType_iString = unit;
  var immutable Type nominalType_iInt = unit;
  var immutable Type nominalType_iDouble = unit;
  
  // ***** Option Types ***** //
  var immutable Type optionType_uO1 = unit;
  var immutable Type optionType_iO1 = unit;
  var immutable Type optionType_uO3 = unit;
  var immutable Type optionType_iO3 = unit;
  var immutable Type optionType_uO4 = unit;
  var immutable Type optionType_iO4 = unit;
  
  // ***** Unit Types ***** //
  var immutable Type unique_Unit = unit;
  var immutable Type none_Unit = unit;
  
  // ***** Arg Specs ***** //
  var immutable ArgSpec argSpec_vv = unit;
  var immutable ArgSpec argSpec_dd = unit;
  var immutable ArgSpec argSpec_u1u1 = unit;
  var immutable ArgSpec argSpec_u1n1 = unit;
  var immutable ArgSpec argSpec_i1i1 = unit;
  var immutable ArgSpec argSpec_u2u2 = unit;
  
  // ***** Field Signatures ***** //
  var immutable FieldSignature fvalSig1u1 = unit;
  var immutable FieldSignature fvarSig1u1 = unit;
  var immutable FieldSignature fvalSig1s1 = unit;
  var immutable FieldSignature fvalSig2u2 = unit;
  var immutable FieldSignature fvalSig2u1 = unit;
  var immutable FieldSignature fvalSig3u1 = unit;
  var immutable FieldSignature fvarSig3u1 = unit;
  
  // ***** Unpacked Field Signatures ***** //
  var immutable FieldSignature upkfvalSig1u1_1v = unit;
  var immutable FieldSignature upkfvarSig1u1_1v = unit;
  var immutable FieldSignature upkfvalSig1u1_1i1 = unit;
  var immutable FieldSignature upkfvalSig1u1_1Bs1 = unit;
  var immutable FieldSignature upkfvalSig1u1_1Bs2 = unit;
  var immutable FieldSignature upkfvalSig1u1_2v = unit;
  var immutable FieldSignature upkfvalSig3u1_1Bs1 = unit;
  var immutable FieldSignature upkfvalSig3u1_1Bs2 = unit;
  var immutable FieldSignature upkfvarSig3u1_1Bs1 = unit;
  
  // ***** Method Signatures ***** //
  var immutable MethodSignature methodSig1Ru1A1u1n12u1u1TvvE1u1u12u1u1 = unit;
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu1n1E1u1u1 = unit;
  var immutable MethodSignature methodSig1Ru1A1u1n12u1u1Tu1n1E = unit;
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu1u1E = unit;
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu1n1E = unit; //**for subsig testing
  var immutable MethodSignature methodSig2Ru1A1i1i12u1u1Ti1i1E = unit; //** for subsig testing
  var immutable MethodSignature methodSig2Ru1A1u1n1Tu1n1E = unit; //**for subsig testing
  var immutable MethodSignature methodSig2Ru2A1u1n12u1u1Tu1n1E = unit; //**for subsig testing
  var immutable MethodSignature methodSig2Ru1A1u1n12u1u1Tu2u2E = unit; //**for subsig testing
  
  
  // ***** Unpacked Structures ***** //
  var immutable UnpackedStructure unpackedStruct1Val1u1_1vVal3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct1Val1u1_1vVal3u1_1Bs2 = unit;
  var immutable UnpackedStructure unpackedStruct1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct1Val1u1_1v = unit; 
  var immutable UnpackedStructure unpackedStruct1Val1u1_1i1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct4Var1u1_1vVar3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedStruct4Var3u1_1Bs1 = unit;
  
  // ***** Unpacked Types ***** //
  var immutable UnpackedStructure unpackedType_u1Val1u1_1vVal3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u1Val1u1_1vVal3u1_1Bs2 = unit;
  var immutable UnpackedStructure unpackedType_u1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u1Val1u1_1i1Val3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u4Var1u1_1vVar3u1_1Bs1 = unit;
  var immutable UnpackedStructure unpackedType_u4Var3u1_1Bs1 = unit;
  
  // ***** Source Location Lists ***** //
  var immutable VarSourceLocation sourceLocVal1u1 = unit;
  var immutable VarSourceLocation sourceLocVal2u2 = unit;
  var immutable VarSourceLocation sourceLocVal3u3 = unit;
  var immutable VarSourceLocation sourceLocVal4u4 = unit;
  var immutable VarSourceLocation sourceLocVar1u1 = unit;
  var immutable VarSourceLocation sourceLocVar2u2 = unit;
  var immutable VarSourceLocation sourceLocVar3u3 = unit;
  var immutable VarSourceLocation sourceLocVar4u4 = unit;
  var immutable FieldSourceLocation sourceLocVal1u1f1id1 = unit;
  var immutable FieldSourceLocation sourceLocVal1u1f3id2 = unit;
  var immutable FieldSourceLocation sourceLocVal4u4f1id3 = unit;
  var immutable FieldSourceLocation sourceLocVal4u4f3id4 = unit;
  
  
  
  /*************************************
  **************************************
              INITIALIZATION
  **************************************
  *************************************/  
  
  method initPermissions() {
     
     // ***** BorrowedPermissions ***** //
    this.permBi3u = makeBorrowedPerm(IMM,UNIQUE,3);
    this.permBi2u = makeBorrowedPerm(IMM,UNIQUE,2);
    this.permBs1u = makeBorrowedPerm(SHARED,UNIQUE,1);
    this.permBs2u = makeBorrowedPerm(SHARED,UNIQUE,2);
    this.permBi1li = makeBorrowedPerm(IMM,LOCALIMMUTABLE,1);
    this.permBi1u = makeBorrowedPerm(IMM,UNIQUE,1);
  }
  
  method initTypes(immutable ASTsForTests ast, immutable SymbolsForTests symbols) {
    
    var mSigArgs = unit;
    var mSigEnv = unit;
    var fieldMap = unit;
    
    // ***** package Structures ***** //
    this.packageStruct1 = makePackageStructure(TOPSTRUCT,ast.packageName1);
    this.packageStruct2 = makePackageStructure(TOPSTRUCT,ast.packageName2);
    this.packageStruct3 = makePackageStructure(this.packageStruct1,ast.packageName3);
    this.packageStruct4 = makePackageStructure(this.packageStruct3,ast.packageName4);
    
    // ***** Nominal Structures ***** //
    this.nominalStruct1 = makeNominalStructure(symbols.stateSym1);
    this.nominalStruct2 = makeNominalStructure(symbols.stateSym2);
    this.nominalStruct3 = makeNominalStructure(symbols.stateSym3);
    this.nominalStruct4 = makeNominalStructure(symbols.stateSym4);
    this.nominalStructString = makeNominalStructure(symbols.stringSymbol);
    this.nominalStructInt = makeNominalStructure(symbols.integerSymbol);
    this.nominalStructDouble = makeNominalStructure(symbols.doubleSymbol);
    
    addStructureForAST(ast.literalAST_String, this.nominalStructString);
    addStructureForAST(ast.literalAST_Int, this.nominalStructInt);
    addStructureForAST(ast.literalAST_Double, this.nominalStructDouble);
    
    // ***** Option Structures ***** //
    this.optStruct1 = makeOptionStructure(this.nominalStruct1);
    this.optStruct2 = makeOptionStructure(this.nominalStruct2);
    this.optStruct3 = makeOptionStructure(this.nominalStruct3);
    this.optStruct4 = makeOptionStructure(this.nominalStruct4);
    this.optStructString = makeOptionStructure(this.nominalStructString);
    this.optStructInt = makeOptionStructure(this.nominalStructInt);
    this.optStructDouble = makeOptionStructure(this.nominalStructDouble);
 
    // ***** Nominal Types ***** //
    this.nominalType_u1 = makeType(UNIQUE,this.nominalStruct1);
    this.nominalType_n1 = makeType(NONEP,this.nominalStruct1);
    this.nominalType_s1 = makeType(SHARED,this.nominalStruct1);
    this.nominalType_ls1 = makeType(LOCALSHARED,this.nominalStruct1);
    this.nominalType_i1 = makeType(IMMUTABLE,this.nominalStruct1);
    this.nominalType_li1 = makeType(LOCALIMMUTABLE,this.nominalStruct1);
    this.nominalType_u2 = makeType(UNIQUE,this.nominalStruct2);
    this.nominalType_i2 = makeType(IMMUTABLE,this.nominalStruct2);
    this.nominalType_s2 = makeType(SHARED,this.nominalStruct2);
    this.nominalType_n2 = makeType(NONEP,this.nominalStruct2);
    this.nominalType_sT = makeType(SHARED,TOPSTRUCT);
    this.nominalType_iT = makeType(IMMUTABLE,TOPSTRUCT);
    this.nominalType_liT = makeType(LOCALIMMUTABLE,TOPSTRUCT);
    this.nominalType_u3 = makeType(UNIQUE,this.nominalStruct3);
    this.nominalType_s3 = makeType(SHARED,this.nominalStruct3);
    this.nominalType_n3 = makeType(NONEP,this.nominalStruct3);
    this.nominalType_u4 = makeType(UNIQUE,this.nominalStruct4);
    this.nominalType_n4 = makeType(NONEP,this.nominalStruct4);
    this.nominalType_Bs1u1 = makeType(this.permBs1u,this.nominalStruct1);
    this.nominalType_Bs2u1 = makeType(this.permBs2u,this.nominalStruct1);
    this.nominalType_Bi1u1 = makeType(this.permBi1u,this.nominalStruct1);
    this.nominalType_iString = makeType(IMMUTABLE,this.nominalStructString);
    this.nominalType_iInt = makeType(IMMUTABLE,this.nominalStructInt);
    this.nominalType_iDouble = makeType(IMMUTABLE,this.nominalStructDouble);
    
    // ***** Option Types ***** //
    this.optionType_uO1 = makeType(UNIQUE,this.optStruct1);
    this.optionType_iO1 = makeType(IMMUTABLE,this.optStruct1);
    this.optionType_uO3 = makeType(UNIQUE,this.optStruct3);
    this.optionType_iO3 = makeType(IMMUTABLE,this.optStruct3);
    this.optionType_uO4 = makeType(UNIQUE,this.optStruct4);
    this.optionType_iO4 = makeType(IMMUTABLE,this.optStruct4);
    
    // ***** Unit Types ***** //
    this.unique_Unit = makeType(UNIQUE, UNITSTRUCT);
    this.none_Unit = makeType(NONEP, UNITSTRUCT);
    
    // ***** Arg Specs ***** //
    this.argSpec_vv = makeArgSpec(VOID,VOID);
    this.argSpec_dd = makeArgSpec(DYNAMICTYPE,DYNAMICTYPE);
    this.argSpec_u1u1 = makeArgSpec(this.nominalType_u1,this.nominalType_u1);
    this.argSpec_u1n1 = makeArgSpec(this.nominalType_u1,this.nominalType_n1);
    this.argSpec_i1i1 = makeArgSpec(this.nominalType_i1,this.nominalType_i1);
    this.argSpec_u2u2 = makeArgSpec(this.nominalType_u2,this.nominalType_u2);
    
    // ***** Field Signatures ***** //
    this.fvalSig1u1 = makePackedFieldSignature(false,this.nominalType_u1,ast.fieldName1);
    this.fvalSig1s1 = makePackedFieldSignature(false,this.nominalType_s1,ast.fieldName1);
    this.fvalSig2u2 = makePackedFieldSignature(false,this.nominalType_u2,ast.fieldName2);
    this.fvarSig1u1 = makePackedFieldSignature(true,this.nominalType_u1,ast.fieldName1);
    this.fvalSig2u1 = makePackedFieldSignature(false,this.nominalType_u1,ast.fieldName2);
    this.fvalSig3u1 = makePackedFieldSignature(false,this.nominalType_u1,ast.fieldName3);
    this.fvarSig3u1 = makePackedFieldSignature(true,this.nominalType_u1,ast.fieldName3);
    
    // ***** Unpacked Field Signatures ***** //
    this.upkfvalSig1u1_1v = makeUnpackedFieldSignature(this.fvalSig1u1,1,VOID);
    this.upkfvalSig1u1_1i1 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_i1);
    this.upkfvalSig1u1_1Bs1 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_Bs1u1);
    this.upkfvalSig1u1_1Bs2 = makeUnpackedFieldSignature(this.fvalSig1u1,1,this.nominalType_Bs2u1);
    this.upkfvalSig1u1_2v = makeUnpackedFieldSignature(this.fvalSig1u1,2,VOID);
    this.upkfvarSig1u1_1v = makeUnpackedFieldSignature(this.fvarSig1u1,1,VOID);
    this.upkfvalSig3u1_1Bs1 = makeUnpackedFieldSignature(this.fvalSig3u1,1,this.nominalType_Bs1u1);
    this.upkfvalSig3u1_1Bs2 = makeUnpackedFieldSignature(this.fvalSig3u1,1,this.nominalType_Bs2u1);
    this.upkfvarSig3u1_1Bs1 = makeUnpackedFieldSignature(this.fvarSig3u1,1,this.nominalType_Bs1u1);
    
    // ***** Method Signatures ***** //
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    mSigEnv.put(symbols.envSym1,this.argSpec_u1u1);
    mSigEnv.put(symbols.envSym2,this.argSpec_u1u1);
    this.methodSig1Ru1A1u1n12u1u1TvvE1u1u12u1u1 = 
      makeMethodSignature(this.nominalType_u1, ast.methodName1, 
                          mSigArgs, this.argSpec_vv,mSigEnv, 
                          makeLinkedList());
                          
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    mSigEnv.put(symbols.envSym1,this.argSpec_u1u1);
    this.methodSig2Ru1A1u1n12u1u1Tu1n1E1u1u1 = 
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig1Ru1A1u1n12u1u1Tu1n1E = 
      makeMethodSignature(this.nominalType_u1, ast.methodName1, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1u1n12u1u1Tu1u1E = 
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1u1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1u1n12u1u1Tu1n1E = //**for subsig testing
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
                          
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_i1i1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1i1i12u1u1Ti1i1E =  //** for subsig testing
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_i1i1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.add(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1u1n1Tu1n1E = //**for subsig testing
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());

    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();   
    this.methodSig2Ru2A1u1n12u1u1Tu1n1E =  //**for subsig testing
       makeMethodSignature(this.nominalType_u2, ast.methodName2, 
                          mSigArgs, this.argSpec_u1n1,mSigEnv, 
                          makeLinkedList());
    
    mSigArgs = makeLinkedList();
    mSigArgs.addFirst(makePair(symbols.argSym2,this.argSpec_u1u1));
    mSigArgs.addFirst(makePair(symbols.argSym1,this.argSpec_u1n1));
    mSigEnv = java.util.HashMap.new();
    this.methodSig2Ru1A1u1n12u1u1Tu2u2E = //**for subsig testing
      makeMethodSignature(this.nominalType_u1, ast.methodName2, 
                          mSigArgs, this.argSpec_u2u2,mSigEnv, 
                          makeLinkedList());
    
    // ***** Unpacked Structures ***** //
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val1u1_1vVal3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1i1);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val1u1_1i1Val3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs2);
    this.unpackedStruct1Val1u1_1vVal3u1_1Bs2 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName3,this.upkfvalSig3u1_1Bs1);
    this.unpackedStruct1Val3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvalSig1u1_1v);
    this.unpackedStruct1Val1u1_1v =
      makeUnpackedStructureWithFieldMap(this.nominalStruct1,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName1,this.upkfvarSig1u1_1v);
    fieldMap.put(ast.fieldName3,this.upkfvarSig3u1_1Bs1);
    this.unpackedStruct4Var1u1_1vVar3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct4,fieldMap);
      
    fieldMap = java.util.HashMap.new();
    fieldMap.put(ast.fieldName3,this.upkfvarSig3u1_1Bs1);
    this.unpackedStruct4Var3u1_1Bs1 =
      makeUnpackedStructureWithFieldMap(this.nominalStruct4,fieldMap);
  
    // ***** Unpacked Types ***** //
    
    this.unpackedType_u1Val1u1_1vVal3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct1Val1u1_1vVal3u1_1Bs1);
      
    this.unpackedType_u1Val1u1_1i1Val3u1_1Bs1 =
      makeType(UNIQUE, this.unpackedStruct1Val1u1_1i1Val3u1_1Bs1);
      
    this.unpackedType_u1Val1u1_1vVal3u1_1Bs2 =
      makeType(UNIQUE,this.unpackedStruct1Val1u1_1vVal3u1_1Bs2);
      
    this.unpackedType_u1Val3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct1Val3u1_1Bs1);
      
    this.unpackedType_u4Var1u1_1vVar3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct4Var1u1_1vVar3u1_1Bs1);
      
    this.unpackedType_u4Var3u1_1Bs1 =
      makeType(UNIQUE,this.unpackedStruct4Var3u1_1Bs1);
      
    // ***** Source Location Lists ***** //
    this.sourceLocVal1u1 = makeVarSourceLoc(symbols.valSym1u1);
    this.sourceLocVal2u2 = makeVarSourceLoc(symbols.valSym2u2);
    this.sourceLocVal3u3 = makeVarSourceLoc(symbols.valSym3u3);
    this.sourceLocVal4u4 = makeVarSourceLoc(symbols.valSym4u4);
    this.sourceLocVar1u1 = makeVarSourceLoc(symbols.varSym1u1);
    this.sourceLocVar2u2 = makeVarSourceLoc(symbols.varSym2u2);
    this.sourceLocVar3u3 = makeVarSourceLoc(symbols.varSym3u3);
    this.sourceLocVar4u4 = makeVarSourceLoc(symbols.varSym4u4);
    this.sourceLocVal1u1f1id1 = makeFieldSourceLocSetID(symbols.valSym1u1,ast.fieldName1,1);
    this.sourceLocVal1u1f3id2 = makeFieldSourceLocSetID(symbols.valSym1u1,ast.fieldName3,2);
    this.sourceLocVal4u4f1id3 = makeFieldSourceLocSetID(symbols.valSym4u4,ast.fieldName1,3);
    this.sourceLocVal4u4f3id4 = makeFieldSourceLocSetID(symbols.valSym4u4,ast.fieldName3,4);
  
    // ***** map asts to structures ***** //
    addStructureForAST(ast.valID1u1, this.nominalStruct1);
  
  }
  
}