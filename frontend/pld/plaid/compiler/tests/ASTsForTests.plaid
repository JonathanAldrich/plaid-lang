package plaid.compiler.tests;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.types.*;
import plaid.compiler.typechecker.*;

import plaid.collections.makeLinkedList;

/**
 *  Manually built AST for a compiler run
 *  Used in tests
 */
state ASTsForTests {

  /*************************************
  **************************************
          AST FIELD DECLARATIONS
  **************************************
  *************************************/            

  /*************************************/
  /*******         Names         *******/
  /*************************************/
  
  var immutable String packageName1 = unit;
  var immutable String packageName2 = unit;
  var immutable String packageName3 = unit;
  var immutable String packageName4 = unit;

  var immutable String stateName1 = unit;
  var immutable String stateName2 = unit;
  var immutable String stateName3 = unit;
  var immutable String stateName4 = unit;
  var immutable String stateNameString = unit;
  var immutable String stateNameInt = unit;
  var immutable String stateNameDouble = unit;
  
  var immutable String methodName1 = unit;
  var immutable String methodName2 = unit;
  var immutable String methodName3 = unit;
  var immutable String methodName4 = unit;

  var immutable String fieldName1 = unit;
  var immutable String fieldName2 = unit;
  var immutable String fieldName3 = unit;
  var immutable String fieldName4 = unit;
  
  var immutable String argName1 = unit;
  var immutable String argName2 = unit;
  var immutable String argName3 = unit;
  var immutable String argName4 = unit;
  
  var immutable String envName1 = unit;
  var immutable String envName2 = unit;
  var immutable String envName3 = unit;
  var immutable String envName4 = unit;
  
  var immutable String thisName = unit;

  var immutable String valName1 = unit;
  var immutable String valName2 = unit;
  var immutable String valName3 = unit;
  var immutable String valName4 = unit;
    
  var immutable String varName1 = unit;
  var immutable String varName2 = unit;
  var immutable String varName3 = unit;
  var immutable String varName4 = unit;
  

  /*************************************/
  /*******   Decl and type ASTs  *******/
  /*************************************/
  
  // ***** Parsed Identifiers ***** //
  var immutable ParsedIdentifier packageID1 = unit;
  var immutable ParsedIdentifier packageID2 = unit;
  var immutable ParsedIdentifier packageID3 = unit;
  var immutable ParsedIdentifier packageID4 = unit;

  var immutable ParsedIdentifier stateID1 = unit;
  var immutable ParsedIdentifier stateID2 = unit;
  var immutable ParsedIdentifier stateID3 = unit;
  var immutable ParsedIdentifier stateID4 = unit;
  var immutable ParsedIdentifier stateIDString = unit;
  var immutable ParsedIdentifier stateIDInt = unit;
  var immutable ParsedIdentifier stateIDDouble = unit;
  
  var immutable ParsedIdentifier methodID1 = unit;
  var immutable ParsedIdentifier methodID2 = unit;
  var immutable ParsedIdentifier methodID3 = unit;
  var immutable ParsedIdentifier methodID4 = unit;

  var immutable ParsedIdentifier fieldID1 = unit;
  var immutable ParsedIdentifier fieldID2 = unit;
  var immutable ParsedIdentifier fieldID3 = unit;
  var immutable ParsedIdentifier fieldID4 = unit;
  
  var immutable ParsedIdentifier argID1 = unit;
  var immutable ParsedIdentifier argID2 = unit;
  var immutable ParsedIdentifier argID3 = unit;
  var immutable ParsedIdentifier argID4 = unit;
  
  var immutable ParsedIdentifier envID1 = unit;
  var immutable ParsedIdentifier envID2 = unit;
  var immutable ParsedIdentifier envID3 = unit;
  var immutable ParsedIdentifier envID4 = unit;

  var immutable ParsedIdentifier valID1u1 = unit;
  var immutable ParsedIdentifier valID1li1 = unit;
  var immutable ParsedIdentifier valID2u2 = unit;
  var immutable ParsedIdentifier valID3u3 = unit;
  var immutable ParsedIdentifier valID4u4 = unit;
  var immutable ParsedIdentifier varID1u1 = unit;
  var immutable ParsedIdentifier varID1li1 = unit;
  var immutable ParsedIdentifier varID2u2 = unit;
  var immutable ParsedIdentifier varID2s2 = unit;
  var immutable ParsedIdentifier varID3u3 = unit;
  var immutable ParsedIdentifier varID4u4 = unit;
  
  var immutable ParsedIdentifier thisID = unit;

  // ***** Qualified Identifiers (not full path) ***** //
  var immutable ParsedQualifiedIdentifier stateQI1 = unit; //
  var immutable ParsedQualifiedIdentifier stateQI2 = unit;
  var immutable ParsedQualifiedIdentifier stateQI3 = unit;
  var immutable ParsedQualifiedIdentifier stateQI4 = unit;

  // ***** States *****//
  /*  
   * hierarchy:
   *
   *       state1        state4
   *      /      \
   *   state2   state3
   *  (immutable)
   *
   */
  var immutable ParsedStateDecl stateAST1 = unit;
  var immutable ParsedStateDecl stateAST2 = unit;
  var immutable ParsedStateDecl stateAST3 = unit;
  var immutable ParsedStateDecl stateAST4 = unit;
  var immutable ParsedStateDecl stateASTString = unit;
  var immutable ParsedStateDecl stateASTInt = unit;
  var immutable ParsedStateDecl stateASTDouble = unit;
  
  // ***** Nominal Structures *****//
  var immutable ParsedNominalStructure structAST1 = unit;
  var immutable ParsedNominalStructure structAST2 = unit;
  var immutable ParsedNominalStructure structAST3 = unit;
  var immutable ParsedNominalStructure structAST4 = unit;
  
  // ***** Type AST *****//
  var immutable ParsedEmptyType EMPTY_TYPE_AST = new ParsedEmptyType;
  var immutable ParsedConcreteType typeASTu1 = unit;
  var immutable ParsedConcreteType typeASTi1 = unit;
  var immutable ParsedConcreteType typeASTs1 = unit;
  var immutable ParsedConcreteType typeASTli1 = unit;
  var immutable ParsedConcreteType typeASTls1 = unit;
  var immutable ParsedConcreteType typeASTn1 = unit;
  var immutable ParsedConcreteType typeASTe1 = unit;
  var immutable ParsedConcreteType typeASTu2 = unit;
  var immutable ParsedConcreteType typeASTi2 = unit;
  var immutable ParsedConcreteType typeASTs2 = unit;
  var immutable ParsedConcreteType typeASTli2 = unit;
  var immutable ParsedConcreteType typeASTls2 = unit;
  var immutable ParsedConcreteType typeASTn2 = unit;
  var immutable ParsedConcreteType typeASTe2 = unit;
  var immutable ParsedConcreteType typeASTu3 = unit;
  var immutable ParsedConcreteType typeASTi3 = unit;
  var immutable ParsedConcreteType typeASTs3 = unit;
  var immutable ParsedConcreteType typeASTli3 = unit;
  var immutable ParsedConcreteType typeASTls3 = unit;
  var immutable ParsedConcreteType typeASTn3 = unit;
  var immutable ParsedConcreteType typeASTe3 = unit;
  var immutable ParsedConcreteType typeASTu4 = unit;
  var immutable ParsedConcreteType typeASTi4 = unit;
  var immutable ParsedConcreteType typeASTs4 = unit;
  var immutable ParsedConcreteType typeASTli4 = unit;
  var immutable ParsedConcreteType typeASTls4 = unit;
  var immutable ParsedConcreteType typeASTn4 = unit;
  var immutable ParsedConcreteType typeASTe4 = unit;

  // ***** ArgSpec AST *****//
  var immutable ParsedArgSpec argSpecASTu1u1 = unit;
  var immutable ParsedArgSpec argSpecASTu1n1 = unit;
  var immutable ParsedArgSpec argSpecASTi1i1 = unit;
  var immutable ParsedArgSpec argSpecASTs1s1 = unit;
  var immutable ParsedArgSpec argSpecASTli1li1 = unit;
  var immutable ParsedArgSpec argSpecASTls1ls1 = unit;
  var immutable ParsedArgSpec argSpecASTu2u2 = unit;
  var immutable ParsedArgSpec argSpecASTu2n2 = unit;
  var immutable ParsedArgSpec argSpecASTi2i2 = unit;
  var immutable ParsedArgSpec argSpecASTs2s2 = unit;
  var immutable ParsedArgSpec argSpecASTli2li2 = unit;
  var immutable ParsedArgSpec argSpecASTls2ls2 = unit;
  var immutable ParsedArgSpec argSpecASTu3u3 = unit;
  var immutable ParsedArgSpec argSpecASTu3n3 = unit;
  var immutable ParsedArgSpec argSpecASTi3i3 = unit;
  var immutable ParsedArgSpec argSpecASTs3s3 = unit;
  var immutable ParsedArgSpec argSpecASTli3li3 = unit;
  var immutable ParsedArgSpec argSpecASTls3ls3 = unit;
  var immutable ParsedArgSpec argSpecASTu4u4 = unit;
  var immutable ParsedArgSpec argSpecASTu4n4 = unit;
  var immutable ParsedArgSpec argSpecASTi4i4 = unit;
  var immutable ParsedArgSpec argSpecASTs4s4 = unit;
  var immutable ParsedArgSpec argSpecASTli4li4 = unit;
  var immutable ParsedArgSpec argSpecASTls4ls4 = unit;
  
  var immutable ParsedArgSepc argSpecASTu2u3 = unit;
  var immutable ParsedArgSepc argSpecASTs2s3 = unit;
  var immutable ParsedArgSepc argSpecASTls2ls3 = unit;
  
  // ***** Arg AST *****//
  var immutable ParsedArg argAST1u1n1 = unit;
  var immutable ParsedArg argAST2u1u1 = unit;
  var immutable ParsedArg envAST1u1u1 = unit;
  var immutable ParsedArg envAST2u1u1 = unit;
  var immutable ParsedArg envASTtu1n1 = unit;
    
  // ***** Fields ***** //
  var immutable ParsedAbstractFieldDecl fvalAST1u1P = unit;
  var immutable ParsedAbstractFieldDecl fvalAST1s1P = unit;
  var immutable ParsedAbstractFieldDecl fvarAST2e2P = unit;

  var immutable ParsedFieldDecl fvalAST1u1 = unit;
  var immutable ParsedFieldDecl fvarAST1u1 = unit;
  var immutable ParsedFieldDecl fvarAST1s1 = unit;
  var immutable ParsedFieldDecl fvalAST2i2 = unit;
  var immutable ParsedFieldDecl fvalAST2e2 = unit;
  var immutable ParsedFieldDecl fvalAST2e3 = unit;
  var immutable ParsedFieldDecl fvalAST3u1 = unit;
  var immutable ParsedFieldDecl fvarAST3u1 = unit;
  var immutable ParsedFieldDecl fvarAST4s4 = unit;
  
  var immutable ParsedFieldDecl fvarAST1u2 = unit;
  var immutable ParsedFieldDecl fvalAST3u3 = unit;
  var immutable ParsedFieldDecl fvarAST4i4 = unit;

  var immutable ParsedFieldDecl fvarAST3u1sp = unit;
  var immutable ParsedFieldDecl fvarAST1u1sp = unit;

  // ***** Methods ***** //
  var immutable ParsedMethodDecl methodAST1Ru1A1u1n12u1u1TE1u1u12u1u1 = unit;
  var immutable ParsedMethodDecl methodAST2Ru1A1u1n12u1u1Tu1n1E1u1u1 = unit;
  var immutable ParsedMethodDecl methodAST1Ru1A1u1n12u1u1Tu1n1E = unit;
  var immutable ParsedMethodDecl methodAST2Ru1A1u1n12u1u1TE = unit;
  
  // ***** Local Vars Declaration ***** //
  var immutable ParsedVarDecl valDeclAST1u1EQnewS1 = unit;
  var immutable ParsedVarDecl valDeclAST2u2EQnewS2 = unit;
  var immutable ParsedVarDecl valDeclAST3u3EQnewS3 = unit;
  var immutable ParsedVarDecl valDeclAST4u4EQnewS4 = unit;
  var immutable ParsedVarDecl varDeclAST1u1EQnewS1 = unit;
  var immutable ParsedVarDecl varDeclAST2u2EQnewS2 = unit;
  var immutable ParsedVarDecl varDeclAST2s2EQnewS2 = unit;
  var immutable ParsedVarDecl varDeclAST3u3EQnewS3 = unit;
  var immutable ParsedVarDecl varDeclAST4u4EQnewS4 = unit;
  
  var immutable ParsedVarDecl valDeclAST1u1EQval2 = unit;
  var immutable ParsedVarDecl varDeclAST1u1EQval1 = unit;
  var immutable ParsedVarDecl valDeclAST1u1EQval4 = unit;
  var immutable ParsedVarDecl valDeclAST1li1EQval2 = unit;
  var immutable ParsedVarDecl varDeclAST1li1EQval1 = unit;

  /*************************************/
  /*******       Expr ASTs       *******/
  /*************************************/

  // ***** Assignments ***** //
  var immutable ParsedAssignment assignAST_var1u1TOvar2u2 = unit;
  var immutable ParsedAssignment assignAST_val4u4DOTfield1TOvar2u2 = unit;
  var immutable ParsedAssignment assignAST_val4u4DOTfield3TOvar3u3 = unit;
  var immutable ParsedAssignment assignAST_val2u2DOTfield1TOvar1u1 = unit;
  var immutable ParsedAssignment assignAST_val2u2DOTfield1TOthis = unit;
  var immutable ParsedAssignment assignAST_var1u1DOTfield1TOarg1 = unit;
  
  // ***** Block Exprs ***** //
  var immutable ParsedBlockExpr blockAST_empty = unit;
  var immutable ParsedBlockExpr blockAST_1expr = unit;
  var immutable ParsedBlockExpr blockAST_3expr = unit;
  var immutable ParsedBlockExpr blockAST_localvar1 = unit;
  var immutable ParsedBlockExpr blockAST_localvar2 = unit;
  var immutable ParsedBlockExpr blockAST_localvar3 = unit;
  var immutable ParsedBlockExpr blockAST_val2u2 = unit;
  var immutable ParsedBlockExpr blockAST_val3u3 = unit;
  var immutable ParsedBlockExpr blockAST_method1s1 = unit;
  
  // ***** New Instance ***** //
  var immutable ParsedNewInstance newInstASTs1 = unit;
  var immutable ParsedNewInstance newInstASTs2 = unit;
  var immutable ParsedNewInstance newInstASTs3 = unit;
  var immutable ParsedNewInstance newInstASTs4 = unit;

  // ***** Dereference ***** //
  var immutable ParsedDereference derefASTval1u1_f1 = unit;
  var immutable ParsedDereference derefASTval1u1_f3 = unit;
  var immutable ParsedDereference derefASTval1i1_f1 = unit;
  var immutable ParsedDereference derefASTval1i1_f3 = unit; 
  var immutable ParsedDereference derefASTval1li1_f1 = unit;
  var immutable ParsedDereference derefASTval1li1_f3 = unit;
  var immutable ParsedDereference derefASTvar2s2_f1 = unit;
  var immutable ParsedDereference derefASTval4u4_f1 = unit;
  var immutable ParsedDereference derefASTval4u4_f3 = unit;
  
  // ***** State Refs ***** //
  var immutable ParsedStateRef stateRefAST1 = unit;
  var immutable ParsedStateRef stateRefAST2 = unit;
  var immutable ParsedStateRef stateRefAST3 = unit;
  var immutable ParsedStateRef stateRefAST4 = unit;
  
  // ***** State Change ***** //
  var immutable ParsedStateChange stateChangeASTval1u1TOs2 = unit;
  
  // ***** State Replace ***** //

  var immutable ParsedReplace stateReplaceASTval1u1TOs2 = unit;
  
  // ***** Cases ***** //
  var immutable ParsedPatternCase caseASTs2val2u2 = unit;
  var immutable ParsedDefaultCase caseASTdval3u3 = unit;
  var immutable ParsedPatternCase caseASTs1empty = unit;
  
  // ***** Match ***** //
  var immutable ParsedMatch matchAST1_val1u1 = unit;
  var immutable ParsedMatch matchAST2_val1u1 = unit;
  var immutable ParsedMatch matchAST3_val1u1 = unit;
  var immutable ParsedMatch matchAST4_val1u1 = unit;

  // ***** Argument Expressions ***** //
  var immutable ParsedArgumentExpr argExpAST1 = unit;
  var immutable ParsedArgumentExpr argExpAST2 = unit;
  var immutable ParsedArgumentExpr argExpAST3 = unit;
  var immutable ParsedArgumentExpr argExpAST4 = unit;

  // ***** MethodCall ***** //
  var immutable ParsedMethodCall callAST1 = unit;
  var immutable ParsedMethodCall callAST2 = unit;
  var immutable ParsedMethodCall callAST3 = unit;
  var immutable ParsedMethodCall callAST4 = unit;
  
  // ***** Literals ***** //
  var immutable ParsedStringLiteral literalAST_String = unit;
  var immutable ParsedIntLiteral literalAST_Int = unit;
  var immutable ParsedDoubleLiteral literalAST_Double = unit;


  /*************************************
  **************************************
              INITIALIZATION
  **************************************
  *************************************/  
  
  method initASTs() {
    var args = unit;
    var env = unit;
    var idList = unit;
    var mods = unit;
    var stmts = unit;
    var cases = unit;
    var decls = unit;
    var sps = unit;
    var annos = unit;
    
    /*************************************/
    /*******         Names         *******/
    /*************************************/
    
    this.packageName1 = "pack1";
    this.packageName2 = "pack2";
    this.packageName3 = "pack3";
    this.packageName4 = "pack4";
    
    this.stateName1 = "state1";
    this.stateName2 = "state2";
    this.stateName3 = "state3";
    this.stateName4 = "state4";
    this.stateNameString = "String";
    this.stateNameInt = "Integer";
    this.stateNameDouble = "Double";
    
    this.methodName1 = "method1";
    this.methodName2 = "method2";
    this.methodName3 = "method3";
    this.methodName4 = "method4";
    
    this.fieldName1 = "field1";
    this.fieldName2 = "field2";
    this.fieldName3 = "field3";
    this.fieldName4 = "field4";
    
    this.argName1 = "arg1";
    this.argName2 = "arg2";
    this.argName3 = "arg3";
    this.argName4 = "arg4";
    
    this.envName1 = "env1";
    this.envName2 = "env2";
    this.envName3 = "env3";
    this.envName4 = "env4";

    this.valName1 = "val1";
    this.valName2 = "val2";
    this.valName3 = "val3";
    this.valName4 = "val4";

    this.varName1 = "var1";
    this.varName2 = "var2";
    this.varName3 = "var3";
    this.varName4 = "var4";
    
    this.thisName = "this";
    
    /*************************************/
    /*******          ASTs         *******/
    /*************************************/
    
    // ***** Parsed Identifier AST ***** //
    this.packageID1 = new ParsedIdentifier { val name = this.packageName1; };
    this.packageID2 = new ParsedIdentifier { val name = this.packageName2; };
    this.packageID3 = new ParsedIdentifier { val name = this.packageName3; };
    this.packageID4 = new ParsedIdentifier { val name = this.packageName4; };
    
    this.stateID1 = new ParsedIdentifier { val name = this.stateName1; };
    this.stateID2 = new ParsedIdentifier { val name = this.stateName2; };
    this.stateID3 = new ParsedIdentifier { val name = this.stateName3; };
    this.stateID4 = new ParsedIdentifier { val name = this.stateName4; };
    this.stateIDString = new ParsedIdentifier { val name = this.stateNameString; };
    this.stateIDInt = new ParsedIdentifier { val name = this.stateNameInt; };
    this.stateIDDouble = new ParsedIdentifier { val name = this.stateNameDouble; };
    
    this.methodID1 = new ParsedIdentifier { val name = this.methodName1; };
    this.methodID2 = new ParsedIdentifier { val name = this.methodName2; };
    this.methodID3 = new ParsedIdentifier { val name = this.methodName3; };
    this.methodID4 = new ParsedIdentifier { val name = this.methodName4; };
    
    this.fieldID1 = new ParsedIdentifier { val name = this.fieldName1; };
    this.fieldID2 = new ParsedIdentifier { val name = this.fieldName2; };
    this.fieldID3 = new ParsedIdentifier { val name = this.fieldName3; };
    this.fieldID4 = new ParsedIdentifier { val name = this.fieldName4; };
    
    this.argID1 = new ParsedIdentifier { val name = this.argName1; };
    this.argID2 = new ParsedIdentifier { val name = this.argName2; };
    this.argID3 = new ParsedIdentifier { val name = this.argName3; };
    this.argID4 = new ParsedIdentifier { val name = this.argName4; };
    
    this.envID1 = new ParsedIdentifier { val name = this.envName1; };
    this.envID2 = new ParsedIdentifier { val name = this.envName2; };
    this.envID3 = new ParsedIdentifier { val name = this.envName3; };
    this.envID4 = new ParsedIdentifier { val name = this.envName4; };
   
    this.valID1u1 = new ParsedIdentifier { val name = this.valName1; };
    this.valID1li1 = new ParsedIdentifier { val name = this.valName1; };
    this.valID2u2 = new ParsedIdentifier { val name = this.valName2; };
    this.valID3u3 = new ParsedIdentifier { val name = this.valName3; };
    this.valID4u4 = new ParsedIdentifier { val name = this.valName4; };
   
    this.varID1u1 = new ParsedIdentifier { val name = this.varName1; };
    this.varID1li1 = new ParsedIdentifier { val name = this.valName1; };
    this.varID2u2 = new ParsedIdentifier { val name = this.varName2; };
    this.varID2s2 = new ParsedIdentifier { val name = this.varName2; };
    this.varID3u3 = new ParsedIdentifier { val name = this.varName3; };
    this.varID4u4 = new ParsedIdentifier { val name = this.varName4; };
   
    //each of these will be mapped to different state symbols in the AST->symbol map 
    this.thisID = new ParsedIdentifier { val name = this.thisName; };

    // ***** Qualified Identifier AST ***** //
    idList = makeLinkedList();
    idList.add(this.stateID1);
    this.stateQI1 = new ParsedQualifiedIdentifier { val identifiers = idList; };
    
    idList = makeLinkedList();
    idList.add(this.stateID2);
    this.stateQI2 = new ParsedQualifiedIdentifier { val identifiers = idList; };
    
    idList = makeLinkedList();
    idList.add(stateID3);
    this.stateQI3 = new ParsedQualifiedIdentifier { val identifiers = idList; };
    
    idList = makeLinkedList();
    idList.add(stateID4);
    this.stateQI4 = new ParsedQualifiedIdentifier { val identifiers = idList; };
    
  
    
    // ***** Nominal Structure AST *****//
    this.structAST1 = new ParsedNominalStructure { 
      val stateQi = this.stateQI1; 
      val metaTypes = makeLinkedList(); 
    };
    this.structAST2 = new ParsedNominalStructure { 
      val stateQi = this.stateQI2; 
      val metaTypes = makeLinkedList(); 
    };
    this.structAST3 = new ParsedNominalStructure { 
      val stateQi = this.stateQI3; 
      val metaTypes = makeLinkedList(); 
    };
    this.structAST4 = new ParsedNominalStructure { 
      val stateQi = this.stateQI4; 
      val metaTypes = makeLinkedList(); 
    }; 
    
    // ***** Type AST **** //
    
    this.typeASTu1 = new ParsedConcreteType {
      val permission = new ParsedUniquePermission;
      val structure = this.structAST1;
    };
    this.typeASTi1 = new ParsedConcreteType {
      val permission = new ParsedImmutablePermission;
      val structure = this.structAST1;
    };
    this.typeASTs1 = new ParsedConcreteType {
      val permission = new ParsedSharedPermission;
      val structure = this.structAST1;
    };
    this.typeASTli1 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedImmutablePermission; };
      val structure = this.structAST1;
    };
    this.typeASTls1 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedSharedPermission; };
      val structure = this.structAST1;
    };
    this.typeASTn1 = new ParsedConcreteType {
      val permission = new ParsedNonePermission;
      val structure = this.structAST1;
    };
    this.typeASTe1 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = this.structAST1;
    }; 
    this.typeASTu2 = new ParsedConcreteType {
      val permission = new ParsedUniquePermission;
      val structure = this.structAST2;
    };
    this.typeASTi2 = new ParsedConcreteType {
      val permission = new ParsedImmutablePermission;
      val structure = this.structAST2;
    };
    this.typeASTs2 = new ParsedConcreteType {
      val permission = new ParsedSharedPermission;
      val structure = this.structAST2;
    };
    this.typeASTli2 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedImmutablePermission; };
      val structure = this.structAST2;
    };
    this.typeASTls2 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedSharedPermission; };
      val structure = this.structAST2;
    };
    this.typeASTn2 = new ParsedConcreteType {
      val permission = new ParsedNonePermission;
      val structure = this.structAST2;
    };
    this.typeASTe2 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = this.structAST2;
    };   
    this.typeASTu3 = new ParsedConcreteType {
      val permission = new ParsedUniquePermission;
      val structure = this.structAST3;
    };
    this.typeASTi3 = new ParsedConcreteType {
      val permission = new ParsedImmutablePermission;
      val structure = this.structAST3;
    };
    this.typeASTs3 = new ParsedConcreteType {
      val permission = new ParsedSharedPermission;
      val structure = this.structAST3;
    };
    this.typeASTli3 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedImmutablePermission; };
      val structure = this.structAST3;
    };
    this.typeASTls3 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedSharedPermission; };
      val structure = this.structAST3;
    };
    this.typeASTn3 = new ParsedConcreteType {
      val permission = new ParsedNonePermission;
      val structure = this.structAST3;
    };
    this.typeASTe3 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = this.structAST3;
    };
    this.typeASTu4 = new ParsedConcreteType {
      val permission = new ParsedUniquePermission;
      val structure = this.structAST4;
    };
    this.typeASTi4 = new ParsedConcreteType {
      val permission = new ParsedImmutablePermission;
      val structure = this.structAST4;
    };
    this.typeASTs4 = new ParsedConcreteType {
      val permission = new ParsedSharedPermission;
      val structure = this.structAST4;
    };
    this.typeASTli4 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedImmutablePermission; };
      val structure = this.structAST4;
    };
    this.typeASTls4 = new ParsedConcreteType {
      val permission = new ParsedLocalPermission 
                          { val symmetricPermission = new ParsedSharedPermission; };
      val structure = this.structAST4;
    };
    this.typeASTn4 = new ParsedConcreteType {
      val permission = new ParsedNonePermission;
      val structure = this.structAST4;
    };
    this.typeASTe4 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = this.structAST4;
    };
    
    // ***** ArgSpec AST **** //
    this.argSpecASTu1u1 = new ParsedArgSpec{
      val inputType = this.typeASTu1;
      val outputType = this.typeASTu1;
    };
    this.argSpecASTu1n1 = new ParsedArgSpec{
      val inputType = this.typeASTu1;
      val outputType = this.typeASTn1;
    };
    this.argSpecASTi1i1 = new ParsedArgSpec{
      val inputType = this.typeASTi1;
      val outputType = this.typeASTi1;
    };
    this.argSpecASTs1s1 = new ParsedArgSpec{
      val inputType = this.typeASTs1;
      val outputType = this.typeASTs1;
    };
    this.argSpecASTli1li1 = new ParsedArgSpec{
      val inputType = this.typeASTli1;
      val outputType = this.typeASTli1;
    };
    this.argSpecASTls1ls1 = new ParsedArgSpec{
      val inputType = this.typeASTls1;
      val outputType = this.typeASTls1;
    };
    this.argSpecASTu2u2 = new ParsedArgSpec{
      val inputType = this.typeASTu2;
      val outputType = this.typeASTu2;
    };
    this.argSpecASTu2n2 = new ParsedArgSpec{
      val inputType = this.typeASTu2;
      val outputType = this.typeASTn2;
    };
    this.argSpecASTi2i2 = new ParsedArgSpec{
      val inputType = this.typeASTi2;
      val outputType = this.typeASTi2;
    };
    this.argSpecASTs2s2 = new ParsedArgSpec{
      val inputType = this.typeASTs2;
      val outputType = this.typeASTs2;
    };
    this.argSpecASTli2li2 = new ParsedArgSpec{
      val inputType = this.typeASTli2;
      val outputType = this.typeASTli2;
    };
    this.argSpecASTls2ls2 = new ParsedArgSpec{
      val inputType = this.typeASTls2;
      val outputType = this.typeASTls2;
    };
    this.argSpecASTu3u3 = new ParsedArgSpec{
      val inputType = this.typeASTu3;
      val outputType = this.typeASTu3;
    };
    this.argSpecASTu3n3 = new ParsedArgSpec{
      val inputType = this.typeASTu3;
      val outputType = this.typeASTn3;
    };
    this.argSpecASTi3i3 = new ParsedArgSpec{
      val inputType = this.typeASTi3;
      val outputType = this.typeASTi3;
    };
    this.argSpecASTs3s3 = new ParsedArgSpec{
      val inputType = this.typeASTs3;
      val outputType = this.typeASTs3;
    };
    this.argSpecASTli3li3 = new ParsedArgSpec{
      val inputType = this.typeASTli3;
      val outputType = this.typeASTli3;
    };
    this.argSpecASTls3ls3 = new ParsedArgSpec{
      val inputType = this.typeASTls3;
      val outputType = this.typeASTls3;
    };
    this.argSpecASTu4u4 = new ParsedArgSpec{
      val inputType = this.typeASTu4;
      val outputType = this.typeASTu4;
    };
    this.argSpecASTu4n4 = new ParsedArgSpec{
      val inputType = this.typeASTu4;
      val outputType = this.typeASTn4;
    };
    this.argSpecASTi4i4 = new ParsedArgSpec{
      val inputType = this.typeASTi4;
      val outputType = this.typeASTi4;
    };
    this.argSpecASTs4s4 = new ParsedArgSpec{
      val inputType = this.typeASTs4;
      val outputType = this.typeASTs4;
    };
    this.argSpecASTli4li4 = new ParsedArgSpec{
      val inputType = this.typeASTli4;
      val outputType = this.typeASTli4;
    };
    this.argSpecASTls4ls4 = new ParsedArgSpec{
      val inputType = this.typeASTls4;
      val outputType = this.typeASTls4;
    };

    this.argSpecASTu2u3 = new ParsedArgSpec{
      val inputType = this.typeASTu2;
      val outputType = this.typeASTu3;
    };
    this.argSpecASTs2s3 = new ParsedArgSpec{
      val inputType = this.typeASTs2;
      val outputType = this.typeASTs3;
    };
    this.argSpecASTls2ls3 = new ParsedArgSpec{
      val inputType = this.typeASTls2;
      val outputType = this.typeASTls3;
    };
    
    // ***** Args ***** //
    this.argAST1u1n1 = new ParsedArg {
      val name = this.argID1;
      val argSpec = this.argSpecASTu1n1;
    };
    this.argAST2u1u1 = new ParsedArg {
      val name = this.argID2;
      val argSpec = this.argSpecASTu1u1;
    };
    this.envAST1u1u1 = new ParsedArg {
      val name = this.envID1;
      val argSpec = this.argSpecASTu1u1;
    };
    this.envAST2u1u1 = new ParsedArg {
      val name = this.envID2;
      val argSpec = this.argSpecASTu1u1;
    };
    this.envASTtu1n1 = new ParsedArg {
      val name = this.thisID;
      val argSpec = this.argSpecASTu1n1;
    };
    
   
   
   // ***** State Refs w/o specialization ***** //
    this.stateRefAST3 = new ParsedStateRef {
      val stateExpr = this.stateID3;
      val specializations = makeLinkedList();
    };
    this.stateRefAST2 = new ParsedStateRef {
      val stateExpr = this.stateID2;
      val specializations = makeLinkedList();
    };
    
    // ***** new instance concrete ***** //
    this.newInstASTs3 = new ParsedNewInstance { val stateExpr = stateRefAST3; };
    this.newInstASTs2 = new ParsedNewInstance { val stateExpr = stateRefAST2; };
    
    // ***** specialization field ***** //
    this.fvalAST3u3 = new ParsedConcreteFieldDecl {
        val name = this.fieldID3;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTu3;
        val expression = this.newInstASTs3;
        val annotations = makeLinkedList();
    };
    this.fvarAST1u1sp = new ParsedConcreteFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTu3;
        val expression = this.newInstASTs3;
        val annotations = makeLinkedList();
    };
    this.fvarAST3u1sp = new ParsedConcreteFieldDecl {
        val name = this.fieldID3;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTu3;
        val expression = this.newInstASTs3;
        val annotations = makeLinkedList();
    };
    
    // ***** State Refs (need above specialization fields)***** //
    
    sps = makeLinkedList();
    sps.add(this.fvalAST3u3);
    this.stateRefAST1 = new ParsedStateRef {
      val stateExpr = this.stateID1;
      val specializations = sps;
    };

    sps = makeLinkedList();
    sps.addFirst(this.fvarAST3u1sp);
    sps.addFirst(this.fvarAST1u1sp);
    this.stateRefAST4 = new ParsedStateRef {
      val stateExpr = this.stateID4;
      val specializations = sps;
    };
    
    // ***** newInstance ***** //
    this.newInstASTs1 = new ParsedNewInstance { val stateExpr = stateRefAST1; };
    this.newInstASTs4 = new ParsedNewInstance { val stateExpr = stateRefAST4; };
    
     // ***** Local Var Decls ***** //
    this.valDeclAST1u1EQnewS1 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu1;
      val id = this.valID1u1;
      val expr = this.newInstASTs1;
    };
    this.valDeclAST2u2EQnewS2 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu2;
      val id = this.valID2u2;
      val expr = this.newInstASTs2;
    };
    this.valDeclAST3u3EQnewS3 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu3;
      val id = this.valID3u3;
      val expr = this.newInstASTs3;
    };
    this.valDeclAST4u4EQnewS4 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu4;
      val id = this.valID4u4;
      val expr = this.newInstASTs4;
    };
    this.varDeclAST1u1EQnewS1 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTu1;
      val id = this.varID1u1;
      val expr = this.newInstASTs1;
    };
    this.varDeclAST2u2EQnewS2 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTu2;
      val id = this.varID2u2;
      val expr = this.newInstASTs2;
    };
    this.varDeclAST2s2EQnewS2 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTs2;
      val id = this.varID2s2;
      val expr = this.newInstASTs2;
    };
    this.varDeclAST3u3EQnewS3 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTu3;
      val id = this.varID3u3;
      val expr = this.newInstASTs3;
    };
    this.varDeclAST4u4EQnewS4 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTu4;
      val id = this.varID4u4;
      val expr = this.newInstASTs4;
    };
    
    this.valDeclAST1u1EQval2 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu1;
      val id = this.valID1u1;
      val expr = this.valID2u2;
    };
    
    this.varDeclAST1u1EQval1 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTu1;
      val id = this.varID1u1;
      val expr = this.valID1u1;
    };
    
    this.valDeclAST1u1EQval4 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTu1;
      val id = this.valID1u1;
      val expr = this.valID4u4;
    };
    
    this.valDeclAST1li1EQval2 = new ParsedVarDecl {
      val specifier = new ParsedValSpecifier;
      val varType = this.typeASTli1;
      val id = this.valID1li1;
      val expr = this.valID2u2;
    };
    
    this.varDeclAST1li1EQval1 = new ParsedVarDecl {
      val specifier = new ParsedVarSpecifier;
      val varType = this.typeASTli1;
      val id = this.varID1li1;
      val expr = this.valID1li1;
    };
    
    // ***** Assignments ***** //
    this.assignAST_var1u1TOvar2u2 = new ParsedAssignment {
      val target = new ParsedEmptyExpr;
      val field = this.varID1u1;
      val value = this.varID2u2;
    };
    this.assignAST_val4u4DOTfield1TOvar2u2 = new ParsedAssignment {
      val target = this.valID4u4;
      val field = this.fieldID1;
      val value = this.varID2u2;
    };
    this.assignAST_val4u4DOTfield3TOvar3u3 = new ParsedAssignment {
      val target = this.valID4u4;
      val field = this.fieldID3;
      val value = this.varID3u3;
    };
    this.assignAST_val2u2DOTfield1TOvar1u1 = new ParsedAssignment {
      val target = this.valID2u2;
      val field = this.fieldID1;
      val value = this.varID1u1;
    };
    this.assignAST_val2u2DOTfield1TOthis = new ParsedAssignment {
      val target = this.valID2u2;
      val field = this.fieldID1;
      val value = this.thisID;
    };
    this.assignAST_var1u1DOTfield1TOarg1 = new ParsedAssignment {
      val target = this.varID1u1;
      val field = this.fieldID1;
      val value = this.argID1;
    };
    
    // ***** Block Exprs ***** //
    this.blockAST_empty = new ParsedBlockExpr { val statements = makeLinkedList(); };
    
    stmts = makeLinkedList();
    stmts.add(this.valID1u1);
    this.blockAST_1expr = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.addFirst(this.valID1u1); //stmt #3
    stmts.addFirst(this.assignAST_val4u4DOTfield1TOvar2u2); //stmt #2
    stmts.addFirst(this.varID2u2); //stmt #1
    this.blockAST_3expr = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.add(this.valDeclAST4u4EQnewS4);
    this.blockAST_localvar1 = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.addFirst(this.assignAST_val2u2DOTfield1TOvar1u1); //stmt #2
    stmts.addFirst(this.varDeclAST1u1EQval1); //stmt #1
    this.blockAST_localvar2 = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.addFirst(this.varDeclAST1li1EQval1); //stmt #2
    stmts.addFirst(this.valDeclAST1li1EQval2); //stmt #1
    this.blockAST_localvar3 = new ParsedBlockExpr { val statements = stmts; };
   
    stmts = makeLinkedList();
    stmts.add(this.valID2u2);
    this.blockAST_val2u2 = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.add(this.valID3u3);
    this.blockAST_val3u3 = new ParsedBlockExpr { val statements = stmts; };
    
    stmts = makeLinkedList();
    stmts.addFirst(this.varID1u1);
    stmts.addFirst(this.assignAST_val2u2DOTfield1TOthis);
    stmts.addFirst(this.valDeclAST2u2EQnewS2);
    stmts.addFirst(this.assignAST_var1u1DOTfield1TOarg1);
    stmts.addFirst(this.varDeclAST1u1EQnewS1);
    this.blockAST_method1s1 = new ParsedBlockExpr { val statements = stmts; };
   
   
     // ***** Dereference ***** //
    this.derefASTval1u1_f1 = new ParsedDereference {
      val left = this.valID1u1;
      val right = this.fieldID1;
    };
    this.derefASTval1u1_f3 = new ParsedDereference {
      val left = this.valID1u1;
      val right = this.fieldID3;
    };
    this.derefASTval1li1_f1 = new ParsedDereference {
      val left = this.valID1li1;
      val right = this.fieldID1;
    };
    this.derefASTval1li1_f3 = new ParsedDereference {
      val left = this.valID1li1;
      val right = this.fieldID3;
    };
    this.derefASTvar2s2_f1 = new ParsedDereference {
      val left = this.varID2s2;
      val right = this.fieldID1;
    };
    this.derefASTval4u4_f1 = new ParsedDereference {
      val left = this.valID4u4;
      val right = this.fieldID1;
    };
    this.derefASTval4u4_f3 = new ParsedDereference {
      val left = this.valID4u4;
      val right = this.fieldID3;
    };
    
    
    
    
    
    // ***** State Change ***** //
    this.stateChangeASTval1u1TOs2 = new ParsedStateChange {
      val expression = this.valID1u1;
      val stateExpr = this.stateRefAST2;
    };
    
    // ***** State Replace ***** //
  
    this.stateReplaceASTval1u1TOs2 = new ParsedReplace {
      val expression = this.valID1u1;
      val stateExpr = this.stateRefAST2;
    };
    
    // ***** Cases ***** //
    this.caseASTs2val2u2 = new ParsedPatternCase {
      val pattern = this.stateID2;
      val body = this.blockAST_val2u2;
    };
    this.caseASTdval3u3 = new ParsedDefaultCase {
      val body = this.blockAST_val3u3;
    };
    this.caseASTs1empty = new ParsedPatternCase {
      val pattern = this.stateID1;
      val body = this.blockAST_empty;
    };
    
    // ***** Match ***** //
    cases = makeLinkedList();
    cases.add(this.caseASTs1empty);
    this.matchAST1_val1u1 = new ParsedMatch {
      val expression = this.valID1u1;
      val caseList = cases;
    };
    
    cases = makeLinkedList();
    cases.addFirst(this.caseASTdval3u3);
    cases.addFirst(this.caseASTs1empty);
    this.matchAST2_val1u1 = new ParsedMatch {
      val expression = this.valID1u1;
      val caseList = cases;
    };
    
    cases = makeLinkedList();
    cases.addFirst(this.caseASTdval3u3);
    cases.addFirst(this.caseASTs2val2u2);
    this.matchAST3_val1u1 = new ParsedMatch {
      val expression = this.valID1u1;
      val caseList = cases;
    };
  
    // ***** Arg Exprs ***** //
    args = makeLinkedList();
    args.addFirst(this.valID2u2); //#2
    args.addFirst(this.valID3u3); //#1
    this.argExpAST1 = new ParsedArgumentExpr {
      val args = args;
    };
    
    // ***** MethodCall ***** //
    this.callAST1 = new ParsedMethodCall {
      val argument = this.argExpAST1;
      val staticArgs = makeLinkedList();
      val receiver = this.valID1u1;
      val methodId = this.methodID1;
    };
    this.callAST2 = new ParsedMethodCall {
      val argument = this.argExpAST1;
      val staticArgs = makeLinkedList();
      val receiver = this.valID1u1;
      val methodId = this.methodID2;
    };
   
    // ***** Literals ***** //
    this.literalAST_String = new ParsedStringLiteral;
    this.literalAST_Int = new ParsedIntLiteral;
    this.literalAST_Double = new ParsedDoubleLiteral;
   
    // ***** Methods ***** //
    
    args = makeLinkedList();
    args.addFirst(this.argAST2u1u1); //#2
    args.addFirst(this.argAST1u1n1); //#1
    env = makeLinkedList();
    env.addFirst(this.envAST1u1u1);
    env.addFirst(this.envAST2u1u1);
    this.methodAST1Ru1A1u1n12u1u1TE1u1u12u1u1 = new ParsedAbstractMethodDecl {
      val name = methodID1;
      val modifiers = makeLinkedList();
      val returnType = typeASTu1;
      val StaticArgsSpec = makeLinkedList();
      val arguments = args;
      val environment = env;
      val annotations = makeLinkedList();
    };
    
    args = makeLinkedList();
    args.addFirst(this.argAST2u1u1); //#2
    args.addFirst(this.argAST1u1n1); //#1
    env = makeLinkedList();
    env.addFirst(this.envAST1u1u1);
    env.addFirst(this.envASTtu1n1);
    this.methodAST2Ru1A1u1n12u1u1Tu1n1E1u1u1 = new ParsedAbstractMethodDecl {
      val name = methodID2;
      val modifiers = makeLinkedList();
      val returnType = typeASTu1;
      val StaticArgsSpec = makeLinkedList();
      val arguments = args;
      val environment = env;
      val annotations = makeLinkedList();
    };
    
    args = makeLinkedList();
    args.addFirst(this.argAST2u1u1); //#2
    args.addFirst(this.argAST1u1n1); //#1
    env = makeLinkedList();
    env.addFirst(this.envASTtu1n1);
    this.methodAST1Ru1A1u1n12u1u1Tu1n1E = new ParsedConcreteMethodDecl {
      val name = methodID1;
      val modifiers = makeLinkedList();
      val returnType = typeASTu1;
      val StaticArgsSpec = makeLinkedList();
      val arguments = args;
      val environment = env;
      val body = this.blockAST_method1s1;
      val annotations = makeLinkedList();
    };
    
    args = makeLinkedList();
    args.addFirst(this.argAST2u1u1); //#2
    args.addFirst(this.argAST1u1n1); //#1
    env = makeLinkedList();   
    this.methodAST2Ru1A1u1n12u1u1TE = new ParsedAbstractMethodDecl {
      val name = methodID2;
      val modifiers = makeLinkedList();
      val returnType = typeASTu1;
      val StaticArgsSpec = makeLinkedList();
      val arguments = args;
      val environment = env;
      val annotations = makeLinkedList();
    };
    
    // ***** Fields ***** //
    this.fvalAST1s1P = new ParsedConcreteFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTs1;
        val expression = this.newInstASTs1;
        val annotations = makeLinkedList();
    };
    this.fvalAST1u1P = new ParsedAbstractFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTu1;
        val annotations = makeLinkedList();
    };
    this.fvarAST2e2P = new ParsedAbstractFieldDecl {
        val name = this.fieldID2;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTe2;
        val annotations = makeLinkedList();
    };
    this.fvalAST1u1 = new ParsedConcreteFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTu1;
        val expression = this.newInstASTs1;
        val annotations = makeLinkedList();
    };
    this.fvarAST1u1 = new ParsedAbstractFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTu1;
        val annotations = makeLinkedList();
    };
    this.fvarAST1s1 = new ParsedAbstractFieldDecl {
        val name = this.fieldID1;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTs1;
        val annotations = makeLinkedList();
    };
    this.fvalAST2i2 = new ParsedAbstractFieldDecl {
        val name = this.fieldID2;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTi2;
        val annotations = makeLinkedList();
    };
    this.fvalAST2e2 = new ParsedAbstractFieldDecl {
        val name = this.fieldID2;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTe2;
        val annotations = makeLinkedList();
    };
    this.fvalAST2e3 = new ParsedAbstractFieldDecl {
        val name = this.fieldID2;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTe3;
        val annotations = makeLinkedList();
    };
    this.fvalAST3u1 = new ParsedAbstractFieldDecl {
        val name = this.fieldID3;
        val modifiers = makeLinkedList();
        val specifier = new ParsedValSpecifier;
        val fieldType = this.typeASTu1;
        val annotations = makeLinkedList();
    };
    this.fvarAST3u1 = new ParsedAbstractFieldDecl {
        val name = this.fieldID3;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTu1;
        val annotations = makeLinkedList();
    };
    this.fvarAST4s4 = new ParsedAbstractFieldDecl {
        val name = this.fieldID4;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTs4;
        val annotations = makeLinkedList();
    };
    this.fvarAST4s4 = new ParsedAbstractFieldDecl {
        val name = this.fieldID4;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTs4;
        val annotations = makeLinkedList();
    };
    
    mods = makeLinkedList();
    mods.add(new ParsedOverrideModifier);
    this.fvarAST1u2 = new ParsedConcreteFieldDecl {
        val name = this.fieldID1;
        val modifiers = mods;
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTu2;
        val expression = this.newInstASTs2;
        val annotations = makeLinkedList();
    };
    this.fvarAST4i4 = new ParsedConcreteFieldDecl {
        val name = this.fieldID4;
        val modifiers = makeLinkedList();
        val specifier = new ParsedVarSpecifier;
        val fieldType = this.typeASTi4;
        val expression = this.newInstASTs4;
        val annotations = makeLinkedList();
    };
    
      // ***** State AST *****//
    /*  
     * hierarchy:
     *
     *       state1        state4
     *      /      \
     *   state2   state3
     *  (immutable)
     *
     */
    decls = makeLinkedList();
    decls.addFirst(this.fvarAST1u1);
    decls.addFirst(this.fvalAST3u1);
    decls.addFirst(this.methodAST1Ru1A1u1n12u1u1Tu1n1E);
    decls.addFirst(this.methodAST2Ru1A1u1n12u1u1TE);
    this.stateAST1 = new ParsedConcreteStateDecl {
      val name = this.stateID1;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val stateBinding = new ParsedDeclList { val decls = decls; };
      val annotations = makeLinkedList();
    };
    decls = makeLinkedList();
    decls.add(this.fvalAST3u3);
    mods = makeLinkedList();
    mods.add(new ParsedImmutableModifier);
    this.stateAST2 = new ParsedConcreteStateDecl {
      val name = this.stateID2;
      val modifiers = mods;
      val caseOf = this.stateQI1;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val stateBinding = new ParsedDeclList { val decls = decls; };
      val annotations = makeLinkedList();
    };
    decls = makeLinkedList();
    decls.addFirst(this.fvarAST1u2);
    decls.addFirst(this.fvalAST3u3);
    decls.addFirst(this.fvarAST4i4);
    this.stateAST3 = new ParsedConcreteStateDecl {
      val name = this.stateID3;
      val modifiers = makeLinkedList();
      val caseOf = this.stateQI1;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val stateBinding = new ParsedDeclList { val decls = decls; };
      val annotations = makeLinkedList();
    };
    decls = makeLinkedList();
    decls.addFirst(this.fvarAST1u1);
    decls.addFirst(this.fvarAST3u1);
    this.stateAST4 = new ParsedConcreteStateDecl {
      val name = this.stateID4;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val stateBinding = new ParsedDeclList { val decls = decls; };
      val annotations = makeLinkedList();
    };
    this.stateASTString = new ParsedStateDecl {
      val name = this.stateIDString;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val annotations = makeLinkedList();
    };
    this.stateASTInt = new ParsedStateDecl {
      val name = this.stateIDInt;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val annotations = makeLinkedList();
    };
    this.stateASTDouble = new ParsedStateDecl {
      val name = this.stateIDDouble;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
      val annotations = makeLinkedList();
    };
    
    
    
    
   
  }
  

}