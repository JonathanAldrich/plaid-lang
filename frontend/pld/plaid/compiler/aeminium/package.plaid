package plaid.compiler.aeminium;



/*****************************************************************************
 ** global type map Symbol -> DependecyInformation
 ****************************************************************************/
var shared Map aeminiumSymbolToDepsMap = java.util.IdentityHashMap.new();

method void setDepInfoForSymbol(immutable Symbol symbol, unique DependencyInformation info) {
     aeminiumSymbolToDepsMap.put(symbol, info);
}

method immutable Option depInfoForSymbol(immutable Symbol symbol) {
    ifElse (aeminiumSymbolToDepsMap.containsKey(symbol) ) {
        makeSome(aeminiumSymbolToDepsMap.get(symbol));
    }{
        NONE
    }
}


/*****************************************************************************
 ** global type map ASTNode -> DependecyInformation
 ****************************************************************************/
var shared Map aeminiumASTToDepsMap = java.util.IdentityHashMap.new();

method void addDepInfoForAST(immutable ASTNode node, unique DependencyInformation info) {
     aeminiumASTToDepsMap.put(node, info);
}

method immutable Option depInfoForAST(immutable ASTNode node) {
    ifElse (aeminiumASTToDepsMap.containsKey(node) ) {
        makeSome(aeminiumASTToDepsMap.get(node));
    }{
        NONE
    }
}

/*****************************************************************************
 ** factory methods
 ****************************************************************************/
 
 var immutable Integer depInfoIdCounter = 0;
 
 method unique ASTInformation makeASTInformation(immutable ASTNode node) {
    depInfoIdCounter = depInfoIdCounter + 1;
    new ASTInformation {
        val id   = depInfoIdCounter;
        val deps = java.util.HashSet.new();
        val node = node;
    }
 }
 
 method unique SpitInformation makeSplitInformation(shared Symbol symbol,
                                                    immutable Permission permIn,
                                                    immutable Permission permOut) {
    depInfoIdCounter = depInfoIdCounter + 1;
    new SplitInformation {
        val id      = depInfoIdCounter;
        val deps    = java.util.HashSet.new();
        val symbol  = symbol;
        val permIn  = permIn;
        val permOut = permOut;
    }
}

method unique JoinInformation makeJoinInformation(shared Symbol symbol,
                                                  immutable Permission permIn,
                                                  immutable Permission permOut) {
    depInfoIdCounter = depInfoIdCounter + 1;
    new JoinInformation {
        val id      = depInfoIdCounter;
        val deps    = java.util.HashSet.new();
        val symbol  = symbol;
        val permIn  = permIn;
        val permOut = permOut;
    }
}