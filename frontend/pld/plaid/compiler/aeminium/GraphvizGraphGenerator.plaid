package plaid.compiler.aeminium;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.util.*;

state GraphvizGraphGenerator case of DependencyInformationCollector {
    val immutable ParsedDecl declNode;

    method immutable String dump() {
        val sb = java.lang.StringBuilder.new();
        
        // collect nodes
        this.declNode.accept(this);
        
        sb.append("digraph " + this.getName() + " {\n");
        sb.append("    rankdir=BT;\n");
        
        // dump nodes
        val itNodes = this.getNodes().iterator();
        while {itNodes.hasNext()}{
             val node = itNodes.next();
             sb.append("    n" + node.getID() + "[label=\""+node.toString()+"\"];\n");
            
             val depsIt = node.deps.iterator();
             while {depsIt.hasNext()}{
                 val target = depsIt.next();
                 sb.append("    n" + node.getID() + " -> n" +target.getID() +";\n");
             };
             sb.append("\n");
        };
    
        sb.append("}\n");
        
        sb.toString();
    }
}