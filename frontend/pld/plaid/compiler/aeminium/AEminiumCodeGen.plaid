package plaid.compiler.aeminium;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import this.seqOps.codegenMethodBody;
import this.seqOps.makeSeperatedString;
import this.seqOps.CodeGenOps;

import plaid.fastruntime.NamingConventions;

state AEminiumCodeGen case of CodeGenOps {
    val immutable SequentialCodeGenOps seqOps = makemakeSequentialCodeGenOps();

    method void LOG(immutable String msg) {
        DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumCodeGen> " + msg);
    }

    method codegenCU(immutable CodeGenOps ops, unique Job job, immutable ParsedCompilationUnit node) {
        this.seqOps.codegenCU(this, job, node);
    }
    
    method codegenTopLevelDecl(immutable CodeGenOps ops, immutable ParsedDecl node, immutable String packageName, shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        this.seqOps.codegenTopLevelDecl(this, node, packageName, sb, idgen, classNameCounter);
    }
    
    method codegenInnerDecl(immutable CodeGenOps ops, immutable ParsedDecl node,  shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        this.seqOps.codegenInnerDecl(this, node, sb, idgen, classNameCounter);
    }
    
    method codegenMethodBody(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        this.seqOps.codegenMethodBody(this, node, sb, idgen, classNameCounter);
    }
    
    method codegenCaseBody(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter) {
        this.seqOps.codegenCaseBody(this, node, sb, idgen, y, classNameCounter);
    }
    
    method codegenStmt(immutable CodeGenOps ops, immutable Stmt node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter) {
        this.seqOps.codegenStmt(this, node, sb, idgen, y, classNameCounter);
    }
    
    method codegenLambda(immutable CodeGenOps ops, args, body, sb, idgen, y, classNameCounter)  {
        this.seqOps.codegenLambda(this, args, body, sb, idgen, y, classNameCounter);
    }
    
    method codegenStateExpr(immutable CodeGenOps ops, immutable Stmt node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter)  {
        this.seqOps.codegenStateExpr(this, node, sb, idgen, y, classNameCounter);
    }
    
    method codegenApplication(immutable CodeGenOps ops, immutable ParsedExpr functionExpr, immutable List args, 
	    					  shared StringBuilder sb, shared IdGen idgen, 
		    				  immutable String y, classNameCounter) {
        this.seqOps.codegenApplication(this, functionExpr, args, sb, idgen, y, classNameCounter);
    }
}