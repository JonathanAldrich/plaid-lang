package plaid.compiler.aeminium;

import plaid.ast.parsed.*;
import plaid.compiler.*;

state AEminiumCodeGen case of ParsedLeafVisitor {
    val shared Map astToTaskMap;

    method shared Task getTaskForAST(immutable ASTNode node) {
        ifElse (this.astToTaskMap.contains(node)) {
            this.astToTaskMap.get(node)
        }{
            ABORT("<AEminium CodeGen> Cannot find task for " + node.toString());
        }
    }

    override method void LOG(immutable String msg) {
        DEBUG(DEBUG_PRIO_LOW, "<AEminium CodeGen> " + msg);
	}
	
	override method void visitParsedAbstractFieldDecl(immutable ParsedAbstractFieldDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAbstractMethodDecl(immutable ParsedAbstractMethodDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAbstractStateDecl(immutable ParsedAbstractStateDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAbstractStateValDecl(immutable ParsedAbstractStateValDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAnnotation(immutable ParsedAnnotation node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedApplication(immutable ParsedApplication node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedArg(immutable ParsedArg node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedArgSpec(immutable ParsedArgSpec node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedArgumentExpr(immutable ParsedArgumentExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAssignment(immutable ParsedAssignment node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedAtomicBlock(immutable ParsedAtomicBlock node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedBlockExpr(immutable ParsedBlockExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedCast(immutable ParsedCast node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedCompilationUnit(immutable ParsedCompilationUnit node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedConcreteFieldDecl(immutable ParsedConcreteFieldDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedConcreteMethodDecl(immutable ParsedConcreteMethodDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedConcreteStateDecl(immutable ParsedConcreteStateDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedConcreteStateValDecl(immutable ParsedConcreteStateValDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedConcreteType(immutable ParsedConcreteType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedDeclList(immutable ParsedDeclList node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedDefaultCase(immutable ParsedDefaultCase node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedDereference(immutable ParsedDereference node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedDestructiveDereference(immutable ParsedDestructiveDereference node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedDoubleLiteral(immutable ParsedDoubleLiteral node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyArgSpec(immutable ParsedEmptyArgSpec node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyExpr(immutable ParsedEmptyExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyGroupPermission(immutable ParsedEmptyGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyPermission(immutable ParsedEmptyPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyQualifiedIdentifier(immutable ParsedEmptyQualifiedIdentifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptySpecifier(immutable ParsedEmptySpecifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedEmptyType(immutable ParsedEmptyType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedExclusiveGroupPermission(immutable ParsedExclusiveGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedFreeze(immutable ParsedFreeze node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedGroupArg(immutable ParsedGroupArg node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedGroupDecl(immutable ParsedGroupDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedGroupType(immutable ParsedGroupType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedIdentifier(immutable ParsedIdentifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedImmutableModifier(immutable ParsedImmutableModifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedImmutablePermission(immutable ParsedImmutablePermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedImport(immutable ParsedImport node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedInfixOperatorExpr(immutable ParsedInfixOperatorExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedIntLiteral(immutable ParsedIntLiteral node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedLambda(immutable ParsedLambda node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedLambdaStructure(immutable ParsedLambdaStructure node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedLiteral(immutable ParsedLiteral node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedLocalPermission(immutable ParsedLocalPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedLocalStateValDecl(immutable ParsedLocalStateValDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedMatch(immutable ParsedMatch node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedMethodCall(immutable ParsedMethodCall node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedMutableGroupPermission(immutable ParsedMutableGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedNewInstance(immutable ParsedNewInstance node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedNominalStructure(immutable ParsedNominalStructure node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedNonePermission(immutable ParsedNonePermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedOperatorExpr(immutable ParsedOperatorExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedOverrideModifier(immutable ParsedOverrideModifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedPatternCase(immutable ParsedPatternCase node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedProtectedGroupPermission(immutable ParsedProtectedGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedQualifiedIdentifier(immutable ParsedQualifiedIdentifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedReadOnlyGroupPermission(immutable ParsedReadOnlyGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedReplace(immutable ParsedReplace node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedRequiresModifier(immutable ParsedRequiresModifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedSharedGroupPermission(immutable ParsedSharedGroupPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedSharedPermission(immutable ParsedSharedPermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedSplitBlock(immutable ParsedSplitBlock node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStateChange(immutable ParsedStateChange node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStateOp(immutable ParsedStateOp node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStateOpRemove(immutable ParsedStateOpRemove node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStateOpRename(immutable ParsedStateOpRename node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStateRef(immutable ParsedStateRef node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStaticArg(immutable ParsedStaticArg node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStaticType(immutable ParsedStaticType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedStringLiteral(immutable ParsedStringLiteral node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedTypeArg(immutable ParsedTypeArg node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedTypeArgType(immutable ParsedTypeArgType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedUnaryOperatorExpr(immutable ParsedUnaryOperatorExpr node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedUniquePermission(immutable ParsedUniquePermission node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedUnitLiteral(immutable ParsedUnitLiteral node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedUnitType(immutable ParsedUnitType node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedUnpackInnerGroups(immutable ParsedUnpackInnerGroups node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedValSpecifier(immutable ParsedValSpecifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedVarDecl(immutable ParsedVarDecl node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedVarSpecifier(immutable ParsedVarSpecifier node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
	override method void visitParsedWith(immutable ParsedWith node){ ABORT("<AEminium CodeGen> does not support AST node " + node.nodeName() ) }
}