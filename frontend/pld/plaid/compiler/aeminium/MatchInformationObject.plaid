package plaid.compiler.aeminium;

import plaid.compiler.*;
import plaid.compiler.types.*;
import plaid.compiler.aeminium.*;
import plaid.ast.parsed.*;

import plaid.collections.makeLinkedList;

state MatchInformationObject {
    val shared MatchEnterInformation enterInfo;
    val shared MatchLeaveInformation leaveInfo;
    val unique Set/*<CaseInformationObject>*/ caseInfos;
    
    method unique Option caseInfoForAST(immutable ASTNode node) {
        DEBUG(DEBUG_PRIO_LOW, "<MatchInformationObject>  caseInfoForAST ");
        var result = new None;
        
        val nodeSet = java.util.HashSet.new();
        nodeSet.add(node);
        
        val caseIt = this.caseInfos.iterator();
        while { caseIt.hasNext() }{
            val curCase = caseIt.next();
            
            val infosIt = curCase.infosMatchLeaveDependsOn.iterator();
            while { infosIt.hasNext() }{
                val curInfo = infosIt.next();
                match ( curInfo ) {
                    case ASTInformation { 
                        if ( nodeSet.contains(curInfo.node) ) {
                            result = makeSome(curCase);
                        }
                    }
                    default { /*nop*/ }
                };
            };
        };
        
        result
    }
    
    method immutable String toString() {
        "MatchInformationObject" + enterInfo.node.token.toString() 
    }
}