package plaid.compiler.aeminium;

import plaid.compiler.*;
import plaid.compiler.types.*;
import plaid.compiler.aeminium.*;
import plaid.ast.parsed.*;

import plaid.collections.makeLinkedList;

state MethodInformationObject {
    // all top-level tasks of the method body 
    val unique List tasks;
    val unique Set /*<MatchInformationObjects>*/ matchInfos;
    val unique Map /*<MatchLeaveInformation, Set<CaseTashGraph>>*/ matchFixupTable;
    
    method immutable Boolean isSingleTask() {
        ifElse( tasks.size() == 1 && matchInfos.size() == 0 ) {
            true
        }{
            false 
        }
    }

    method unique Set expandMatches(immutable String path) {
        val tb = new TaskBuilderPass;
        tb.matchFixupTable.clear();
        tb.matchFixupTable.putAll(this.matchFixupTable);
        val expTasks = tb.expandMatchBlocks(path, this.tasks);
        val noTransTasks = tb.removeTransitiveEdgesFromTasks(expTasks);
        dumpTaskGraph(path, "TASK-FINAL", noTransTasks);
    }
    
    
    method unique Set getAllTasks() {
        // TODO: implement me
    }
}