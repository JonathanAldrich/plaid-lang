package plaid.compiler.aeminium;

import plaid.ast.parsed.*;
import plaid.ast.util.*;

state ASTInformation case of DependencyInformation {
    val immutable ParsedASTNode node;
    
    method immutable String toString() {
        val immutable String nodeDescription = match (this.node ) {
            case ParsedArg {
                "Arg '" + this.node.name.name +"'" 
            }
            case ParsedAssignment {
                val immutable String value = match (this.node.target) {
                    case ParsedEmptyExpr { this.node.field.name }
                    case ParsedIdentifier { this.node.target.name + "." + this.node.field.name }
                    default { "[exp]." + this.node.field.name }
                };
                "Assignment '" + value + "'"
            }
            case ParsedBlockExpr {
                "Block"
            }
            case ParsedDefaultCase {
                "DefaultCase"
            }
            case ParsedDereference {
                val immutable String value = match (this.node.left) {
                   case ParsedIdentifier { 
                      this.node.left.name + "." + this.node.right.name
                   }
                   default { "[exp]." + this.node.right.name }
                };
                "Dereference '" + value + "'"
            }
            case ParsedDoubleLiteral {
                "Double '" + this.node.value + "'"             
            }
            case ParsedIdentifier {
                "Id '" + this.node.name +"'"
            }
            case ParsedIntLiteral {
                "Integer '" + this.node.value + "'"             
            }
            case ParsedMethodCall {
                val immutable String receiver = match ( this.node.receiver ) {
                    case ParsedIdentifier { this.node.receiver.name +"." }
                    default { "[...]." }
                };
                "MethodCall '" + receiver + this.node.methodId.name +"'"
            }
            case ParsedPatternCase {
                "PatterCase '" + makeStringFromQualifiedIdentifier(this.node.pattern) +"'"
            }
            case ParsedStringLiteral {
                "String '" + this.node.value + "'"
            }
            case ParsedVarDecl {
                "VarDecl '" + this.node.id.name + "'"
            }
            default { this.node.nodeName() }
        };
        nodeDescription + " "+ node.token.toString()+ " (" + this.getID() + ")"
    }
}