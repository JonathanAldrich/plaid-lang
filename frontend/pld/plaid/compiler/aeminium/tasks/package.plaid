package plaid.compiler.aeminium.tasks;


/*****************************************************************************
 ** helper functions
 ****************************************************************************/

method void dumpTaskGraph(immutable String name, immutable String suffix,  unique Set tasks) {
    val sb = java.lang.StringBuilder.new();
    
    val graphName = name.substring(name.lastIndexOf(".")+1);
    sb.append("digraph " + graphName + " {\n");
    sb.append("    rankdir=BT;\n");
        
    // dump nodes
    val tasksIt = tasks.iterator();
    while { tasksIt.hasNext() }{
        val task = tasksIt.next();
                    
        sb.append("    n" + task.getID() + "[shape=box,label=\""+task.toString()+"\"];\n");

        val depsIt = task.deps.iterator();
        while {depsIt.hasNext()}{
            val target = depsIt.next();
            sb.append("    n" + task.getID() + " -> n" +target.getID() +";\n");
        };
        sb.append("\n");
    };
    
    sb.append("}\n");


    // dump file 
    val file = java.io.File.new(name+ "." + suffix + ".dot");
    val fw = java.io.FileWriter.new(file);
    fw.write(sb.toString());
    fw.flush();
    fw.close();
}


/*****************************************************************************
 ** fast method cache  cache 
 ****************************************************************************/

val fastMethodCache = java.util.HashSet.new();

method void fastMethodCacheAdd(immutable String fqn) {
    DEBUG(DEBUG_PRIO_LOW, "<fastMethodCacheAdd>  fastMethodCacheAdd '" + fqn + "'" );
    fastMethodCache.add(fqn);
}

method immutable Boolean fastMethodCacheContains(immutable String fqn) {
    fastMethodCache.contains(fqn);
}

/*****************************************************************************
 ** factory methods
 ****************************************************************************/

var immutable Integer taskCounter = 0;

method unique Task makeTask(shared Resolver resolver) {
    taskCounter = taskCounter + 1;
    
    new Task {
        val id = taskCounter;
        val resolver = resolver;
    };
}
