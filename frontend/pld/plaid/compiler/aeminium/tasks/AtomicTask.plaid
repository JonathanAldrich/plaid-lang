package plaid.compiler.aeminium.tasks;

import plaid.compiler.*;
import plaid.compiler.types.*;
import plaid.compiler.aeminium.*;
import plaid.ast.parsed.*;

state AtomicTask case of Task {  

    method void setSubGraph(unique Set tasks) {
        val it = tasks.iterator();
        while { it.hasNext() }{ 
            val curTask = it.next();
            this.infos.addAll(curTask.infos);
        };
    }
    
    override method immutable String toString() {
        var sb = java.lang.StringBuilder.new();
        sb.append("Atomic[");
        
        val it = this.infos.iterator();
        while { it.hasNext() }{
            sb.append(it.next().getID() + ",");
        };
        
        if ( sb.length() > 1 ) {
            sb.deleteCharAt(sb.length() - 1);
        };
        sb.append("]<" +this.getWeight() + ">");
        
        sb.toString();
    }
}