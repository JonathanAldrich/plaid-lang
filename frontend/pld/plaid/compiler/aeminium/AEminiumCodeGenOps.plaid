package plaid.compiler.aeminium;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.symbol.*;
import plaid.compiler.codegen.codegenMethodBody;
import plaid.compiler.codegen.makeSeperatedString;
import plaid.compiler.codegen.CodeGenOps;
import plaid.compiler.codegen.makeSequentialCodeGenOps;
import plaid.compiler.util.*;
import plaid.compiler.passes.TaskBuilderPass;

import plaid.collections.LinkedList;
import plaid.collections.makeLinkedList;

import plaid.fastruntime.NamingConventions;

state AEminiumCodeGenOps case of CodeGenOps {
    val immutable String LOCAL_VARIABLE_ARRAY = "_";
    val immutable String TASK_ARRAY = "TA$K$";
    val immutable String LOCAL_AEMINIUM_RUNTIME = "AE$RT";
    val immutable SequentialCodeGenOps seqOps = makeSequentialCodeGenOps();
    var shared Map methodInfoObjMap;
    var shared MethodInformationMap curMethodInfo = "<UNINITIALIZED>";
    val unique Map syncVarForTaskMap = java.util.HashMap.new();
    var shared IdGen idgen;

    var immutable Integer localVariableCounter = -1;
    val unique Set localVariableMap = java.util.HashMap.new(); // maps original var names to index 
    
    method void reset() {
        this.localVariableCounter = -1;
        this.localVariableMap.clear();
        this.syncVarForTaskMap.clear();
        this.curMethodInfo = "<UNINITIALIZED>";
    }

    method immutable String indexToString(immutable Integer index) {
        this.LOCAL_VARIABLE_ARRAY + "[" + index.toString() + "]"
    }

    method immutable Integer nextLocalVariableIndex() {
        this.localVariableCounter = this.localVariableCounter + 1;        
        this.localVariableCounter
    }
    
    method immutable String getSyncVarForTask(shared Task task) {
        match ( this.syncVarForTaskMap.containsKey(task) ) {
            case True { /* nop */ }
            case False {
                val syncVar = idgen.getId();
                this.syncVarForTaskMap.put(task, syncVar);
                this.createLocalVariable(syncVar, java.lang.StringBuilder.new(), false);
            }
        };
        
        this.syncVarForTaskMap.get(task);
    }

    method void LOG(immutable String msg) {
        DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumCodeGenOps> " + msg);
    }

    method codegenCU(immutable CodeGenOps ops, unique Job job, immutable ParsedCompilationUnit node) {
        LOG("codegenCU");
        var immutable Boolean haveAEminiumData = false; 
        match ( job.getJobData(AEMINIUM_METHOD_INFORMATION_MAP) ) {
            case Some { 
                DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumCodeGenOps> found AEminium method information map.");
                this.methodInfoObjMap = job.getJobData(AEMINIUM_METHOD_INFORMATION_MAP).value.methodInfoMap;
                haveAEminiumData = true;
            }
            case None { /*noop*/ }
        };
        
        match ( haveAEminiumData ) {
            case True  { this.seqOps.codegenCU(this, job, node) }
            case False { this.seqOps.codegenCU(this.seqOps, job, node) }
        };
    }
    
    method codegenTopLevelDecl(immutable CodeGenOps ops, immutable ParsedDecl node, immutable String packageName, shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        LOG("codegenTopLevelDecl");
        this.idgen = idgen;
        match ( node ) {
            case ParsedConcreteStateDecl { this.seqOps.codegenTopLevelDecl(this, node, packageName, sb, idgen, classNameCounter) }
            case ParsedConcreteMethodDecl { 
                match ( isMethodParallel(node)  ) {
                    case True { 
                        this.seqOps.codegenTopLevelDecl(this, node, packageName, sb, idgen, classNameCounter);
                        this.codegenMethodPostlude(node);
                    }
                    case False { 
                        val mainOnlyOps = new AEminiumCodeGenOpsMainOnly;
                        this.seqOps.codegenTopLevelDecl(mainOnlyOps, node, packageName, sb, idgen, classNameCounter);
                    }
                };
            }
            default { this.seqOps.codegenTopLevelDecl(this.seqOps, node, packageName, sb, idgen, classNameCounter) }
        };
    }
    
    method codegenInnerDecl(immutable CodeGenOps ops, immutable ParsedDecl node, shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        LOG("codegenInnerDecl");
        match ( node ) {
            case ParsedConcreteMethodDecl { 
                match ( isMethodParallel(node)  ) {
                    case True { 
                        this.seqOps.codegenInnerDecl(this, node, sb, idgen, classNameCounter);
                        this.codegenMethodPostlude(node);
                    }
                    case False { this.seqOps.codegenInnerDecl(this.seqOps, node, sb, idgen, classNameCounter) }
                };
            }
            default { this.seqOps.codegenInnerDecl(this.seqOps, node, sb, idgen, classNameCounter) }
        };
    }
    
    method void codegenMethodPostlude(immutable ParsedConcreteMethodDecl node) {
        val shared Symbol methSymbol = match (symbolForAST(node)) {
            case Some  { symbolForAST(node).value }
            case None  { ABORT("<AEminiumCodeGenOps> cannot find symbol for " + node.nodeName()) }
        };
        val name = methSymbol.name;
        val path = symbolToString(methSymbol);

        // dump final graph 
        this.curMethodInfo.dumpFinalTaskGraph(path);
        
        //reset internal data structures
        this.reset();

    }
    
    method void isMethodParallel(immutable ParsedConcreteMethodDecl node) {
        val shared Symbol methSymbol = match (symbolForAST(node)) {
            case Some  { symbolForAST(node).value }
            case None  { ABORT("<AEminiumCodeGenOps> cannot find symbol for " + node.nodeName()) }
        };
        val name = methSymbol.name;
        val path = symbolToString(methSymbol);
        
        var immutable Boolean generateSequentialCode = true;

        match ( this.methodInfoObjMap.containsKey(node) ) {
            case True {
                DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumCodeGenOps> found method information for method '" + path + "." + node.name.name + "'");
                this.curMethodInfo = this.methodInfoObjMap.get(node);
                
                match ( this.curMethodInfo.isSingleTask() ) {
                    case True  { 
                        DEBUG(DEBUG_PRIO_HIGH, "<AEminiumCodeGenOps> method '" +  path + "." + node.name.name + "' consists of only one task => SEQUENTIALIZE" );
                        generateSequentialCode = true;
                    }
                    case False { generateSequentialCode = false } 
                };
            }
            case False { /* nop */ }
        };

        generateSequentialCode == false    
    }
    
    method codegenMethodBody(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen, classNameCounter) {
        LOG("codegenMethodBody");
        val tmpSB = java.lang.StringBuilder.new();
        this.seqOps.codegenMethodBody(this, node, tmpSB, idgen, classNameCounter);
        // local cache for runtime reference
        sb.append("/* local runtime reference */\n"); 
        sb.append("final aeminium.runtime.Runtime " + this.LOCAL_AEMINIUM_RUNTIME + " = ((aeminium.runtime.implementations.implicitworkstealing.scheduler.WorkStealingThread)java.lang.Thread.currentThread()).rt;\n\n");

        sb.append("if ( " + this.LOCAL_AEMINIUM_RUNTIME + ".parallelize() == false ) {\n");
        // create sequential code for this method 
        sb.append("/* sequential code for the case that we have enough parallelism */\n");
        val seqSB = java.lang.StringBuilder.new();
        this.seqOps.codegenMethodBody(this.seqOps, node, seqSB, idgen, classNameCounter);
        sb.append(seqSB);
        sb.append("} else {\n");
        
        // create parallel code  
        sb.append("/* array for local variables */\n");
        sb.append("final java.util.concurrent.atomic.AtomicReferenceArray<plaid.fastruntime.PlaidObject> " + this.LOCAL_VARIABLE_ARRAY + " = new java.util.concurrent.atomic.AtomicReferenceArray<plaid.fastruntime.PlaidObject>(" + (this.localVariableCounter + 1) + ");\n" );

        sb.append("\n/* array for tasks */\n");
        sb.append("final aeminium.runtime.Task[] " + this.TASK_ARRAY + " = new aeminium.runtime.Task[" + (this.curMethodInfo.getAllTasks().size()) + "];\n" );
        
        sb.append("\n/* initialize sync objects */\n");
        val initSyncObjsIt = this.syncVarForTaskMap.entrySet().iterator();
        while { initSyncObjsIt.hasNext() }{
            val curEntry = initSyncObjsIt.next();
            val curTask = curEntry.getKey();
            val curSyncVar = curEntry.getValue();
            this.setLocalVariable(curSyncVar, "new plaid.fastruntime.aeminium.AEminiumMatchSyncPlaidObject(" + curTask.getOpenMatchLeaves().size() + ")",  sb);
        };

        sb.append("\n/* generate tasks */\n");         
        var unique Set startTasks = java.util.HashSet.new();
        var shared Tasj bodyTask = "<UNINITIALIZED>";
        var preludeIt = this.curMethodInfo.tasks.iterator();
        while { preludeIt.hasNext() }{
            val curTask = preludeIt.next();
            
            val isBodyTask = if ( true )  {
                val astNodes = java.util.HashSet.new();
                val infosIt = curTask.infos.iterator();
                while{ infosIt.hasNext() }{
                    val curInfo = infosIt.next();
                    match ( curInfo ) {
                        case ASTInformation {
                            astNodes.add(curInfo.node);
                        }
                        default { /*nop*/ } 
                    };
                };
                // return matching 
                astNodes.contains(node)
            };
            
            ifElse ( isBodyTask == false ) {
                if ( curTask.deps.size() == 0 ) {
                    LOG("Found start task '" + curTask + "'");
                    startTasks.add(curTask);
                }
            }{
                LOG("Found body task '" + curTask + "'");
                bodyTask = curTask;
            }
        };

         // if we have only one start task do inlining otherwise just create all start tasks
        if( startTasks.size() != 1 ) {
            startTasks.clear();
        };
               
        // create other tasks ( except body task ) 
        val tasksIt = this.curMethodInfo.tasks.iterator();
        while { tasksIt.hasNext() }{
            val curTask = tasksIt.next();
            if( curTask != bodyTask && startTasks.contains(curTask) == false  ) {
                sb.append(createTaskString("", curTask, ""));
            };
        };

        // if we have only one start task do inlining otherwise just create all start tasks
        if ( startTasks.size() == 1 ) {
            sb.append("\n/* inlined start task */\n");                
            sb.append(startTasks.iterator().next().getBodyStringBuilder().toString());
        };

        // create other tasks ( except body task ) 
        sb.append("\n/* schedule task */\n"); 
        val scheduleIt = this.curMethodInfo.tasks.iterator();
        while { scheduleIt.hasNext() }{
            val curTask = scheduleIt.next();
            if( curTask != bodyTask && startTasks.contains(curTask) == false  ) {
                val deps = java.util.HashSet.new(curTask.deps);
                deps.removeAll(startTasks);
                val depsString = ifElse ( deps.size() == 0  ) {
                    "aeminium.runtime.Runtime.NO_DEPS"
                }{
                    val depsSB = java.lang.StringBuilder.new();
                    depsSB.append("java.util.Arrays.asList(");
                    val depsIt = deps.iterator();
                    while { depsIt.hasNext() }{
                        val curDep = depsIt.next();
                        depsSB.append(this.getTaskArrayElement(curDep) + ",");
                    };
                    depsSB.deleteCharAt( depsSB.length() - 1 );
                    depsSB.append(")");
                    depsSB.toString();
                };
                sb.append(this.LOCAL_AEMINIUM_RUNTIME + ".schedule(" + this.getTaskArrayElement(curTask) + ", "  + "aeminium.runtime.Runtime.NO_PARENT, "+ depsString + ");\n" );
            };
        };

       
        // inline last Task 
        sb.append("\n/* inlined body task */\n");
        val bodyDepsIt = bodyTask.deps.iterator();
        while { bodyDepsIt.hasNext() }{
            val bodyDepTask = bodyDepsIt.next();
            if ( startTasks.contains(bodyDepTask) == false ) {
                sb.append(this.getTaskArrayElement(bodyDepTask) +".getResult();\n");
            }
        };
        sb.append(this.codegenTaskOpenLeaves(bodyTask));
        sb.append(bodyTask.getBodyStringBuilder().toString());  
        
        //append method return code
        sb.append("\n/* non task code */\n"); 
        sb.append(tmpSB.toString());  
        
        sb.append("}\n");   
    }
    
    
    method codegenStmtBlock(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter) {
        LOG("codegenStmtBlock");
        this.seqOps.codegenStmtBlock(this, node, sb, idgen, y, classNameCounter);
    }
    
    method codegenStmt(immutable CodeGenOps ops, immutable Stmt node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter) {
        LOG("codegenStmt");
        match ( this.curMethodInfo.taskForAST(node) ) {
            case Some { 
                val task = this.curMethodInfo.taskForAST(node).value;
                LOG("Found task '" + task.toString() + "'");
                val taskSB = task.getBodyStringBuilder();
                match (node) {
                    case ParsedMatch {
                        LOG("AEminium match code generation");
                        // check if the match has been inlined 
                        match ( this.curMethodInfo.matchInfoForAST(node) ) {
                            case Some { 
                                val matchInfo = this.curMethodInfo.matchInfoForAST(node).value;
                                
                                // do some voodoo to make match working
                                val exprVarName = idgen.getId();
                                ops.createLocalVariable(exprVarName, sb, false);
                                ops.codegenStmt(this.seqOps, node.expression, taskSB, idgen, exprVarName, classNameCounter);
                                
                                val caseStringList = makeLinkedList();
                                node.caseList.do(fn (caseItem) => {
                                    match ( caseItem ) {
                                        case ParsedPatternCase {
                                            val patternSymbolOption = symbolForAST(caseItem.pattern);
                                            match(patternSymbolOption) {
                                                case Some {                                                
                                                    val patternSymbol = patternSymbolOption.getValue();
                                                    match (patternSymbol) {
                                                        case StateSymbol {
                                                            val caseSB = java.lang.StringBuilder.new();
                                                            caseSB.append("if(" + ops.getLocalVariable(exprVarName) + ".getDispatch().matches(");
                                                            caseSB.append(patternSymbol.getFQN() + "." + NamingConventions.GENERATED_STATE_NAME + ".getTopTag())) {\n");
                                                            val bodyVarName = idgen.getId();
                                                            ops.createLocalVariable(bodyVarName, sb, false);
                                                            ops.codegenStmtBlock(ops, caseItem.body, caseSB, idgen, bodyVarName, classNameCounter);

                                                            // assign to block variable to last task 
                                                            val caseTask = match ( this.curMethodInfo.taskForAST(caseItem) ) {
                                                                case Some { this.curMethodInfo.taskForAST(caseItem).value }
                                                                case None { ABORT("Cannot find task for case.") }
                                                            };
                                                            ops.setLocalVariable(y, ops.getLocalVariable(bodyVarName), caseTask.getBodyStringBuilder());                                                            

                                                            
                                                            // generate code of tasks
                                                            DEBUG(DEBUG_PRIO_LOW, "<AEminiumCodeGenOps> look for case information for '" + makeStringFromQualifiedIdentifier(caseItem.pattern) + "'");
                                                            val caseInfo = match ( matchInfo.caseInfoForAST(caseItem) ) {
                                                                case Some { matchInfo.caseInfoForAST(caseItem).value } 
                                                                case None { ABORT("Cannot find case information for case.") } 
                                                            };
                                                            
                                                            // create other tasks ( except body task ) 
                                                            ifElse ( caseInfo.allTasks.size() == 1 ) {
                                                                // inline single task
                                                                caseSB.append(caseInfo.allTasks.iterator().next().getBodyStringBuilder().toString());
                                                            }{
                                                                val tasksString = createTasksAndScheduling(caseInfo.allTasks);
                                                                caseSB.append(tasksString);
                                                            };
                                                            
                                                            // schedule match leave task 
                                                            val leaveTask = match ( this.curMethodInfo.taskForDepInfo(matchInfo.leaveInfo) ) {
                                                                case Some { this.curMethodInfo.taskForDepInfo(matchInfo.leaveInfo).value }
                                                                case None { ABORT("Cannot find task for match leave.") }
                                                            };
                                                            
                                                            val leaveSyncVar = this.getSyncVarForTask(leaveTask);    
                                                            // create deps var string
                                                            val depsStringList = makeLinkedList();
                                                            val dependsOnIt = caseInfo.infosMatchLeaveDependsOn.iterator();
                                                            while { dependsOnIt.hasNext() }{
                                                                val curDependsOn = dependsOnIt.next();
                                                                val curDependsOnTask = match ( this.curMethodInfo.taskForDepInfo(curDependsOn) ) {
                                                                    case Some { this.curMethodInfo.taskForDepInfo(curDependsOn).value }
                                                                    case None { ABORT("Cannot find task for match leave.") }
                                                                };
                                                                depsStringList.add(this.getTaskArrayElement(curDependsOnTask));
                                                            };
                                                            val depsString = match ( caseInfo.allTasks.size() == 1 ) {
                                                                case True { "" }
                                                                case False { makeSeperatedString(depsStringList, ",") }
                                                            };
                                                            caseSB.append("/* register match */\n");
                                                            caseSB.append("@SuppressWarnings(\"unchecked\")\nfinal java.util.Collection<aeminium.runtime.Task> leaveDep$ = (java.util.Collection<aeminium.runtime.Task>)((plaid.fastruntime.aeminium.AEminiumMatchSyncPlaidObject)"+ this.getLocalVariable(leaveSyncVar) + ").registerMatch(java.util.Arrays.asList(" + depsString+ "));\n");                                        
                                                            caseSB.append("if ( leaveDep$ != null && " + this.getTaskArrayElement(leaveTask) + " != null ) {\n");
                                                            caseSB.append("/* schedule leave task */\n");
                                                            caseSB.append("if ( leaveDep$.size() == 0 ) {\n");
                                                            caseSB.append(this.LOCAL_AEMINIUM_RUNTIME + ".schedule(" + this.getTaskArrayElement(leaveTask) + ", "  + "aeminium.runtime.Runtime.NO_PARENT, aeminium.runtime.Runtime.NO_DEPS);\n" );
                                                            caseSB.append("} else { \n");
                                                            caseSB.append(this.LOCAL_AEMINIUM_RUNTIME + ".schedule(" + this.getTaskArrayElement(leaveTask) + ", "  + "aeminium.runtime.Runtime.NO_PARENT, leaveDep$);\n" );
                                                            caseSB.append("}\n");
                                                            caseSB.append("}\n");
                                                            
                                                            caseSB.append("}\n");
                                                            caseStringList.addLast(caseSB.toString());
                                                        }
                                                        default {
                                                            ABORT("Case pattern has unexpected symbol '" + patternSymbol.symbolType() + "'.");
                                                        }
                                                    }
                                                }
                                                case None {
                                                    ABORT("No symbol found for pattern in case.")
                                                }			
                                            };
                                        }
                                        case ParsedDefaultCase {
                                            LOG("Found default case");
                                            val caseSB = StringBuilder.new();
                                            val bodyVarName = idgen.getId();
                                            caseSB.append("{\n");
                                            caseSB.append("plaid.fastruntime.PlaidObject " + bodyVarName + ";\n");
                                            ops.codegenStmtBlock(ops, caseItem.body, caseSB, idgen, bodyVarName, classNameCounter);
                                            ops.setLocalVariable(y, ops.getLocalVariable(bodyVarName), caseSB);
                                            caseSB.append("}\n");
                                            caseStringList.addLast(caseSB.toString());
                                        }
                                    }
                                });
                                // concatenate cases 
                                val caseString = makeSeperatedString(caseStringList, "else ");
                                taskSB.append(caseString);
                                val lastCase = node.caseList.get(node.caseList.size() - 1).getValue();
                                match (lastCase) {
                                    case ParsedPatternCase {
                                        taskSB.append("else {\n");
                                        taskSB.append("throw new plaid.fastruntime.errors.PlaidIllegalOperationException(\"Pattern match exausted.\");\n");
                                        taskSB.append("}");
                                    }
                                    case ParsedDefaultCase {
                                        //no-op
                                    }
                                }
                            }
                            case None {                                                    
                                // add code to current task 
                                this.seqOps.codegenStmt(this.seqOps, node, taskSB, idgen, y, classNameCounter)  
                            }
                        };
                    }
                    default { this.seqOps.codegenStmt(this, node, taskSB, idgen, y, classNameCounter) }
                };
            }
            case None {
                LOG("Using default SB");
                this.seqOps.codegenStmt(this, node, sb, idgen, y, classNameCounter)
            }
        };
    }
    
    method codegenLambda(immutable CodeGenOps ops, args, body, sb, idgen, y, classNameCounter)  {
        LOG("codegenLambda");
        this.seqOps.codegenLambda(this, args, body, sb, idgen, y, classNameCounter);
    }
    
    method codegenStateExpr(immutable CodeGenOps ops, immutable Stmt node, shared StringBuilder sb, shared IdGen idgen, immutable String y, classNameCounter)  {
        LOG("codegenStateExpr");
        this.seqOps.codegenStateExpr(this, node, sb, idgen, y, classNameCounter);
    }
    
    method codegenApplication(immutable CodeGenOps ops, immutable ParsedExpr functionExpr, immutable List args, 
	    					  shared StringBuilder sb, shared IdGen idgen, 
		    				  immutable String y, classNameCounter) {
        LOG("codegenApplication");
        this.seqOps.codegenApplication(this, functionExpr, args, sb, idgen, y, classNameCounter);
    }
    
    method void codegenMain(immutable String methodName, unique StringBuilder sb) {
        sb.append("public static void main(String[] args) {\n");
        sb.append("\n/* initialize AEminium runtime */\n");
        sb.append("final aeminium.runtime.Runtime " + this.LOCAL_AEMINIUM_RUNTIME + " = aeminium.runtime.implementations.Factory.getRuntime();\n");
        sb.append(this.LOCAL_AEMINIUM_RUNTIME + ".init();\n");
        sb.append("\n/* create initial task */\n");
        sb.append("final aeminium.runtime.Task TA$K = " + this.LOCAL_AEMINIUM_RUNTIME + ".createNonBlockingTask(new aeminium.runtime.Body() {\n");
        sb.append( "@Override public void execute(final aeminium.runtime.Runtime rt, final aeminium.runtime.Task current) {\n");
        sb.append("" + methodName + "();\n");
        sb.append("}\n");
        sb.append("}\n");
        sb.append(", aeminium.runtime.Runtime.NO_HINTS);\n");
        sb.append("\n/* schedule initial task  */\n");
        sb.append(this.LOCAL_AEMINIUM_RUNTIME +".schedule(TA$K, aeminium.runtime.Runtime.NO_PARENT, aeminium.runtime.Runtime.NO_DEPS);\n");
        sb.append("\n/* wait until all task have completed and shutdown the runtime system */\n");
        sb.append(this.LOCAL_AEMINIUM_RUNTIME + ".shutdown();\n");
        sb.append("}\n"); // end main method
    }
    
    method void createLocalVariable(immutable String name, unique StringBuilder sb, immutable Boolean isFinal) {
        LOG("createLocalVariable '" + name + "'");
        val index = this.nextLocalVariableIndex();
        this.localVariableMap.put(name, index);
        //sb.append("/*AE*/");
        //this.seqOps.createLocalVariable(name, sb, isFinal);
    }
    
    method void setLocalVariable(immutable String varName, immutable String value, unique StringBuilder sb) {
        LOG("setLocalVariable '" + varName + "'");   
        //sb.append("/*AE*/");
        //this.seqOps.setLocalVariable(varName, value, sb); 
        val newName = match ( this.localVariableMap.containsKey(varName)  ) {
	        case True {
                val index = this.localVariableMap.get(varName);
                //this.varNameComment(varName) + this.indexToString(index) ;            
                sb.append(this.LOCAL_VARIABLE_ARRAY + ".set(" + index + "," + value + ");\n");
            }
            case False {
                this.seqOps.setLocalVariable(varName, value, sb);
            }
        };
    }
    
	method immutable String getLocalVariable(immutable String varName) {
	    LOG("getLocalVariable '" + varName + "'");
	    //"/*AE*/" + this.seqOps.getLocalVariable(varName);
	    match ( this.localVariableMap.containsKey(varName)  ) {
	        case True {
                val index = this.localVariableMap.get(varName);
                //this.varNameComment(varName) + this.indexToString(index);
                this.LOCAL_VARIABLE_ARRAY + ".get(" + index + ")"
            }
            case False {
                // parameter 
                this.seqOps.getLocalVariable(varName);
            }
        };
	}

    method immutable String getTaskArrayElement(shared Task task) {
        this.TASK_ARRAY + "[" + this.curMethodInfo.getTaskIndex(task) + "]"
    }
    
    method immutable String createTasksAndScheduling(shared Set tasksInput) {
        val sb = java.lang.StringBuilder.new();
        
        // TODO: sort tasks topologial
        val tasks = topologicalTaskList(tasksInput);
        
        // create tasks
        sb.append("/* create tasks */\n");
        val tasksIt = tasks.iterator();
        while { tasksIt.hasNext() }{
            val curTask = tasksIt.next();
            sb.append(createTaskString("", curTask, ""));
        };
        
        // add scheduling
        sb.append("/* schedule tasks */\n");
        val scheduleIt = tasks.iterator();
        while { scheduleIt.hasNext() }{
            val curTask = scheduleIt.next();
            ifElse ( curTask.deps.size() == 0  ) {
                sb.append(this.LOCAL_AEMINIUM_RUNTIME + ".schedule(" + this.getTaskArrayElement(curTask) + ", "  + "aeminium.runtime.Runtime.NO_PARENT, aeminium.runtime.Runtime.NO_DEPS);\n" );
            }{
                val depsSB = java.lang.StringBuilder.new();
                depsSB.append("java.util.Arrays.asList(");
                val immutable Boolean isSimplified = if ( true ) {
                    var result = false;
                    val simplifiedIt = curTask.deps.iterator();
                    while { simplifiedIt.hasNext() }{
                        val depTask = simplifiedIt.next();
                        if ( isSimplifiedMatch(depTask, curTask) ) {
                            result = true;
                        };
                    };
                    result
                };
                if ( isSimplified == false ) {
                    val depsIt = curTask.deps.iterator();
                    while { depsIt.hasNext() }{
                        val curDep = depsIt.next();
                        depsSB.append(this.getTaskArrayElement(curDep) + ",");
                    };
                    depsSB.deleteCharAt( depsSB.length() - 1 );
                    depsSB.append(")");
                    depsSB.toString();
                    sb.append(this.LOCAL_AEMINIUM_RUNTIME + ".schedule(" + this.getTaskArrayElement(curTask) + ", "  + "aeminium.runtime.Runtime.NO_PARENT, "+ depsSB.toString() + ");\n" );
                }
            };
        };
        
        sb.toString()
    }
    
    method immutable Boolean isSimplifiedMatch(shared Task from, shared Task to) {
         var immutable Boolean result = false;
         var unique Set matchLeaves = java.util.HashSet.new();
         
         var toIt = to.infos.iterator();
         while { toIt.hasNext() }{
             val curInfo = toIt.next();
             match (curInfo) {
                case MatchLeaveInformation { matchLeaves.add(curInfo) }
                default {}
             };
         };
         
         val leavesIt = matchLeaves.iterator();
         while { leavesIt.hasNext() }{
             val curMatchLeave = leavesIt.next();
             if ( from.infos.contains(curMatchLeave.enterInfo) ) {
                 DEBUG(DEBUG_PRIO_LOW, "<AEminiumCodeGenOps> found simplified match connection " + from.toString() + " -> " + to.toString() );
                 result = true;
             };
         };
         
         result;
    }
    
    method immutable String codegenTaskOpenLeaves(shared Task task) {
        val sb = java.lang.StringBuilder.new();
        
        if ( this.syncVarForTaskMap.containsKey(task) ) {
            val leaveSyncVar = this.syncVarForTaskMap.get(task);
            sb.append("@SuppressWarnings(\"unchecked\")\njava.util.Collection<aeminium.runtime.Task> leaveDep$ = (java.util.Collection<aeminium.runtime.Task>)((plaid.fastruntime.aeminium.AEminiumMatchSyncPlaidObject)"+ this.getLocalVariable(leaveSyncVar) + ").waitForMatches();\n"); 
            sb.append("while ( leaveDep$ == null ) {\n");
            sb.append("((aeminium.runtime.implementations.implicitworkstealing.scheduler.WorkStealingThread)Thread.currentThread()).processOtherTasks();\n");
            sb.append("leaveDep$ = (java.util.Collection<aeminium.runtime.Task>)((plaid.fastruntime.aeminium.AEminiumMatchSyncPlaidObject)"+ this.getLocalVariable(leaveSyncVar) + ").waitForMatches();\n"); 
            sb.append("}\n"); 
            sb.append("if ( " + this.getTaskArrayElement(task) + " != null && 0 < leaveDep$.size() ) { \n");
            sb.append("for  ( aeminium.runtime.Task ta$k : leaveDep$ ) { \n");
            sb.append("ta$k.getResult();\n");
            sb.append("}\n");
            sb.append("}\n");
        };    
        
        sb.toString();
    }
    
    method immutable String createTaskString(immutable String prefix, shared Task task, immutable String suffix) {
        val sb = java.lang.StringBuilder.new();
        
        sb.append(this.getTaskArrayElement(task) +" = " + this.LOCAL_AEMINIUM_RUNTIME + ".createNonBlockingTask(new aeminium.runtime.Body() {\n");
        sb.append("@Override public void execute(aeminium.runtime.Runtime rt, aeminium.runtime.Task current) {\n");
        sb.append(this.codegenTaskOpenLeaves(task));
        sb.append(prefix);
        sb.append(task.getBodyStringBuilder());
        sb.append(suffix);
        sb.append("}\n");
        sb.append("@SuppressWarnings(\"unused\") public String toSting() { return \"" + task.toString() + "\"; }\n");
        sb.append("}, aeminium.runtime.Runtime.NO_HINTS);\n");
        
        sb.toString();
    }

    method immutable String varNameComment(immutable String varName) {
        match ( varName.endsWith("$plaid") ) {
            case True { "" }
            case False { "/*" + varName + "*/" }
        };
    }
}