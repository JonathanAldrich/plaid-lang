package plaid.compiler.aeminium;

import plaid.compiler.permissions.*;

state FieldRestoreInformation case of DependencyInformation {
    val shared Symbol symbol;
    val immutable String fieldName;
    val immutable Permission permIn;
    val immutable Permission permOut;
    
    method immutable String permToChar(immutable Permission perm) {
        match (perm){
            case ImmutablePermission { "I" }
            case SharedPermission    { "S" }
            case UniquePermission    { "U" }
            case NonePermission      { "N" }
            case LocalPermission     { "L" + permToChar(perm.thePerm) }
            case BorrowedPermission  { "B" + permToChar(perm.thePerm) }
            default                  { ABORT("Perm??? = " + perm.toString()); "?" }
        }
    }
    
    method immutable String toString() {
        val immutable String perms = "["+ permToChar(this.permIn) + "->"+ permToChar(this.permOut) +"]";
        "FieldRestore '" + this.symbol.toString() +"." +this.fieldName + "' " + perms + " (" + this.getID() +")"
    }
    
    override method immutable String toTexString() {
        this.toString().replace("->", "$\\to$");
    }
}
