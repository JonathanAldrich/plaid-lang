package plaid.compiler.types;

import plaid.compiler.util.*;
import plaid.collections.makeLinkedList;

state AbstractDereferenceExpression case of AbstractExpression {
    val shared Symbol symbol;
    val unique LinkedList drefs = makeLinkedList();

    method immutable Boolean ==(immutable AbstractExpression other) {
        match (other) {
            case AbstractDereferenceExpression {
                ifElse ( (this.symbol == other.symbol ) && (this.drefs.size() == other.drefs.size() )  )  {
                    var result = true;
                    
                    var i = 0;
                    while { i < this.drefs.size() }{
                        val s1 = this.drefs.get(i);
                        val s2 = other.drefs.get(i);
                        
                        result = result && (s1 == s2);
                        
                        i = i + 1;
                    };
                    
                    result;
                }{
                    false
                }
            }
            default { false }
        }
    }
    
    method immutable String toString() {
        val root = match ( this.symbol ) {
            case VariableSymbol { this.symbol.name }
            default { this.symbol.symbolType() }
        };
        
        match ( this.drefs.size() == 0 ) {
            case True {
                root
            }
            case False {
                root + "." + makeStringFromLinkedList(this.drefs, ".")  
            }
        }
    } 
}