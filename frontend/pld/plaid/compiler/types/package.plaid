/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.types;

import plaid.compiler.permissions.DYNAMICP;
import plaid.compiler.permissions.NONEP;
import plaid.compiler.Type;

/***********************************************
 ***               Type Constants            ***
 ***********************************************/

val immutable Type DYNAMICTYPE = new Type { val permission = DYNAMICP; val structure = DYNAMICSTRUCT; };
val immutable Type VOID = new Type { val permission = NONEP; val structure = TOPSTRUCT; };

/***********************************************
 ***   Factory method for creating a type    ***
 ***********************************************/

method immutable Type makeType(immutable Permission p, immutable Structure s) {
  new Type {
    val permission = p;
    val structure = s;
  } 
}

/***********************************************
 *** Factory methods for creating Structures ***
 ***********************************************/
 
val immutable DynamicStructure DYNAMICSTRUCT = new DynamicStructure;
val immutable DynamicStructure DYNSTRUCT = DYNAMICSTRUCT;
val immutable TopStructure TOPSTRUCT = new TopStructure;

method immutable LambdaStructure makeLambdaStructure(argTypes, metaArgs, environment) {
  new LambdaStructure {
    val argTypes = argTypes;
    val metaArgs = metaArgs;
    val environment = environment;
  }
}

method immutable NominalStructure makeNominalStructure(shared StateSymbol symbol, immutable Type owner, immutable String name) {
  new NominalStructure {
    val symbol = symbol;
    val owner = owner;
    val name = name;
  }
}

method immutable UnpackedStructure makeUnpackedStructure(immutable NominalStructure unpackedStructure) {
  new UnpackedStructure {
    val unpackedStructure = unpackedStructure;
  }
}

method immutable UnpackedStructure makeUnpackedStructureWithFieldMap(immutable NominalStructure unpackedStructure, 
                                                                    /*immutable Map<shared FieldSymbol,immutable FieldSignature>*/ unpackedFields) {
  val unique UnpackedStructure newUnpacked = new UnpackedStructure {
    val unpackedStructure = unpackedStructure;
  };
  newUnpacked.unpackedFields.putAll(unpackedFields);
  newUnpacked;
}

method immutable PackageStructure makePackageStructure(immutable Type owner, immutable String name) {
  new PackageStructure {
    val owner = owner;
    val name = name;
  }
}

/***********************************************
 *** Factory methods for creating Signatures ***
 ***********************************************/
 
method immutable FieldSignature makeFieldSignature(immutable Boolean isVar, immutable Type fieldType, immutable String name) {
  new FieldSignature {
    val isVar = isVar;
    val fieldType = fieldType;
    val name = name;
  }
} 

method immutable MethodSignature makeMethodSignature(immutable Type returnType, immutable String name, immutable LinkedList staticArgSpec,
                                                     immutable LinkedList<ArgSpec> arguments, immutable LinkedList environment) {
  new MethodSignature {
    val returnType = returnType;
    val name = name;
    val staticArgsSpec = staticArgSpec;
    val arguments = arguments;
    val environment = environment;
  }
} 
 