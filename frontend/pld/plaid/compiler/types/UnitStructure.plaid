package plaid.compiler.types;

import plaid.compiler.*;
import plaid.ast.util.Token;

state UnitStructure case of ObjectStructure {

method immutable Boolean ==(immutable Structure other)[immutable UnitStructure this]{
        match (other) {
            case UnitStructure { true }
            default { false }
        }
    }
    
    method immutable String toString()[immutable UnitStructure this] {
        "Unit"
    }
    
    //In the nominal hiearchy, Unit is distinct from all other nominal structures, thus the lub of unit and S is top
    method unique Option<immutable Structure> leastUpperBound(immutable Structure other)[immutable UnitStructure this] {
        match (other) {
            case TopStructure { makeSome(TOPSTRUCT) }
            case UnitStructure { makeSome(UNITSTRUCT) }
            case NominalStructure { makeSome(makeOptionStructure(other)) }
            case OptionStructure { makeSome(TOPSTRUCT) }
            default{ new None }
        }
    }
    
    //only a substructure of Unit, TOP, and Option
    method immutable Boolean isSubStructureOf(immutable Structure other)[immutable OptionStructure this] {
        match (other) {
            case UnitStructure { true }
            case TopStructure { true }
            case OptionStructure { true } 
            default { false }
        }
    }

  method immutable String getName() { "Unit" }

  /**
   *  no members
   */
  method unique Option<immutable Signature> getMember(immutable String memberName) { new None }
  
  /**
   *  no change
   */
  method immutable ObjectStructure restoreToField(immutable String fieldName, immutable Type retType, immutable Integer objectID) {
    this
  }
  
  /**
   * no fields to unpack
   */
  method immutable ?UnpackedStructure unpackField(immutable UnpackedFieldSignature newFieldSig,
                                                 immutable Token errorToken) {
        report_ERROR(errorToken, "T_UNPACK_UNIT_FIELD","TypecheckExpression");
        ABORT("fix implementation");
  }
  
  /**
   *  no fields to assign to
   */
  method immutable ?ObjectStructure assignToField(immutable String fieldName,
  												 immutable Token errorToken)
  {
  	    report_ERROR(errorToken,"T_UNIT_FIELD_ASSIGN","TypecheckExpression");
  	    ABORT("fix implementation");
  }
}