package plaid.compiler.types;

import plaid.compiler.Type;
import plaid.compiler.types.*;
import plaid.compiler.Signature;

state UnpackedFieldSignature case of Signature {
  val immutable FieldSignature packedSignature;
  val immutable Integer objectID;
  val immutable Type currentType;
  
  method immutable Boolean ==(immutable Signature other)[immutable UnpackedFieldSignature this] {
      match (other) {
        case UnpackedFieldSignature { 
          this.packedSignature == other.packedSignature &&
          this.objectID == other.objectID &&
          this.currentType == other.currentType
        }
        default { false } 
      }
  }
    
  method immutable String toString()[immutable FieldSignature this] {
    "UNPACKED(" + this.packedSignature.toString() + " ," + this.objectID + ") : " + this.currentType.toString() + ";";
  }
  
  method immutable Signature restore(immutable Permission perm) {
    val unique Option<immutable Permission> restoredPermOption = this.currentType.permission.returnPerm(perm);
    match (restoredPermOption) {
      case Some {
        val immutable Type newType = makeType(restoredPermOption.value, this.currentType.structure);
        match (newType.isSubTypeOf(this.packedSignature.fieldType)) {
          case True { this.packedSignature }
          case False { makeUnpackedFieldSignature(this.packedSignature, this.objectID, newType) }
        }
      }
      case None { ABORT("could not return " + perm.toString() + " to " + this.currentType.permission ) }
    }
  }
}