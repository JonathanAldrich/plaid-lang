package plaid.compiler.types;

import plaid.compiler.Type;
import plaid.compiler.types.FieldSignature;

state PackedFieldSignature case of FieldSignature {
    val immutable Boolean isVar;
    val immutable Type fieldType;
    val immutable String name;

    method immutable String getFieldName() { this.name }
    
    method immutable Type getDeclaredType() {
        this.fieldType
    }
    
    method immutable Type getCurrentType() {
        this.fieldType
    }
    
    method immutable Boolean ==(immutable Signature other)[immutable FieldSignature this] {
      match (other) {
        case FieldSignature {
          this.isVar == other.isVar &&
          this.fieldType == other.fieldType &&
          this.name.equals(other.name)
        }
        default { false } 
      }
    }
    
    method immutable String toString()[immutable FieldSignature this] {
      val specifier = match (this.isVar) {
        case True { "var " }
        case False { "val " }
      };
      specifier + fieldType.toString() + " " + name
    }
    
    /**
     * nothing to do for an already packed field
     */
    method immutable FieldSignature restore(immutable Type retType, immutable Integer restoreObjectID) {
      this
    }
}