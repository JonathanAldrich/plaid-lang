package plaid.compiler.types;

import plaid.compiler.*;
import plaid.compiler.symbol.*;

state NominalStructure case of ObjectStructure {
  val shared StateSymbol symbol;
  val immutable Structure owner;
  val immutable String name;

  method immutable Boolean ==(immutable Structure other)
                             [immutable NominalStructure this] 
  {
    match (other) {
      case NominalStructure { this.symbol == other.symbol } //TODO: symbol seems like it would be unique, is this correct?
      default { false }
    } 
  }
  
  method immutable String toString()[immutable NominalStructure this] {
    this.name;
  }
  
  /**
   * unpacked structures cannot be used in place of any other structures
   * might want to relax this in the future
   */
  method immutable Boolean isSubStructureOf(immutable Structure other)[immutable NominalStructure this] {
    match (other) {
      case TopStructure { true }
      case NominalStructure {
        val immutable StateSymbol otherSymbol = other.symbol;
        var immutable Symbol thisSuperStateSymbol = this.symbol;
        var immutable Boolean found = false;
        while { !found && !(thisSuperStateSymbol == TOPSYM) } {
          ifElse (thisSuperStateSymbol == otherSymbol) 
            { found = true }
            { thisSuperStateSymbol = thisSuperStateSymbol.getSuperStateSymbol() }
        };
        found
      }
      default { false }
    }
  }
  
  /**
   * LUB is defined only on nominal types and the top type.  If the .  If the two nominal types are on different
   * arms of the same dimension, then the least common supertype will be returned.  If one of the nominal
   * types is a supertype of the other, it is returned 
   */
  method unique Option<immutable Structure> leastUpperBound(immutable Structure other)[immutable NominalStructure this] {
    match (other) {
      case TopStructure { makeSome(TOPSTRUCT) }
      case NominalStructure {
        var thisDimension = this.symbol.getDimension();
        var otherDimension = other.symbol.getDimension();
        

        
        //reduce to same size by trimming from front (lub cannot be lower than last element in smaller list)
        val sizeCmp = thisDimension.size() - otherDimension.size();
        if (sizeCmp > 0) { //reduce thisDimension
          thisDimension = thisDimension.reduceRight(fn (elem, acc) => {
            if (acc.snd > sizeCmp) { acc.fst.add(elem) };
            makePair(acc.fst,acc.snd - 1)
          },makePair(makeLinkedList(),thisDimension.size())).fst
        };
        if (sizeCmp < 0) { //reduce otherDimension
          otherDimension = otherDimension.reduceRight(fn (elem, acc) => {
            if (acc.snd > (0 - sizeCmp) ) { acc.fst.add(elem) }; //Fix negation once unary ops work
            makePair(acc.fst,acc.snd - 1)
          },makePair(makeLinkedList(),otherDimension.size())).fst
        };
        
        val dimCmp = thisDimension.zipReverse(otherDimension);
        val lub = dimCmp.reduce(TOPSYM,fn (acc,pair) => {
          match (pair.fst == pair.snd) {
            case True { pair.fst }
            case False { acc }
          }
        });
        makeSome(lub.getStructure());
      }
      default { new None }
    }
  }

  method immutable Signature getMember(immutable String memberName) {
      DEBUG(DEBUG_PRIO_MEDIUM, "<NominalStructure> searching for '"+memberName+"' in '" + this.symbol.getFQN() + "'");
      val memberSymbol = this.symbol.getMember(memberName);
      match (memberSymbol) {
          case Some {
              match (memberSymbol.value) {
                  case FieldSymbol {
                      DEBUG(DEBUG_PRIO_MEDIUM, "<NominalStructure>   found FieldSymbol for '"+memberName+"'");
                      memberSymbol.value.getSignature();
                  }
                  case MethodSymbol {
                      DEBUG(DEBUG_PRIO_MEDIUM, "<NominalStructure>   found MethodSymbol for '"+memberName+"'");
                      memberSymbol.value.getSignature();
                  }
                  default {
                      ABORT("Unsupported member type ");
                  }
              }
          }
          case None {
              ABORT("Cannot find member '"+memberName+"' in '" + this.symbol.getFQN() + "'");
          }
      }
  }
}