package plaid.compiler.javatobytecode;

import plaid.compiler.*;

state Javac case of JavaCompiler {
    method immutable Boolean compile(unique List/*<File>*/ files) {
        DEBUG(DEBUG_PRIO_HIGH, "<Javac> start compiling files ");
        
        var classpath = "";
        
        match ( this.cc.bytecodeClasspath.size() == 0) {
        	case True {
        		this.cc.plaidpath.map(fn (item) =>{
            		classpath = classpath + item + java.lang.System.getProperty("path.separator");
            		item
        		});
        
        		classpath = classpath + java.lang.System.getProperty("java.class.path");
        	}
        	case False {
        		this.cc.bytecodeClasspath.map(fn (item) =>{
            		classpath = classpath + item + java.lang.System.getProperty("path.separator");
            		item
        		});
        	}
        };
        
        val result = plaid.compiler.javatobytecode._native.invokeJavac(this.cc.outputDir, classpath, files); 
        
        if ( result == false ) {
            printLine("Failed to compile the Java files!!!!");
        };
    }            
}