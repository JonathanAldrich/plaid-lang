package plaid.compiler.codegen;

import java.lang.StringBuilder;
import java.lang.System;

import plaid.ast.parsed.*;

import plaid.compiler.COMPILER_CONFIGURATION;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_LOW;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.DEBUG_PRIO_HIGH;
import plaid.compiler.symbolForAST;


import plaid.collections.LinkedList;

import plaid.fastruntime.NamingConventions;
import plaid.fastruntime.util.FileGen;

method LOG (immutable String msg) {
	DEBUG(DEBUG_PRIO_LOW, "<CodeGenPass> " + msg);
}

//TODO: update errors
method ERROR(immutable Token t, immutable String msg) {
	plaid.compiler.report_ERROR(t," INTERNAL ERROR: " + msg, "", "CodeGenPass");
}

state CodeGenOps {
    method codegenCU(immutable CodeGenOps ops, unique Job job, immutable ParsedCompilationUnit node);
    method codegenTopLevelDecl(immutable CodeGenOps ops, immutable ParsedDecl node, immutable String packageName, shared StringBuilder sb, shared IdGen idgen);
    method codegenInnerDecl(immutable CodeGenOps ops, immutable ParsedDecl node,  shared StringBuilder sb, shared IdGen idgen, isAnonymous);
    method codegenMethodBody(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen);
    method codegenStmtBlock(immutable CodeGenOps ops, immutable ParsedBlockExpr node, shared StringBuilder sb, shared IdGen idgen, immutable String y);
    method codegenStmt(immutable CodeGenOps ops, immutable Stmt node, shared StringBuilder sb, shared IdGen idgen, immutable String y);
    method codegenLambda(immutable CodeGenOps ops, args, body, sb, idgen, y);
    method codegenStateExpr(immutable CodeGenOps ops, immutable ParsedStateExpr node, shared StringBuilder sb, shared IdGen idgen, 
                            immutable String st);
    method codegenObjectValue(immutable CodeGenOps ops, immutable ParsedStateExpr node, shared StringBuilder sb, shared IdGen idgen, 
                            immutable String fullyQualifiedClassName, immutable String ov, immutable String hashMapId);
    method codegenApplication(immutable CodeGenOps ops, immutable ParsedExpr functionExpr, immutable List args, 
	    					  shared StringBuilder sb, shared IdGen idgen, 
		    				  immutable String y);
	method void codegenMain(immutable String methodName, unique StringBuilder sb);
	method void createLocalVariable(immutable String name, unique StringBuilder sb, immutable Boolean isFinal);
	method void setLocalVariable(immutable String varName, immutable String value, unique StringBuilder sb);
	method immutable String getLocalVariable(immutable String varName);
	method void codegenMemberBodies(immutable CodeGenOps ops, immutable ParsedStateExpr node, shared StringBuilder sb, shared IdGen idgen);
}

method unique SequentialCodeGenOps makeSequentialCodeGenOps() {
    new SequentialCodeGenOps;
}

method unique JavascriptCodeGenOps makeJavascriptCodeGenOps() {
    new JavascriptCodeGenOps;
}

method convertOpStringToMethodName(immutable String op) {
    NamingConventions.convertOpStringToMethodName(op);
}
    
method makeSeperatedString(immutable LinkedList<String> stringList, immutable String sep) {
    ifElse(stringList.size() > 0) {
        val addSep = fn(s1, s2) => {s1 + sep + s2};
        val toReturn = stringList.reduceLeft("", addSep);
        toReturn.substring(sep.length(),toReturn.length());
    }
    { //
        "";
    }
}