
package plaid.compiler;

import plaid.compiler.Reporter;
import plaid.compiler.reporter.*;

import plaid.compiler.resolver.ClasspathResolver;

import plaid.compiler.context.*;
import plaid.compiler.passes.*;

import plaid.compiler.util.classpathToList;

import java.lang.System;


/*****************************************************************************
 ** global configs
 ****************************************************************************/

var ENABLE_TYPECHECKING = true;
var ENABLE_AEMINIUM     = false;

method immutable Boolean AEMINIUM_MODE() { ENABLE_AEMINIUM }
method immutable Boolean TYPECHECKING_MODE() { ENABLE_TYPECHECKING }

/*****************************************************************************
 ** debugging
 ****************************************************************************/

var immutable Integer DEBUG_LEVEL = 0;

method void INFO(immutable String msg) {
    if ( 0 < DEBUG_LEVEL ) {
        printLine("[INFO   ] " + msg);
    }
}

method void WARNING(immutable String msg) {
    if ( 0 < DEBUG_LEVEL ) {
        printLine("[WARNING] " + msg);
    }
}

method void ERROR(immutable String msg) {
    printLine("[ERROR  ] " + msg);
}

val DEBUG_PRIO_HIGH   = 1;
val DEBUG_PRIO_MEDIUM = 2;
val DEBUG_PRIO_LOW    = 3;

method void DEBUG(immutable Integer level, immutable String msg) {
    if ( level <= DEBUG_LEVEL) {
       printLine("[DEBUG  ] " + msg);
    }
}

method void DEBUG_DO(immutable Integer level, lambda) {
    if ( level <= DEBUG_LEVEL ) {
        lambda()
    }
}

/*****************************************************************************
 ** ASSERT
 ****************************************************************************/

method void ASSERT(immutable Boolean assertion, immutable String msg) {
    if ( assertion == false ) {
        ABORT("*** ASSERTION FAILED : " + msg);
    }
}


/*****************************************************************************
 ** command line handling
 ****************************************************************************/
method showUsage() {
    printLine("usage: plaidc [OPTIONS] [FILES]");
    printLine("");
    printLine("Options:");
    printLine(" -a | --aeminium             Enable AEminium mode.")
    printLine(" -n | --no-typecheck         Disable typechecking.");
    printLine(" -d | --debug  <LEVEL>       Set the default level for debug output (0,1,2,3).");
    printLine(" -f | --force-recompile      Generate output files even if source files are older.");
    printLine(" -h | --help                 This message.");
    printLine(" -i | --input  <DIR>         The directory of Plaid files to compile.");
    printLine(" -k | --keep                 Keep temporary files.");
    printLine(" -o | --output <DIR>         The directory to put generated files.");
    printLine(" -p | --plaidpath <DIR>      A path where plaid sources are stored.");
    printLine(" -t | --temp <DIR>           The directory to put temporary generated files.");
    printLine(" -v | --version              The version of the current compiler.");
    printLine(" -V | --viewAST              View the AST of the compiled files.");  
}


method showVersion() {
    printLine("Plaid Compiler version 2.0");
}


method parseCommandLineArgs(args) {
    var abort = false;
    
    var keep       = false;
    var force      = false;
    var outputDir  = "";
    var tempDir    = "";
    var inputDir   = "";
    var plaidpath  = makeEmptyList();
    var inputFiles = makeEmptyList();
    var enableTypechecking = true;
    var enableAeminium = false;
    var viewAST = false;
    
    while { !abort && !args.isEmpty() }{
        var handled = false;
        if ( args.car().equals("-h") || args.car().equals("--help") ) {
            handled = true;
            showUsage();
            abort = true
        };
        if ( args.car().equals("-v") || args.car().equals("--version") ) {
            handled = true;
            showVersion();
            abort = true
        };
        if ( args.car().equals("-a") || args.car().equals("--aeminium") ) {
            handled = true;
            enableAeminium = true;
            ENABLE_AEMINIUM = true;
            DEBUG(DEBUG_PRIO_HIGH, "Found enable AEMINIUM option " + enableAeminium);
        };
        if ( args.car().equals("-n") || args.car().equals("--no-typechecking") ) {
            handled = true;
            enableTypechecking = false;
        };
        if ( args.car().equals("-d") || args.car().equals("--debug") ) {
            handled = true;
            args = args.cdr();
            ifElse ( args.car().isEmpty() || args.car().startsWith("-") ) {
                printLine("The '-d' option requires a parameter.");
                abort = true
            }{
                val debugValueString = args.car().trim();
                // cannot use valueOf because we cannot handle exceptions
                if ( debugValueString.equals("1") ) {
                    DEBUG_LEVEL = 1;
                };
                if ( debugValueString.equals("2") ) {
                    DEBUG_LEVEL = 2;
                };
                if ( debugValueString.equals("3") ) {
                    DEBUG_LEVEL = 3;
                };
                DEBUG(DEBUG_PRIO_MEDIUM, "Found debug option '" + args.car() + "'.");
            }
        };        
        if ( args.car().equals("-o") || args.car().equals("--output") ) {
            handled = true;
            args = args.cdr();
            ifElse ( args.car().isEmpty() || args.car().startsWith("-") ) {
                printLine("The '-o' option requires a parameter.");
                abort = true
            }{
                outputDir = args.car();
                DEBUG(DEBUG_PRIO_MEDIUM, "Found output directory option '" + args.car() + "'.");
            }
        };        
        if ( args.car().equals("-t") || args.car().equals("--temp") ) {
            handled = true;
            args = args.cdr();
            ifElse ( args.car().isEmpty() || args.car().startsWith("-") ) {
                printLine("The '-t' option requires a parameter.");
                abort = true
            }{
                tempDir = args.car();
                DEBUG(DEBUG_PRIO_MEDIUM, "Found temporary directory option '" + args.car() + "'.");
            }
        };
        if ( args.car().equals("-i") || args.car().equals("--input") ) {
            handled = true;
            args = args.cdr();
            ifElse ( args.car().isEmpty() || args.car().startsWith("-") ) {
                printLine("The '-i' option requires a parameter.");
                abort = true
            }{
                inputDir = args.car();
                DEBUG(DEBUG_PRIO_MEDIUM, "Found input directory option '" + args.car() + "'.");
            }
        };
        if ( args.car().equals("-p") || args.car().equals("--plaidpath") ) {
            handled = true;
            args = args.cdr();
            ifElse ( args.car().isEmpty() || args.car().startsWith("-") ) {
                printLine("The '-p' option requires a parameter.");
            }{
                val elems = classpathToList( args.car() );
                elems.map(fn (elem) => plaidpath.add(elem) );
                DEBUG(DEBUG_PRIO_MEDIUM, "Found plaidpath option '" + args.car()  + "'.");
            }
        };        
        if ( args.car().equals("-f") || args.car().equals("--force") ) {
            handled = true;
            force = true
        };        
        if ( args.car().equals("-k") || args.car().equals("--keep") ) {
            handled = true;
            force = true
        };    
        if ( args.car().equals("-V") || args.car().equals("--viewAST") ) {
            handled = true;
            viewAST = true;
        };
        ifElse ( !handled ) {
            ifElse ( args.car().startsWith("-") ) {
                printLine("Unsupported option: " + args.car());
                abort = true
            }{
                // add remaining arguments as input files 
                ifElse ( inputDir.length() > 0 ) {
                    printLine("Cannot specify input directory '-i' and explicit files. Make your choice.");
                    abort = true
                }{
                    args.map( fn (x) => {
                        val file = java.io.File.new(x);
                        val absPath = file.getAbsolutePath();
                        DEBUG(DEBUG_PRIO_MEDIUM, "Found input file  '" + absPath  + "'.");
                        inputFiles.add(absPath)
                    });
                    args = makeEmptyList()
                }
            };
        }{        
            args = args.cdr()
        };
    };

    if ( inputDir == "" && inputFiles.isEmpty() ) {
        printLine("You must specify either an input directory('-i') or explicit file names.");
        abort = true
    };
   
    match (abort) {
        case True  { new None; }
        default    { 
            makeSome((new CompilerConfiguration {
                val plaidpath   = plaidpath;
                val force       = force;
                val keep        = keep;
                val outputDir   = outputDir;
                val inputDir    = inputDir;
                val tempDir     = tempDir;
                val inputFiles  = inputFiles;
                val enableTypechecking = enableTypechecking;
                val enableAeminium = enableAeminium;
                val viewAST = viewAST;
            }).expand()); 
        }        
    }
}


/*****************************************************************************
 ** Job Management 
 ****************************************************************************/
var shared List jobs = makeEmptyList();

method void addJob(unique Job job) {
    DEBUG(DEBUG_PRIO_LOW, "<Jobs> add job '" + job.source.path + "'");
    jobs.add(job)
}

method runJobToParsingBarrierPass(job) {
    DEBUG(DEBUG_PRIO_LOW, "<Jobs> start to run job to ParsingBarrier '" + job.source.path + "'");
    var done = false;
    while { !job.passes.isEmpty() && !done  } {
        match (job.passes.car()) {
            case ParsingBarrierPass {
                done = true;
            }
            default {
                if ( job.status ) {
                    val pass = job.passes.car();
                    job.status =job.status && pass.run(job);
                };
            }
        };
        // pop last pass of
        job.passes = job.passes.cdr();
    };
    DEBUG(DEBUG_PRIO_LOW, "<Jobs> finished to run job to ParsingBarrier '" + job.source.path + "'");
    job
}

method void runJobsToParsingBarrierPass() {
    jobs.map( fn (job) => {
        runJobToParsingBarrierPass(job);
    });
}

method void runJobsToNameResolutionBarrierPass() {
    jobs.map( fn (job) => {
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> start to run job to NameResolutionBarrierPass '" + job.source.path + "'");
        var done = false;
        while { !job.passes.isEmpty() && !done  } {
            match (job.passes.car()) {
                case NameResolutionBarrierPass {
                    done = true;
                }
                default {
                    if ( job.status ) {
                        val pass = job.passes.car();
                        job.status =job.status && pass.run(job);
                    };
                }
           };
           // pop last pass of
           job.passes = job.passes.cdr();
        };
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> finished to run job to NameResolutionBarrierPass '" + job.source.path + "'");
        job
    });
}


method void runJobsToTypeResolutionBarrierPass() {
    jobs.map( fn (job) => {
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> start to run job to TypeResolutionBarrierPass '" + job.source.path + "'");
        var done = false;
        while { !job.passes.isEmpty() && !done  } {
            match (job.passes.car()) {
                case TypeResolutionBarrierPass {
                    done = true;
                }
                default {
                    if ( job.status ) {
                        val pass = job.passes.car();
                        job.status =job.status && pass.run(job);
                    };
                }
           };
           // pop last pass of
           job.passes = job.passes.cdr();
        };
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> finished to run job to TypeResolutionBarrierPass '" + job.source.path + "'");
        job
    });
}

method void runJobsToTypecheckBarrierPass() {
    jobs.map( fn (job) => {
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> start to run job to TypecheckBarrierPass '" + job.source.path + "'");
        var done = false;
        while { !job.passes.isEmpty() && !done  } {
            match (job.passes.car()) {
                case TypecheckBarrierPass {
                    done = true;
                }
                default {
                    if ( job.status ) {
                        val pass = job.passes.car();
                        job.status =job.status && pass.run(job);
                    };
                }
           };
           // pop last pass of
           job.passes = job.passes.cdr();
        };
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> finished to run job to TypecheckBarrierPass '" + job.source.path + "'");
        job
    });
}


method void runJobsToCompletion() {
    jobs.map( fn (job) => {
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> start to run job to completion '" + job.source.path + "'");
        while { !job.passes.isEmpty() } {
            if ( job.status ) {
                val pass = job.passes.car();
                job.status =job.status && pass.run(job);
            };
            // pop last pass of
            job.passes = job.passes.cdr();
        };
        DEBUG(DEBUG_PRIO_LOW, "<Jobs> finished to run job to completion '" + job.source.path + "'");
        job
    });
}

method unique List getInternalJobPasses(immutable CompilerConfiguration cc) {
    getJobPassesHelper(cc, false)
}

method unique List getJobPasses(immutable CompilerConfiguration cc) {
    getJobPassesHelper(cc, true)
}

method unique List getJobPassesHelper(immutable CompilerConfiguration cc, immutable Boolean userJob) {
    val passes = makeEmptyList();

    // parsing and basic checks pass 
    passes.add(new ParsePass);
    passes.add(new FileSystemCheckPass);
    passes.add(new ImportCheckPass);
    passes.add(new ParsingBarrierPass);
    if (cc.viewAST && userJob) { passes.add(new ASTViewerPass) }; 

    // name expanding passes
    passes.add(new NameResolutionPass);
    passes.add(new NameResolutionBarrierPass);

    // type resolution pass 
    if (cc.enableTypechecking) { passes.add(new TypeResolutionPass) };
    passes.add(new TypeResolutionBarrierPass);

    // type check pass
    if (cc.enableTypechecking) { passes.add(new TypecheckPass) };
    passes.add(new TypecheckBarrierPass);

    // AEminium passes
    if (cc.enableAeminium && cc.enableTypechecking) {
      passes.add(new AEminiumPass);
      passes.add(new TaskBuilderPass);
    };

    // report errors pass 
    passes.add(new ReporterPass);

    passes
}


/*****************************************************************************
 ** global symbol map
 ****************************************************************************/
var shared Map globalSymbolMap = java.util.IdentityHashMap.new();

method void addSymbolForAST(immutable ASTNode node, shared Symbol symbol) {
     globalSymbolMap.put(node, symbol);
}

method void delSymbolForAST(immutable ASTNode node) {
    // we cannot remove the elements from the map because the 'remove'
    // method collides with Plaid's 'remove' keyword.
    globalSymbolMap.put(node, NONE);
}

method immutable Option symbolForAST(immutable ASTNode node) {
    ifElse (globalSymbolMap.containsKey(node) ) {
        makeSome(globalSymbolMap.get(node));
    }{
        NONE
    }
}

method immutable Boolean haveSymbolForAST(immutable ASTNode node) {
    ifElse (globalSymbolMap.containsKey(node) ) {
        true
    }{
        false
    }
}


/*****************************************************************************
 ** global type map ASTNode -> Structure
 ****************************************************************************/
var shared Map globalStructureMap = java.util.IdentityHashMap.new();

method void addStructureForAST(immutable ASTNode node, immutable Structure struct) {
     globalStructureMap.put(node, struct);
}

method immutable Option structureForAST(immutable ASTNode node) {
    ifElse (globalStructureMap.containsKey(node) ) {
        makeSome(globalStructureMap.get(node));
    }{
        NONE
    }
}

method immutable Option haveStructureForAST(immutable ASTNode node) {
    ifElse (globalStructureMap.containsKey(node) ) {
        true
    }{
        false
    }
}


/*****************************************************************************
 ** ABORT
 ****************************************************************************/
method ABORT(immutable String message) {
    printLine("*** INTERNAL COMPILER ERROR: " + message);
    plaid.compiler._native.throwAbortException();
}

method ABORT_WITH_JOB(shared Job job) {
    job.reporter.report();
    plaid.compiler._native.throwAbortException();
}


/*****************************************************************************
 ** initialize global data structures 
 ****************************************************************************/
method void init() {
    DEBUG_LEVEL = 0;
    ENABLE_AEMINIUM = false;
    ENABLE_TYPECHECKING = true;
    
    // cleanup until refactoring is in place
    plaid.compiler.globalStructureMap.clear();
    plaid.compiler.globalSymbolMap.clear();
    plaid.compiler.aeminium.aeminiumSymbolToDepsMap.clear();
    plaid.compiler.aeminium.aeminiumASTToDepsMap.clear();
    plaid.compiler.aeminium.aeminiumSLocToDepInfo.clear();
    plaid.compiler.jobs = makeEmptyList();
}

/*****************************************************************************
 ** entry point 
 ****************************************************************************/
method main(args) {

    init();

    val unique Option result = parseCommandLineArgs(args);
   
    match (result) {
        case Some {
            val unique CompilerConfiguration cc = result.value;
            val sourceJobs = makeEmptyList();
            val shared Resolver resolver = new ClasspathResolver { config = cc; };

            val compilerPasses = getJobPasses(cc);

            cc.inputFiles.map(fn (path) => {
                val stream =java.io.FileInputStream.new(java.io.File.new(path));
                val source = new Source { val path = path; val stream = stream; };
                val job = new UserJob { 
                    val source = source; 
                    val resolver = resolver;
                    val reporter = new reporter.ConsoleReporter;
                    var passes = compilerPasses;
                };
                
                // add to source jobs
                addJob(job);
            });                                        

            // parse jobs
            runJobsToParsingBarrierPass();

            // expand names
            runJobsToNameResolutionBarrierPass();

            // resolve types/symbols
            runJobsToTypeResolutionBarrierPass();            

            // typecheck
            runJobsToTypecheckBarrierPass();    

            // run remaining passes 
            runJobsToCompletion();

        }
        default {
            printLine("Could not find any source files.");
        }
    }
}