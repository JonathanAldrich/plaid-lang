package plaid.compiler.reporter;

import plaid.compiler.Reporter;

state AbstractReporter case of Reporter {
    val unique List messages = makeEmptyList();


    //=======================================================================
    // errors 
    //=======================================================================
    method void error(immutable File file,
                      immutable Integer beginLine,
                      immutable Integer beginColumn,
                      immutable Integer endLine,
                      immutable Integer endColumn,
                      immutable String message) {
         messages.add(
            new Error {
                val file        = file;
                val beginLine   = beginLine;
                val beginColumn = beginColumn;
                val endLine     = endLine;
                val endColumn   = endColumn;
                val message     = message;
            }
         )                
    }
     
     
    method void errorToken(immutable File file,
                           immutable Token token,
                           immutable String message) {
        error(file,
              token.beginLine,
              token.beginColumn,
              token.endColumn,
              token.endColumn,
              message)                      
    }
 
 
    //=======================================================================
    // warnings 
    //=======================================================================
    method void warning(immutable File file,
                      immutable Integer beginLine,
                      immutable Integer beginColumn,
                      immutable Integer endLine,
                      immutable Integer endColumn,
                      immutable String message) {
         messages.add(
            new Warning {
                val file        = file;
                val beginLine   = beginLine;
                val beginColumn = beginColumn;
                val endLine     = endLine;
                val endColumn   = endColumn;
                val message     = message;
            }
         )                
    }
     
    method void warningToken(immutable File file,
                             immutable Token token,
                             immutable String message) {
        warning(file,
                token.beginLine,
                token.beginColumn,
                token.endColumn,
                token.endColumn,
                message)                              
    }
                        
    //=======================================================================
    // info 
    //=======================================================================
    method void info(immutable File file,
                      immutable Integer beginLine,
                      immutable Integer beginColumn,
                      immutable Integer endLine,
                      immutable Integer endColumn,
                     immutable String message) {
         messages.add(
            new Info {
                val file        = file;
                val beginLine   = beginLine;
                val beginColumn = beginColumn;
                val endLine     = endLine;
                val endColumn   = endColumn;
                val message     = message;
            }
         )                
    }
     
    method void infoToken(immutable File file,
                          immutable Token token,
                          immutable String message) {
        info(file,
             token.beginLine,
             token.beginColumn,
             token.endColumn,
             token.endColumn,
             message)  
    }
}