package plaid.compiler.reporter;

import plaid.lang.globals.*;

import java.lang.System;

state ConsoleReporter case of AbstractReporter {
    val immutable String lineSuffix = "| ";
    val immutable String errorPrefix = "***Error: ";
    val immutable String warningPrefix = "***Warning: ";
    val immutable String infoPrefix = "***Info: ";



    //=======================================================================
    // report
    //=======================================================================
    method void report() {
        val immutable Integer errorCount   = errors.length();
        val immutable Integer warningCount = warnings.length();
        
        if ( (errorCount + warningCount) > 0 ) {
            // show errors first
            errors.map( fn (msg) => reportMessage(errorPrefix, msg) );

            // show warnings 
            warnings.map( fn (msg) => reportMessage(warningPrefix, msg) );

            // show infos
            infos.map( fn (msg) => reportMessage(infoPrefix, msg) );

            // summary
            displayLine("Found " + errorCount + " errors and " + warningCount + " warnings.");
        }
    }
    
    
    method reportMessage(immutable String prefix, immutable Message msg) {
        // add checks that beginLine <= endLine
    
        // check if we can find file and print source code 
        val immutable List sourceCode = getSourceCode(msg.file);
        ifElse ( !sourceCode.isEmpty() ) {
            ifElse ( msg.beginLine == msg.endLine ) {
                val line = sourceCode.get(msg.beginLine - 1 );
                val lineString = formatLineNumber(msg.beginLine);
                displayLine( lineString + line.toString());
                displayLine( getMarker(lineString, msg.beginColumn, msg.endColumn) );
            }{
                var current = msg.beginLine;
                while { current < msg.endLine} {
                    val line = sourceCode.get(current - 1 );
                    val lineString = formatLineNumber(current);
                    displayLine( lineString + line.toString());
                    current = current + 1;  
                };
            };
        }{
            displayLine(warningPrefix + "Cannot find file: " + msg.file.getAbsolutePath());
        };

        displayLine("");
        displayLine(prefix + msg.message);
        displayLine("");
        displayLine("");
    }
    
    method immutable String getMarker(immutable  String prefix, 
                                      immutable Integer beginColumn, 
                                      immutable Integer endColumn) {
        val unique StringBuilder sb = java.lang.StringBuilder.new();
        val immutable Integer skip  = prefix.length() + beginColumn - 1;

        var s = 0; 
        while { s < skip }{ sb.append(" "); s = s + 1; };
        
        ifElse ( beginColumn + 1 == endColumn ) {
            sb.append("^");
        }{
            sb.append("<");
            var l = skip + 1;
            while { l < (prefix.length() + endColumn - 1) }{ sb.append("-"); l = l + 1; };
            sb.append(">");
        };        

        sb.toString()
    }

    method immutable String formatLineNumber(immutable Integer value) {
        ifElse ( value < 10 ) {
            "0000"+value+lineSuffix;
        }{
            ifElse ( value < 100 ) {
                "000"+value+lineSuffix
            }{
                ifElse (value < 1000 ) {
                    "00"+value+lineSuffix
                }{
                    ifElse (value < 10000) {
                        "0" + value + lineSuffix
                    }{
                        ""+value+lineSuffix
                    }
                }
            }
        }
    }

    method immutable List getSourceCode(immutable File file) {
        val unique List list = makeEmptyList();

        if ( file.getAbsoluteFile().exists()  ) {
            val unique BufferedReader reader = java.io.BufferedReader.new(java.io.FileReader.new(file));
           
            // start reading into buffer
            var sb = java.lang.StringBuilder.new();
            list.add(sb);
            var value = reader.read();
            while { 0 <= value  }{
                //sb.append(java.lang.Character.toChars(value));
                ifElse ( value == 0xD /* '\r' */ ) { 
                   val next = reader.read();
                   ifElse ( next == 0xA /* '\n' */ ) { 
                       // next line
                       sb = java.lang.StringBuilder.new();
                       list.add(sb);
                       value = reader.read();
                   }{                      
                       sb.append(java.lang.Character.toChars(value));
                       value = next;
                   };    
                }{
                    ifElse ( value == 0xA /* '\n' */ ) { 
                       // new line
                       sb = java.lang.StringBuilder.new();
                       list.add(sb);
                    }{
                        sb.append(java.lang.Character.toChars(value));
                    };
                    value = reader.read();
                };               
            };

            list
        };

        list
    }

    method displayLine(immutable String line) {
        System.out.println(line)
    } 
}