package plaid.compiler.context;


import plaid.compiler.Context;
import plaid.compiler.resolver.ClassPathResolver;
import plaid.compiler.Resolver;

state StdLibContext case of Context {

    val shared Context parent;
    val shared ClasspathResolver resolver;
    
    method put(name, symbol) {
        false
    }

    method find(immutable String name) {        
        var unique Option symbol = NONE;                                
        var symbolOpt = resolver.lookup("plaid.lang." + name);
        match (symbolOpt) {
            case Some { symbolOpt }
            case None { 
                symbolOpt = resolver.lookup("plaid.lang.globals." + name);
                match (symbolOpt) {
                    case Some { symbolOpt }
                    case None { parent.find(name) }
                }
            }
        }
    }
}