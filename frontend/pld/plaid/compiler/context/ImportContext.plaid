package plaid.compiler.context;

import plaid.ast.util.*;

import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG2;
import plaid.compiler.DEBUG3;

import plaid.compiler.Symbol;
import plaid.compiler.symbol.SymbolFactory;
import plaid.compiler.Context;
import plaid.compiler.resolver.ClassPathResolver;
import plaid.compiler.Resolver;


import java.util.HashMap;
import java.util.Map;


state ImportContext case of Context {
    
    val unique Map cache = HashMap.new();
    val shared Context parent;
    val shared List imports;    
    val shared ClasspathResolver resolver;
    
    method put(name, symbol) {
        false
    }

    method find(name) {        
        var unique Option symbol = NONE;
        DEBUG2("<ImportContext> looking for '" + name + "'");        

        ifElse ( cache.containsKey(name) ) {
            DEBUG3("<ImportContext> found '" + name + "' in cache.");
            symbol = cache.get(name);
        }{
            DEBUG3("<ImportContext> searching in imports");
            imports.map( fn (imp) =>  {            
                DEBUG3("<ImportContext>     searching in '" + makeStringFromQualifiedIdentifier(imp.qualifiedIdentifier) +"'");
                match (symbol) {
                    case None {
                        match (imp.star) {                
                            case False {                            
                                val size   = imp.qualifiedIdentifier.identifiers.length();
                                val lastId = imp.qualifiedIdentifier.identifiers.get(size - 1);

                                if ( lastId.name == name ) {
                                    var fqn = makeStringFromQualifiedIdentifier(imp.qualifiedIdentifier);
                                    symbol = resolver.lookup(fqn);
                                };
                            }
                            case True { 
                                val packageName = makeStringFromQualifiedIdentifier(imp.qualifiedIdentifier);
                                val fqn = packageName + "." + name;
                                symbol = resolver.lookup(fqn);
                            }
                        }
                    }
                    case Some {}
                };
                imp
            });

           cache.put(name, symbol);
        };
   
        match (symbol) {
            case Some { symbol }
            case None { parent.find(name) }
        }
    }
}