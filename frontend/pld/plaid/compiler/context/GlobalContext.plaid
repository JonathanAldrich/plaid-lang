package plaid.compiler.context;

import plaid.ast.util.makeStringFromQualifiedIdentifier;

import plaid.compiler.Context;
import plaid.compiler.symbol.PackageSymbol;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_MEDIUM;


state GlobalContext case of Context {
    val shared Context parent;
    val shared Resolver resolver;

    method immutable Boolean put(immutable String name, shared Symbol symbol) {
        parent.put(name, symbol);
    }
    
    method find(name) {
        parent.find(name);
    }

    method shared Option findInSymbol(symbol, name) {
        match (symbol) {
            case PackageSymbol {
                DEBUG(DEBUG_PRIO_MEDIUM, "<GlobalContext> search in package symbol ");
                val fqn = makeStringFromQualifiedIdentifier(symbol.getQualifiedIdentifier()) + "." + name;
                resolver.lookup(fqn);
            }
            default {
                parent.findInSymbol(symbol, name);
            }
        }
    }

}