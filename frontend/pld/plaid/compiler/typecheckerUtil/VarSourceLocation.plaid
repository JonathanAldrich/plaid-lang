/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typecheckerUtil;

import plaid.compiler.types.mergeStructures;
import plaid.compiler.types.makeType;

immutable state VarSourceLocation case of SourceLocation { 
  val immutable Symbol varSymbol;
  
  method unique LinearContext restore(immutable Type retType, unique LinearContext ctx) {
    val unique Option<immutable Type> curVarTypeOption = ctx.getOption(this.varSymbol);
    match(curVarTypeOption) {
      case Some {
        val immutable Permission restoredPermOption = curVarTypeOption.value.permission.returnPerm(retType.permission);
        match ( restoredPermOption) {
          case Some {
            val immutable Structure restoredStructure = mergeStructures(curVarTypeOption.value.structure, retType.structure);
            val newCtx = ctx.copy();
            newCtx.update(this.varSymbol, makeType(restoredPermOption.value,restoredStructure));
            newCtx
          }
          case None { ABORT(perm.toString() + " cannot be restored to " + curVarTypeOption.value.permission.toString()); }
        }
      }
      case None { ctx.copy() }
    }
  }
}