/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typecheckerUtil;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;
import plaid.ast.parsed.*;
import plaid.compiler.types.*;
import plaid.compiler.permissions.*;
import plaid.compiler.symbol.*;
import plaid.compiler.tests.*;

import plaid.collections.makeLinkedList;

state LinearContextTestFactory case of TestFactory {
	
	method unique List<unique Test> createTests() {
		val tests = makeLinkedList();
		val test = fn(name,body) => { tests.add(mktest(name, body)) };
		var result = new None;  //dummy variable to get around match scoping bug
	  
	  val ast = new ASTsForTests;
    ast.initASTs();
    val symbols = new SymbolsForTests;
    symbols.initSymbols(ast);
    val types = new TypesForTests;
    types.initPermissions();
    types.initTypes(ast,symbols);
	  
	  val astCMP = new ASTsForTests;
    astCMP.initASTs();
    val symbolsCMP = new SymbolsForTests;
    symbolsCMP.initSymbols(astCMP);
    val typesCMP = new TypesForTests;
    typesCMP.initPermissions();
    typesCMP.initTypes(astCMP,symbolsCMP);
	  
    /****************** LinearContext.== and put *******************/
    
    val unique LinearContext emptyContext = new LinearContext;
    
    val unique LinearContext c1 = new LinearContext;
    c1.put(symbols.varSym1,VOID);
    val unique LinearContext c1eq = new LinearContext;
    c1eq.put(symbolsCMP.varSym1,VOID);
    val unique LinearContext c1neq1 = new LinearContext;
    c1neq1.put(symbols.varSym2,VOID);
    val unique LinearContext c1neq2 = new LinearContext;
    c1neq2.put(symbols.varSym1,DYNAMICTYPE);
    
    val unique LinearContext c2 = new LinearContext;
    c2.put(symbols.varSym1,VOID);
    c2.put(symbols.varSym2,VOID);
    c2.put(symbols.varSym4,VOID);
    val unique LinearContext c2eq = new LinearContext;
    c2eq.put(symbolsCMP.varSym2,VOID);
    c2eq.put(symbolsCMP.varSym4,VOID);
    c2eq.put(symbolsCMP.varSym1,VOID);
    val unique LinearContext c2neq1 = new LinearContext;
    c2neq1.put(symbols.varSym1,VOID);
    c2neq1.put(symbols.varSym2,VOID);
    c2neq1.put(symbols.varSym3,VOID);
    val unique LinearContext c2neq2 = new LinearContext;
    c2neq2.put(symbols.varSym1,VOID);
    c2neq2.put(symbols.varSym2,VOID);
    c2neq2.put(symbols.varSym3,VOID);
    c2neq2.put(symbols.varSym4,VOID);
    val unique LinearContext c2neq3 = new LinearContext;
    c2neq3.put(symbols.varSym1,VOID);
    c2neq3.put(symbols.varSym2,DYNAMICTYPE);
    c2neq3.put(symbols.varSym4,VOID);

    test("LinearContext equality and put", fn(ctx) => {
      ctx.assertTrue(emptyContext == new LinearContext);
      ctx.assertTrue(c1 == c1eq);
      ctx.assertFalse(c1 == c1neq1);
      ctx.assertFalse(c1 == c1neq2);
      ctx.assertTrue(c2 == c2eq);
      ctx.assertFalse(c2 == c2neq1);
      ctx.assertFalse(c2 == c2neq2);
      ctx.assertFalse(c2 == c2neq3);
    });
    
    /****************** LinearContext.get *******************/
	
	  test("LinearContext get", fn(ctx) => {
      ctx.assertTrue(c1.get(symbols.varSym1) == VOID);
      ctx.assertFalse(c1.get(symbols.varSym1) == DYNAMICTYPE);
      //test exception thrown when trying to get something that isn't there since no null in plaid
    });
    
    /****************** LinearContext.getOption *******************/
  
    test("LinearContext getOption", fn(ctx) => {
      ctx.assertTrue(match (c1.getOption(symbols.varSym1)) { case Some { c1.getOption(symbols.varSym1).value == VOID } case None { false } });
      ctx.assertTrue(match (c1.getOption(symbols.varSym2)) { case Some { false } case None { true } });
    });
    
    /****************** LinearContext.containsSymbol *******************/
  
    test("LinearContext containsSymbol", fn(ctx) => {
      ctx.assertTrue(c1.containsSymbol(symbols.varSym1));
      ctx.assertFalse(c1.containsSymbol(symbols.varSym2));
    });
    
    /****************** LinearContext.remove *******************/
  
    val unique LinearContext cr1 = new LinearContext;
    cr1.put(symbols.varSym1,VOID);
    cr1.remove(symbols.varSym1);
    
    val unique LinearContext cr2 = new LinearContext;
    cr2.put(symbols.varSym1,VOID);
    cr2.put(symbols.varSym4,VOID);
    cr2.put(symbols.varSym2,VOID);
    cr2.put(symbols.varSym3,VOID);
    cr2.remove(symbols.varSym4);
    
    val unique LinearContext cr3 = new LinearContext;
    cr3.put(symbols.varSym1,VOID);
    cr3.remove(symbols.varSym2);
  
    test("LinearContext remove", fn(ctx) => {
      ctx.assertTrue(cr1 == emptyContext);
      ctx.assertTrue(cr2 == c2neq1);
      ctx.assertTrue(cr3 == c1);
    });
    
    /****************** LinearContext.update *******************/
  
    val unique LinearContext cu1 = new LinearContext;
    cu1.put(symbols.varSym1,VOID);
    cu1.update(symbols.varSym1,DYNAMICTYPE);
    
    val unique LinearContext cu2 = new LinearContext;
    cu2.put(symbols.varSym1,DYNAMICTYPE);
    cu2.put(symbols.varSym2,DYNAMICTYPE);
    cu2.update(symbols.varSym2,VOID);
    
    val unique LinearContext cu3 = new LinearContext;
    cu3.put(symbols.varSym1,VOID);
    cu3.update(symbols.varSym2,DYNAMICTYPE);
  
    test("LinearContext update", fn(ctx) => {
      ctx.assertTrue(cu1.get(symbols.varSym1) == DYNAMICTYPE);
      ctx.assertTrue(cu2.get(symbols.varSym1) == DYNAMICTYPE && cu2.get(symbols.varSym2) == VOID);
      ctx.assertTrue(cu3 == c1);
    });

    /****************** LinearContext.downgrade *******************/
    
    val unique LinearContext cd1 = new LinearContext;
    cd1.put(symbols.varSym1,types.nominalType_n1);
    cd1.put(symbols.varSym2,types.nominalType_s1);
    cd1.put(symbols.varSym3,DYNAMICTYPE);
    cd1.put(symbols.varSym4,types.nominalType_u1);
    cd1.downgrade();
    
    val unique LinearContext cd1cmp = new LinearContext;
    cd1cmp.put(symbols.varSym1,VOID);
    cd1cmp.put(symbols.varSym2,types.nominalType_sT);
    cd1cmp.put(symbols.varSym3,DYNAMICTYPE);
    cd1cmp.put(symbols.varSym4,types.nominalType_u1);
  
    test("LinearContext downgrade", fn(ctx) => {
      ctx.assertTrue(cd1 == cd1cmp);
    });
    
    /****************** LinearContext.merge *******************/
    
    val unique LinearContext cm1 = new LinearContext;
    cm1.put(symbols.varSym1,types.nominalType_i2);
    
    val unique LinearContext cm2 = new LinearContext;
    cm2.put(symbols.varSym1,types.nominalType_i2);
    cm2.put(symbols.varSym2,types.nominalType_s1);
    cm2.put(symbols.varSym3,DYNAMICTYPE);
    
    val unique LinearContext cm3 = new LinearContext;
    cm3.put(symbols.varSym1,types.nominalType_li1);
    cm3.put(symbols.varSym2,types.nominalType_n4);
    cm3.put(symbols.varSym3,DYNAMICTYPE);
    
    val unique LinearContext cm23Cmp = new LinearContext;
    cm23Cmp.put(symbols.varSym1,types.nominalType_i1);
    cm23Cmp.put(symbols.varSym2,types.nominalType_sT);
    cm23Cmp.put(symbols.varSym3,DYNAMICTYPE);
    
    val unique LinearContext cm4 = new LinearContext;
    cm4.put(symbols.varSym1,types.nominalType_li1);
    cm4.put(symbols.varSym2,types.nominalType_n4);
    cm4.put(symbols.varSym3,VOID);
    
    test("LinearContext merge", fn(ctx) => {
      result = cm1.merge(cm2);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm1);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm3);
      ctx.assertTrue(match (result) { case Some { result.value == cm23Cmp } case None { false } });
      result = cm3.merge(cm2);
      ctx.assertTrue(match (result) { case Some { result.value == cm23Cmp } case None { false } });
      result = cm4.merge(cm2);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
      result = cm2.merge(cm4);
      ctx.assertTrue(match (result) { case Some { false } case None { true } });
    });
    
    /****************** LinearContext.copy *******************/
    
    val unique LinearContext cc1 = new LinearContext;
    cc1.put(symbols.varSym1,types.nominalType_i2);
    cc1.put(symbols.varSym2,types.nominalType_s1);
    cc1.put(symbols.varSym3,DYNAMICTYPE);
    
    val unique LinearContext cc1cmp = new LinearContext;
    cc1cmp.put(symbolsCMP.varSym1,typesCMP.nominalType_i2);
    cc1cmp.put(symbolsCMP.varSym2,typesCMP.nominalType_s1);
    cc1cmp.put(symbolsCMP.varSym3,DYNAMICTYPE);
    
    test("LinearContext copy", fn(ctx) => {
      ctx.assertTrue(cc1.copy() == cc1cmp);
    });
    
    /****************** VarSourceLocation restore *******************/
  
    val unique LinearContext cslBase = new LinearContext;
    cslBase.put(symbols.varSym1,VOID);
    cslBase.put(symbols.varSym2,types.unpackedType_u1F3u1_1Bs1);
    
    val unique LinearContext cslBase2 = new LinearContext;
    cslBase2.put(symbols.varSym1,types.nominalType_Bs1u1);
    cslBase2.put(symbols.varSym2,types.unpackedType_u1F3u1_1Bs1);
    
    val unique LinearContext cslEq = new LinearContext;
    cslEq.put(symbolsCMP.varSym1,VOID);
    cslEq.put(symbolsCMP.varSym2,typesCMP.unpackedType_u1F3u1_1Bs1);
    
    val unique LinearContext cslCmp1 = new LinearContext;
    cslCmp1.put(symbols.varSym1,types.nominalType_u1);
    cslCmp1.put(symbols.varSym2,types.unpackedType_u1F3u1_1Bs1);
    
    val unique LinearContext cslCmp2 = new LinearContext;
    cslCmp2.put(symbols.varSym1,VOID);
    cslCmp2.put(symbols.varSym2,types.nominalType_u1);

    val unique LinearContext cslCmp3 = new LinearContext;
    cslCmp3.put(symbols.varSym1,types.nominalType_u1);
    cslCmp3.put(symbols.varSym2,types.nominalType_u1);
  
    val immutable VarSourceLocation slVar1 = makeVarSourceLoc(symbols.varSym1);
    val immutable VarSourceLocation slVar3 = makeVarSourceLoc(symbols.varSym3); //not there
    val immutable FieldSourceLocation slField2 = 
      makeFieldSourceLocSetID(symbols.varSym2, ast.fieldName3, 1);
    val immutable FieldSourceLocation slField4 = //not there
      makeFieldSourceLocSetID(symbols.varSym4, ast.fieldName3, 1);
    val restoreList = makeLinkedList();
    restoreList.add(slVar1);
    restoreList.add(slField2);
    
    test("source locations restore", fn(ctx) => {
      ctx.assertTrue(slVar1.restore(types.nominalType_u1,cslBase) == cslCmp1);
      ctx.assertTrue(slField2.restore(types.nominalType_ls1,cslBase) == cslCmp2);
      ctx.assertTrue(slVar3.restore(types.nominalType_u1,cslBase) == cslEq);
      ctx.assertTrue(slField4.restore(types.nominalType_ls1,cslBase) == cslEq);
      ctx.assertTrue(listRestore(restoreList,types.nominalType_ls1,cslBase2) == cslCmp3);
    });
  
  
	  tests
  }
}