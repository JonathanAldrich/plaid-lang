/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typecheckerUtil;

import plaid.compiler.Symbol;

/**
 * Integer counter to keep track of reassignments to fields and
 * prevent stale restores.  Integers in Plaid are ideal, so
 * no overflow concern
 */
var immutable Integer locationIDcount = 0;

/**
 *  Return the next location ID, incrementing the counter
 */
method immutable Integer getUniqueLocationID()[immutable Integer locationIDcount] { 
  locationIDcount = locationIDcount + 1;
  locationIDcount
}

/**
 *  factory methods for source locations
 */
method immutable VarSourceLocation makeVarSourceLoc(immutable Symbol varSymbol) {
  new VarSourceLocation {
    val varSymbol = varSymbol;
  }
}

method immutable FieldSourceLocation makeFieldSourceLoc(immutable Symbol objectSymbol, immutable Symbol fieldSymbol) {
  new FieldSourceLocation {
    val objecSymbol = objectSymbol;
    val fieldSymbol = fieldSymbol;
    val locationID = getUniqueLocationID();
  }
}

/**
 * Restores Permission perm to each source location in sourceLocs to LinearContext ctx
 */
method void listRestore(unique LinkedList<SourceLocation> sourceLocs, immutable Permission perm, unique LinearContext ctx) {
  sourceLocs.do(fn (immutable SourceLocation sourceLoc)[immutable Permission perm, unique LinearContext ctx] => { sourceLoc.restore(perm, ctx) })
}