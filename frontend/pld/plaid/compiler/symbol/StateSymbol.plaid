package plaid.compiler.symbol;

import plaid.compiler.Symbol;
import plaid.ast.parsed.ASTNode;

state StateSymbol case of Symbol {
  val immutable ASTNode declaration;
  val immutable Symbol owner;

    method unique QualifiedIdentifier getQualifiedIdentifier() {
        match ( owner ) {
            case PackageSymbol {
                DEBUG(DEBUG_PRIO_LOW, "<SateSymbol> Found 'PackageSymbol' owner.");
                val qi = owner.getQualifiedIdentifier();
                val unique List ids = makeEmptyList();
                
                qi.identifiers.map(fn (id) => {
                    ids.add(id);
                });
                ids.add(new Identifier{name = this.name; token = EMPTY_TOKEN;});
                
                new QualifiedIdentifier{ identifiers = ids; token = EMPTY_TOKEN;}
            }
            case TopSymbol {
                DEBUG(DEBUG_PRIO_LOW, "<StateSymbol> Found 'TopSymbol' owner.");
                val ids = makeEmptyList();
                ids.add(new Identifier{name = this.name; token = EMPTY_TOKEN;});
                new QualifiedIdentifier{ identifiers = ids;  token = EMPTY_TOKEN;}
            }
            default {
                ERROR("Package has invalid owner.");
                new QualifiedIdentifier{ identifiers = makeEmptyList(); token = EMPTY_TOKEN;}
            }
        }
    }

}