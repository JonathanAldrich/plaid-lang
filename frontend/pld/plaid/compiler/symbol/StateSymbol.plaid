package plaid.compiler.symbol;

import plaid.compiler.*;
import plaid.compiler.types.*;
import plaid.compiler.permissions.NONEP;
import plaid.ast.parsed.ASTNode;
import plaid.ast.util.makeStringFromQualifiedIdentifier;
import plaid.collections.makeLinkedList;


state StateSymbol case of OwningSymbol {
    val immutable ParsedStateDecl declaration;
    val immutable OwningSymbol owner;
    val unique LinkedList members = makeLinkedList();
    var unique Option<immutable Structure> stateStructureOption = new None;
    var unique Option<immutable Symbol> superStateSymbolOption = new None;
    
    override method immutable Boolean ==(immutable Symbol other)[immutable StateSymbol this] {
        match (other) {
          case StateSymbol { this.name.equals(other.name) && this.owner == other.owner }
          default { false }
        }
    } 
    
    method unique ParsedQualifiedIdentifier getQualifiedIdentifier() {
        match ( owner ) {
            case PackageSymbol {
                DEBUG(DEBUG_PRIO_LOW, "<SateSymbol> Found 'PackageSymbol' owner.");
                val qi = owner.getQualifiedIdentifier();
                val unique LinkedList ids = makeLinkedList();
                
                qi.identifiers.map(fn (id) => {
                    ids.add(id);
                });
                ids.add(new ParsedIdentifier{name = this.name; token = EMPTY_TOKEN;});
                
                new ParsedQualifiedIdentifier{ identifiers = ids; token = EMPTY_TOKEN;}
            }
            case TopSymbol {
                DEBUG(DEBUG_PRIO_LOW, "<StateSymbol> Found 'TopSymbol' owner.");
                val unique LinkedList ids = makeLinkedList();
                ids.add(new ParsedIdentifier{name = this.name; token = EMPTY_TOKEN;});
                new ParsedQualifiedIdentifier{ identifiers = ids;  token = EMPTY_TOKEN;}
            }
            default {
                ERROR("<StateSymbol> Package has invalid owner.");
                new ParsedQualifiedIdentifier{ identifiers = makeLinkedList(); token = EMPTY_TOKEN;}
            }
        }
    }

    method immutable String getFQN() {
        makeStringFromQualifiedIdentifier(getQualifiedIdentifier());
    }    

    method void addMember(shared Symbol member) {
        this.members.add(member);
    }
    
    method immutable Boolean isImmutableState() {
        match (this.declaration) {
            case ParsedStateDecl {
                this.declaration.modifiers.exists(
                    fn (elem) => {
                        match (elem) {
                            case ParsedImmutableModifier { true }
                            default { false }
                        }
                    }
                )
            }
            default { false } //TODO: better node types?
        }
    }

    method unique Option getMember(immutable String name) {
        var unique Option value = NONE;

        this.members.map( fn (memberSymbol) => {
            if ( memberSymbol.name == name ) {
                value = makeSome(memberSymbol);
            };
            memberSymbol
        });
        
        value;
    }

    method immutable Structure getStructure() {        
      match (this.stateStructureOption) {
        case Some { this.stateStructureOption.value }
        case None {
          if ( !haveTypeForAST(this.declaration) ) {
            val immutable NominalStructure theStructure =  new NominalStructure {
              val symbol = this;
              val owner  = this.owner.getType();
              val name   = this.name;
            };
            addTypeForAST(this.declaration, new Type {
              val permission = NONEP;
              val structure  = theStructure;
            });
            this.stateStructureOption = makeSome(theStructure);
            theStructure
          }
        }
      }
    }
    
    method immutable Symbol getSuperStateSymbol()[immutable StateSymbol this] {
      match (this.superStateSymbolOption) {
        case Some { this.superStateSymbolOption.value }
        case None {
          val immutable ParsedQualifiedIdentifier caseOfNode = this.declaration.caseOf;
          match (caseOfNode) {
            case ParsedEmptyQualifiedIdentifier { 
              this.superStateSymbolOption = makeSome(new TopSymbol);
              new TopSymbol;
            }
            default {
              val unique Option<immutable Symbol> ASTsymbolOption = symbolForAST(caseOfNode);
              match (ASTsymbolOption) {
                case Some {
                  match (ASTsymbolOption.value) {
                    case StateSymbol {
                      this.superStateSymbolOption = makeSome(ASTsymbolOption.value);
                      ASTsymbolOption.value;
                    }
                    default {
                      ABORT(this.toString() + " case of a non-state declaration: " + ASTsymbolOption.toString());
                    }
                  }
                }
                case None {
                  ABORT(this.toString() + " case of declaration invalid");
                }
              }
            }
          }
        }
      }
    }
}