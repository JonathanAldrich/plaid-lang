package plaid.compiler.symbol;

import plaid.compiler.*;
import plaid.ast.parsed.*;
import plaid.compiler.util.makeTypeFromAST;
import plaid.compiler.types.*;

state FieldSymbol case of DeclSymbol {
    var unique Option<immutable FieldSignature> signatureOption = new None;

    override method immutable Boolean ==(immutable Symbol other)[immutable FieldSymbol this] {
        match (other) {
            case FieldSymbol { this.name.equals(other.name) && this.owner == other.owner }
            default { false }
        }
    } 

    method immutable FieldSignature getSignature() {
      match (this.signatureOption) {
        case None {
          DEBUG(DEBUG_PRIO_LOW, "<FieldSymbol> compute type for field");
          val fieldType = makeTypeFromAST(this.declaration.fieldType);
          val isVar = match (this.declaration.specifier) {
            case ParsedVarSpecifier { true }
            default { false }
          };

          val newSignature = new PackedFieldSignature  {
            val isVar    = isVar;
            val fieldType = fieldType;
            val name     = this.declaration.name.name;
          };
          this.signatureOption = makeSome(newSignature);
          newSignature
        }
        case Some {
          this.signatureOption.value      
        }
      }
    }
}