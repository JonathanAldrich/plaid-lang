package plaid.compiler.symbol;

import plaid.compiler.Symbol;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_HIGH;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.DEBUG_PRIO_LOW;
import plaid.compiler.PlaidType;
import plaid.compiler.types.*;

import plaid.ast.parsed.ASTNode;
import plaid.ast.parsed.Type;
import plaid.ast.parsed.EmptyType;


state VariableSymbol case of Symbol {
    val immutable ASTNode declaration;
    var immutable Option typeOpt = NONE;

    method getType() {
        match (this.typeOpt) {
            case None {
                val immutable Type vt = computeType();
                this.typeOpt = makeSome(vt);
                vt
            }
            case Some {
                this.typeOpt.value
            }
        }
    }

    method immutable Type computeType(){
        match (declaration.varType) {
            case EmptyType {
                printLine("<VariableSymbol> variable declaration has no type information.");
                new DynamicType;
            }
            case Type {
                DEBUG(DEBUG_PRIO_LOW, "<VariableSymbol> variable declaration has type information.");
                new DynamicType;
            }
            default  {
                new DynamicType;
            }
        }
    }
}