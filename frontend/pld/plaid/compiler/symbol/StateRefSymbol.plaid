package plaid.compiler.symbol;

import plaid.compiler.Symbol;
import plaid.ast.parsed.ASTNode;

import plaid.collections.makeLinkedList;

state StateRefSymbol case of OwningSymbol {
    val immutable ASTNode declaration;
    val unique List members = makeLinkedList();
    val shared StateSymbol referencedState;
    var unique LinkedList staticParams = makeLinkedList();
    
    method void addStaticParameter(shared StaticParameterSymbol paramSym) {
        this.staticParams.addLast(paramSym);
    }
    
    method unique LinkedList getStaticParameters() {
        this.staticParams.map(fn (p) => p);
    }
    
    method immutable Structure getStructure() {
        this.referencedState.getStructure()
    }

    method void addMember(shared Symbol member) {
        this.members.add(member);
    }

    method unique Option getMember(immutable String name) {
        var unique Option value = NONE;

        this.members.map( fn (m) => {
            if ( m.name == name ) {
                value = makeSome(m);
            };
        });
        
        value;
    }
    
    override method immutable String symbolType() { "State Ref Symbol" }
} 