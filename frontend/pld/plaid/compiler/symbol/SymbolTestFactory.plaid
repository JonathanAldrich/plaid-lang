/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.symbol;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.ast.parsed.ParsedEmptyExpr;
import plaid.compiler.permissions.UniquePermission;
import plaid.compiler.permissions.ImmutablePermission;
import plaid.compiler.permissions.*;
import plaid.compiler.types.*;
import plaid.compiler.tests.*;

import plaid.collections.makeLinkedList;

state SymbolTestFactory case of TestFactory {
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
    var result = unit; //dummy result variable
    
    val ast = new ASTsForTests;
    ast.initASTs();
    val symbols = new SymbolsForTests;
    symbols.initSymbols(ast);

    val astCMP = new ASTsForTests;
    astCMP.initASTs();
    val symbolsCMP = new SymbolsForTests;
    symbolsCMP.initSymbols(astCMP);
   
    val unique SymbolFactory symFac = new SymbolFactory;
    
    //package structures
    val immutable PackageStructure packageStruct1 = makePackageStructure(TOPSTRUCT,ast.packageName1);
    val immutable PackageStructure packageStruct2 = makePackageStructure(TOPSTRUCT,ast.packageName2);
    val immutable PackageStructure packageStruct3 = makePackageStructure(packageStruct1,ast.packageName3);
    
    //field Signatures for comparison
    val immutable NominalStructure nomStruct1 = makeNominalStructure(symbols.stateSym1,packageStruct1,ast.stateName1);
    val immutable NominalStructure nomStruct2 = makeNominalStructure(symbols.stateSym2,packageStruct1,ast.stateName2);
    
    val immutable Type nomType1 = makeType(UNIQUE,nomStruct1);
    val immutable Type nomType1alt = makeType(NONEP,nomStruct1);
    val immutable Type nomType1altshared = makeType(SHARED,nomStruct1);
    val immutable Type nomType2 = makeType(UNIQUE,nomStruct2);
    val immutable Type nomType2alt = makeType(IMMUTABLE,nomStruct2);
    
    val immutable FieldSignature fieldSig1 = makeFieldSignature(false,nomType1,ast.fieldName1);
    val immutable FieldSignature fieldSig1alt = makeFieldSignature(false,nomType1altshared,ast.fieldName1);
    val immutable FieldSignature fieldSig2 = makeFieldSignature(false,nomType2,ast.fieldName2);
     
    //method signatures for comparison
    val /*unique LinkedList<immutable Pair<immutable VariableSymbol, immutable ArgSpec>>*/
      mArgsSig = makeLinkedList();
    mArgsSig.add(makePair(symbols.argSym2,makeArgSpec(nomType1,nomType1)));
    mArgsSig.add(makePair(symbols.argSym1,makeArgSpec(nomType1,nomType1alt)));
    
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigP1 = java.util.HashMap.new();
    envSigP1.put(symbols.envSym1,makeArgSpec(nomType1,nomType1));
    envSigP1.put(symbols.envSym2,makeArgSpec(nomType1,nomType1));
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigP2 = java.util.HashMap.new();
    envSigP2.put(symbols.envSym1,makeArgSpec(nomType1,nomType1));
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigS1 = java.util.HashMap.new();
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigS2 = java.util.HashMap.new();
    
    val immutable MethodSignature methodSigP1 = 
      makeMethodSignature(nomType1, ast.methodName1, mArgsSig, 
                          makeArgSpec(VOID,VOID), envSigP1, 
                          makeLinkedList());
    val immutable MethodSignature methodSigP2 = 
      makeMethodSignature(nomType1, ast.methodName2, mArgsSig, 
                          makeArgSpec(nomType1,nomType1alt), envSigP2, 
                          makeLinkedList());
    val immutable MethodSignature methodSigS1 = 
      makeMethodSignature(nomType1, ast.methodName1, mArgsSig, 
                          makeArgSpec(nomType1,nomType1alt), envSigS1, 
                          makeLinkedList());
    val immutable MethodSignature methodSigS2 = 
      makeMethodSignature(nomType1, ast.methodName2, mArgsSig, 
                          makeArgSpec(nomType1,nomType1), envSigS2, 
                          makeLinkedList());

    /********************** Top Symbol *************************/
    test("Top Symbol equality", fn(ctx) => { 
      ctx.assertTrue(TOPSYM == symFac.makeTopSymbol());
      ctx.assertFalse(TOPSYM == symbols.packageSym1);
      ctx.assertFalse(TOPSYM == symbols.stateSym1);
      ctx.assertFalse(TOPSYM == symbols.fvalSym1u1Op1);
      ctx.assertFalse(TOPSYM == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(TOPSYM == symbols.argSym1);
      ctx.assertFalse(TOPSYM == symbols.thisSym1);
    }); 
    
    test("Top symbol getStructure", fn(ctx) => {
      ctx.assertTrue(TOPSYM.getStructure() == TOPSTRUCT);
    });
    
    
    /********************** Package Symbols *************************/
    test("Package Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.packageSym1 == symbolsCMP.packageSym1);
      ctx.assertFalse(symbols.packageSym1 == TOPSYM);
      ctx.assertFalse(symbols.packageSym1 == symbols.packageSym2);
      ctx.assertFalse(symbols.packageSym1 == symbols.packageSym3);
      ctx.assertFalse(symbols.packageSym3 == symbols.packageSym1);
      ctx.assertFalse(symbols.packageSym1 == symbols.stateSym1);
      ctx.assertFalse(symbols.packageSym1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.packageSym1 == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.packageSym1 == symbols.argSym1);
      ctx.assertFalse(symbols.packageSym1 == symbols.thisSym1);
    }); 
    
    test("Package symbol getStructure", fn(ctx) => {
      ctx.assertTrue(symbols.packageSym1.getStructure() == packageStruct1);
      ctx.assertTrue(symbols.packageSym3.getStructure() == packageStruct3);
    });
    
    /********************** State Symbols *************************/
    test("State Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.stateSym1 == symbolsCMP.stateSym1);
      ctx.assertFalse(symbols.stateSym1 == TOPSYM);
      ctx.assertFalse(symbols.stateSym1 == symbols.packageSym1);
      ctx.assertFalse(symbols.stateSym1 == symbols.stateSym2);
      ctx.assertFalse(symbols.stateSym1 == symbols.stateSym4);
      ctx.assertFalse(symbols.stateSym1 == symbols.stateSym3);
      ctx.assertFalse(symbols.stateSym3 == symbols.stateSym1);
      ctx.assertFalse(symbols.stateSym1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.stateSym1 == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.stateSym1 == symbols.argSym1);
      ctx.assertFalse(symbols.stateSym1 == symbols.thisSym1);
    }); 
    
    test("State Symbol getStructure", fn(ctx) => { 
      ctx.assertTrue(symbols.stateSym1.getStructure() == nomStruct1);
    });
    
    test("State Symbol default State Permission", fn(ctx) => { 
      ctx.assertTrue(match(symbols.stateSym2.defaultStatePermission()) { case ImmutablePermission { true } default { false } });
      ctx.assertTrue(match(symbols.stateSym1.defaultStatePermission()) { case UniquePermission { true } default { false } });
    }); 
    
    test("State Symbol default State Type", fn(ctx) => { 
      ctx.assertTrue(symbols.stateSym1.defaultStateType() == makeType(UNIQUE,nomStruct1));
    }); 
    
    test("State Symbol getMember", fn(ctx) => { 
      result = symbols.stateSym1.getMember(ast.fieldName1);
      ctx.assertTrue(match(result) { case Some { result.value == symbols.fvalSym1u1Os1 } case None { false } });
      result = symbols.stateSym2.getMember(ast.fieldName1);
      ctx.assertTrue(match(result) { case Some { false } case None { true } });
    });
    
    
    test("State Symbol getSuperStateSymbol", fn(ctx) => {
      ctx.assertTrue(symbols.stateSym2.getSuperStateSymbol() == symbols.stateSym1);
      ctx.assertTrue(symbols.stateSym1.getSuperStateSymbol() == TOPSYM);
    }); 

    test("State Symbol getDimension", fn(ctx) => {
      val dimCmp1 = makeLinkedList();
      dimCmp1.add(TOPSYM);
      dimCmp1.add(symbols.stateSym1);
      
      val dimCmp2 = makeLinkedList();
      dimCmp2.add(TOPSYM);
      dimCmp2.add(symbols.stateSym1);
      dimCmp2.add(symbols.stateSym2);
      
      ctx.assertTrue(symbols.stateSym2.getDimension().zipReverse(dimCmp2).reduce(true,fn(acc,symPair) => acc && symPair.fst == symPair.snd));
      ctx.assertTrue(symbols.stateSym1.getDimension().zipReverse(dimCmp1).reduce(true,fn(acc,symPair) => acc && symPair.fst == symPair.snd));
    }); 
    
    /********************** Field Symbols *************************/
    test("Field Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.fvalSym1u1Op1 == symbolsCMP.fvalSym1u1Op1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == TOPSYM);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.packageSym1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.stateSym1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.fvalSym2e2Op1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.fvalSym1u1Os1);
      ctx.assertFalse(symbols.fvalSym1u1Os1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.fvalSym1u1Os1 == symbols.fvalSym2e2Op1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.argSym1);
      ctx.assertFalse(symbols.fvalSym1u1Op1 == symbols.thisSym1);
    });
    
    test("Field Symbol getSignature", fn(ctx) => {
      ctx.assertTrue(symbols.fvalSym1u1Os1.getSignature() == makeFieldSignature(false,makeType(UNIQUE,nomStruct1),ast.fieldName1));
    }); 
    
    /********************** Method Symbols *************************/
    test("Method Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbolsCMP.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == TOPSYM);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.packageSym1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.stateSym1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.methodSym1Ru1A1u1n12u1u1Tu1n1E);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1Tu1n1E == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1Tu1n1E == symbols.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.argSym1);
      ctx.assertFalse(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1 == symbols.thisSym1);
    }); 
    
    test("Method Symbol getSignature", fn(ctx) => { 
      ctx.assertTrue(symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1.getSignature() == methodSigP1);
      //java.lang.System.out.println(symbols.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1.getSignature().toString());
      //java.lang.System.out.println(methodSigP2.toString());
      ctx.assertTrue(symbols.methodSym2Ru1A1u1n12u1u1Tu1n1E1u1u1.getSignature() == methodSigP2);
      //java.lang.System.out.println(symbols.methodSym1Ru1A1u1n12u1u1Tu1n1E.getSignature().toString());
      //java.lang.System.out.println(methodSigS1.toString());
      ctx.assertTrue(symbols.methodSym1Ru1A1u1n12u1u1Tu1n1E.getSignature() == methodSigS1);
      //java.lang.System.out.println(symbols.methodSym2Ru1A1u1n12u1u1TE.getSignature().toString());
      //java.lang.System.out.println(methodSigS2.toString());
      ctx.assertTrue(symbols.methodSym2Ru1A1u1n12u1u1TE.getSignature() == methodSigS2);
    }); 
    
    /********************** Variable (Arg) Symbols *************************/
    test("Variable Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.argSym1 == symbolsCMP.argSym1);
      ctx.assertFalse(symbols.argSym1 == TOPSYM);
      ctx.assertFalse(symbols.argSym1 == symbols.packageSym1);
      ctx.assertFalse(symbols.argSym1 == symbols.stateSym1);
      ctx.assertFalse(symbols.argSym1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.argSym1 == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.argSym1 == symbols.argSym2);
      ctx.assertFalse(symbols.argSym1 == symbols.thisSym1);
    });
    
    /********************** This Symbol *************************/
    test("This Symbol equality", fn(ctx) => { 
      ctx.assertTrue(symbols.thisSym1 == symbolsCMP.thisSym1);
      ctx.assertFalse(symbols.thisSym1 == TOPSYM);
      ctx.assertFalse(symbols.thisSym1 == symbols.packageSym1);
      ctx.assertFalse(symbols.thisSym1 == symbols.stateSym1);
      ctx.assertFalse(symbols.thisSym1 == symbols.fvalSym1u1Op1);
      ctx.assertFalse(symbols.thisSym1 == symbols.methodSym1Ru1A1u1n12u1u1TE1u1u12u1u1);
      ctx.assertFalse(symbols.thisSym1 == symbols.argSym1);
      ctx.assertFalse(symbols.thisSym1 == symbols.thisSym2);
    });
    
    
    tests
  }
  
  
}