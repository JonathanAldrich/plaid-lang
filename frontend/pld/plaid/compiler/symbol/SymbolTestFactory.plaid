/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.symbol;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.ast.parsed.ParsedEmptyExpr;
import plaid.compiler.permissions.UniquePermission;
import plaid.compiler.permissions.ImmutablePermission;
import plaid.compiler.permissions.*;
import plaid.compiler.types.*;
import plaid.compiler.tests.ASTsForTests;

import plaid.collections.makeLinkedList;

state SymbolTestFactory case of TestFactory {
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
    var result = unit; //dummy result variable
    
    val ast = new ASTsForTests;
    ast.initASTs();
   
    val immutable ParsedASTNode dummyAST = new ParsedEmptyExpr; //TODO: testing full symbols will require AST's to be built
    val unique SymbolFactory symFac = new SymbolFactory;
    
    //Top symbol/structure
    val immutable TopSymbol topSym = TOPSYM;
    val immutable TopStructure topStruct = TOPSTRUCT;
    
    //package symbols
    val immutable PackageSymbol packSym1 = symFac.makePackageSymbol("pack1",topSym);
    val immutable PackageSymbol packSym2 = symFac.makePackageSymbol("pack2",topSym);
    val immutable PackageSymbol packSymN = symFac.makePackageSymbol("packN",packSym1);
    
    //package structures
    val immutable PackageStructure packStruct1 = makePackageStructure(topStruct,"pack1");
    val immutable PackageStructure packStruct2 = makePackageStructure(topStruct,"pack2");
    val immutable PackageStructure packStructN = makePackageStructure(packStruct1,"packN");
    
    val immutable StateSymbol stateSym1 = symFac.makeStateSymbol("state1", ast.stateAST1, packSym1);
    val immutable StateSymbol stateSym2 = symFac.makeStateSymbol("state2", ast.stateAST2, packSym1);
    val immutable StateSymbol stateSymNS = symFac.makeStateSymbol("stateNS", dummyAST, stateSym1);
    val immutable StateSymbol stateSymNP = symFac.makeStateSymbol("stateNP", dummyAST, packSymN);
    
    val unique LinkedList QIlist1 = makeLinkedList();
    QIlist1.add(ast.stateID1);
    val unique LinkedList QIlist2 = makeLinkedList();
    QIlist2.add(ast.stateID2);
    
    val immutable ParsedQualifiedIdentifier stateQID1 = new ParsedQualifiedIdentifier { val identifiers = QIlist1; };
    val immutable ParsedQualifiedIdentifier stateQID2 = new ParsedQualifiedIdentifier { val identifiers = QIlist2; };
    
    addSymbolForAST(ast.stateQI1,stateSym1);
    addSymbolForAST(ast.stateQI2,stateSym2);
    
    //Field Symbols
    val immutable FieldSymbol fieldSymP1 = symFac.makeFieldSymbol("field1",ast.fvalAST1u1, packSym1);
    val immutable FieldSymbol fieldSymP1alt = symFac.makeFieldSymbol("field1",ast.fvalAST1s1, packSym1);
    val immutable FieldSymbol fieldSymP2 = symFac.makeFieldSymbol("field2",ast.fvalAST2e2, packSym1);
    val immutable FieldSymbol fieldSymS1 = symFac.makeFieldSymbol("field1",ast.fvalAST1u1, stateSym1);
    val immutable FieldSymbol fieldSymS1alt = symFac.makeFieldSymbol("field1",ast.fvalAST1s1, stateSym1);
    val immutable FieldSymbol fieldSymS2 = symFac.makeFieldSymbol("field2",ast.fvalAST2e2, stateSym1);
    
    addSymbolForAST(ast.fvalAST1u1,fieldSymP1);
    addSymbolForAST(ast.fvalAST1s1,fieldSymP1alt);
    addSymbolForAST(ast.fvalAST2e2,fieldSymP2);
    
    //add fields to states
    stateSym1.addMember(fieldSymS1);
    stateSym1.addMember(fieldSymS2);
    
    //field Signatures for comparison
    val immutable NominalStructure nomStruct1 = makeNominalStructure(stateSym1,packStruct1,ast.stateName1);
    val immutable NominalStructure nomStruct2 = makeNominalStructure(stateSym2,packStruct1,ast.stateName2);
    
    val immutable Type nomType1 = makeType(UNIQUE,nomStruct1);
    val immutable Type nomType1alt = makeType(NONEP,nomStruct1);
    val immutable Type nomType1altshared = makeType(SHARED,nomStruct1);
    val immutable Type nomType2 = makeType(UNIQUE,nomStruct2);
    val immutable Type nomType2alt = makeType(IMMUTABLE,nomStruct2);
    
    val immutable FieldSignature fieldSig1 = makeFieldSignature(false,nomType1,ast.fieldName1);
    val immutable FieldSignature fieldSig1alt = makeFieldSignature(false,nomType1altshared,ast.fieldName1);
    val immutable FieldSignature fieldSig2 = makeFieldSignature(false,nomType2,ast.fieldName2);

    val immutable VariableSymbol argSymbol1 = symFac.makeVariableSymbol(ast.argName1,ast.argID1);
    val immutable VariableSymbol argSymbol2 = symFac.makeVariableSymbol(ast.argName2,ast.argID2);
    addSymbolForAST(ast.argID2, argSymbol2); //test already-generated symbol case of sig generation
    
    val immutable VariableSymbol envSymbol1 = symFac.makeVariableSymbol(ast.envName1,ast.envID1);
    val immutable VariableSymbol envSymbol2 = symFac.makeVariableSymbol(ast.envName2,ast.envID2);
     
    //Method Symbols
    val immutable MethodSymbol methodSymP1 = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1E1u1u12u1u1, packSym1);
    val immutable MethodSymbol methodSymP2 = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1Etu1n11u1u1, packSym1);
    val immutable MethodSymbol methodSymS1 = symFac.makeMethodSymbol(ast.methodName1,ast.methodAST1Ru1A1u1n12u1u1Etu1n1, stateSym1);
    val immutable MethodSymbol methodSymS2 = symFac.makeMethodSymbol(ast.methodName2,ast.methodAST2Ru1A1u1n12u1u1E, stateSym1);
    
    //method signatures for comparison
    val /*unique LinkedList<immutable Pair<immutable VariableSymbol, immutable ArgSpec>>*/
      mArgsSig = makeLinkedList();
    mArgsSig.add(makePair(argSymbol2,makeArgSpec(nomType1,nomType1)));
    mArgsSig.add(makePair(argSymbol1,makeArgSpec(nomType1,nomType1alt)));
    
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigP1 = java.util.HashMap.new();
    envSigP1.put(envSymbol1,makeArgSpec(nomType1,nomType1));
    envSigP1.put(envSymbol2,makeArgSpec(nomType1,nomType1));
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigP2 = java.util.HashMap.new();
    envSigP2.put(envSymbol1,makeArgSpec(nomType1,nomType1));
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigS1 = java.util.HashMap.new();
    val unique Map<immutable VariableSymbol, immutable ArgSpec> envSigS2 = java.util.HashMap.new();
    
    val immutable MethodSignature methodSigP1 = 
      makeMethodSignature(nomType1, ast.methodName1, mArgsSig, 
                          makeArgSpec(VOID,VOID), envSigP1, 
                          makeLinkedList());
    val immutable MethodSignature methodSigP2 = 
      makeMethodSignature(nomType1, ast.methodName2, mArgsSig, 
                          makeArgSpec(nomType1,nomType1alt), envSigP2, 
                          makeLinkedList());
    val immutable MethodSignature methodSigS1 = 
      makeMethodSignature(nomType1, ast.methodName1, mArgsSig, 
                          makeArgSpec(nomType1,nomType1alt), envSigS1, 
                          makeLinkedList());
    val immutable MethodSignature methodSigS2 = 
      makeMethodSignature(nomType1, ast.methodName2, mArgsSig, 
                          makeArgSpec(nomType1,nomType1), envSigS2, 
                          makeLinkedList());
  
    //variable symbol
    val immutable VariableSymbol varSym1 = symFac.makeVariableSymbol("var1",dummyAST);
    val immutable VariableSymbol varSym2 = symFac.makeVariableSymbol("var2",dummyAST);
    
    //this symbol
    val immutable ThisSymbol thisSym1 = symFac.makeThisSymbol(stateSym1,dummyAST);
    val immutable ThisSymbol thisSym2 = symFac.makeThisSymbol(stateSym2,dummyAST);

    /********************** Top Symbol *************************/
    test("Top Symbol equality", fn(ctx) => { 
      ctx.assertTrue(topSym == symFac.makeTopSymbol());
      ctx.assertFalse(topSym == packSym1);
      ctx.assertFalse(topSym == stateSym1);
      ctx.assertFalse(topSym == fieldSymP1);
      ctx.assertFalse(topSym == methodSymP1);
      ctx.assertFalse(topSym == varSym1);
      ctx.assertFalse(topSym == thisSym1);
    }); 
    
    test("Top symbol getStructure", fn(ctx) => {
      ctx.assertTrue(topSym.getStructure() == TOPSTRUCT);
    });
    
    
    /********************** Package Symbols *************************/
    test("Package Symbol equality", fn(ctx) => { 
      ctx.assertTrue(packSym1 == symFac.makePackageSymbol("pack1",topSym));
      ctx.assertFalse(packSym1 == topSym);
      ctx.assertFalse(packSym1 == packSym2);
      ctx.assertFalse(packSym1 == packSymN);
      ctx.assertFalse(packSymN == packSym1);
      ctx.assertFalse(packSym1 == stateSym1);
      ctx.assertFalse(packSym1 == fieldSymP1);
      ctx.assertFalse(packSym1 == methodSymP1);
      ctx.assertFalse(packSym1 == varSym1);
      ctx.assertFalse(packSym1 == thisSym1);
    }); 
    
    test("Package symbol getStructure", fn(ctx) => {
      ctx.assertTrue(packSym1.getStructure() == packStruct1);
      ctx.assertTrue(packSymN.getStructure() == packStructN);
    });
    
    /********************** State Symbols *************************/
    test("State Symbol equality", fn(ctx) => { 
      ctx.assertTrue(stateSym1 == symFac.makeStateSymbol("state1", dummyAST, packSym1));
      ctx.assertFalse(stateSym1 == topSym);
      ctx.assertFalse(stateSym1 == packSym1);
      ctx.assertFalse(stateSym1 == stateSym2);
      ctx.assertFalse(stateSym1 == stateSymNP);
      ctx.assertFalse(stateSym1 == stateSymNS);
      ctx.assertFalse(stateSymNS == stateSym1);
      ctx.assertFalse(stateSym1 == fieldSymP1);
      ctx.assertFalse(stateSym1 == methodSymP1);
      ctx.assertFalse(stateSym1 == varSym1);
      ctx.assertFalse(stateSym1 == thisSym1);
    }); 
    
    test("State Symbol getStructure", fn(ctx) => { 
      ctx.assertTrue(stateSym1.getStructure() == nomStruct1);
    });
    
    test("State Symbol default State Permission", fn(ctx) => { 
      ctx.assertTrue(match(stateSym2.defaultStatePermission()) { case ImmutablePermission { true } default { false } });
      ctx.assertTrue(match(stateSym1.defaultStatePermission()) { case UniquePermission { true } default { false } });
    }); 
    
    test("State Symbol default State Type", fn(ctx) => { 
      ctx.assertTrue(stateSym1.defaultStateType() == makeType(UNIQUE,nomStruct1));
    }); 
    
    test("State Symbol getMember", fn(ctx) => { 
      result = stateSym1.getMember(ast.fieldName1);
      ctx.assertTrue(match(result) { case Some { result.value == fieldSymS1 } case None { false } });
      result = stateSym2.getMember(ast.fieldName1);
      ctx.assertTrue(match(result) { case Some { false } case None { true } });
    });
    
    
    test("State Symbol getSuperStateSymbol", fn(ctx) => {
      ctx.assertTrue(stateSym2.getSuperStateSymbol() == stateSym1);
      ctx.assertTrue(stateSym1.getSuperStateSymbol() == TOPSYM);
    }); 

    test("State Symbol getDimension", fn(ctx) => {
      val dimCmp1 = makeLinkedList();
      dimCmp1.add(TOPSYM);
      dimCmp1.add(stateSym1);
      
      val dimCmp2 = makeLinkedList();
      dimCmp2.add(TOPSYM);
      dimCmp2.add(stateSym1);
      dimCmp2.add(stateSym2);
      
      ctx.assertTrue(stateSym2.getDimension().zipReverse(dimCmp2).reduce(true,fn(acc,symPair) => acc && symPair.fst == symPair.snd));
      ctx.assertTrue(stateSym1.getDimension().zipReverse(dimCmp1).reduce(true,fn(acc,symPair) => acc && symPair.fst == symPair.snd));
    }); 
    
    /********************** Field Symbols *************************/
    test("Field Symbol equality", fn(ctx) => { 
      ctx.assertTrue(fieldSymP1 == symFac.makeFieldSymbol("field1",dummyAST, packSym1));
      ctx.assertFalse(fieldSymP1 == topSym);
      ctx.assertFalse(fieldSymP1 == packSym1);
      ctx.assertFalse(fieldSymP1 == stateSym1);
      ctx.assertFalse(fieldSymP1 == fieldSymP2);
      ctx.assertFalse(fieldSymP1 == fieldSymS1);
      ctx.assertFalse(fieldSymS1 == fieldSymP1);
      ctx.assertFalse(fieldSymS1 == fieldSymP2);
      ctx.assertFalse(fieldSymP1 == methodSymP1);
      ctx.assertFalse(fieldSymP1 == varSym1);
      ctx.assertFalse(fieldSymP1 == thisSym1);
    });
    
    test("Field Symbol getSignature", fn(ctx) => {
      ctx.assertTrue(fieldSymS1.getSignature() == makeFieldSignature(false,makeType(UNIQUE,nomStruct1),ast.fieldName1));
    }); 
    
    /********************** Method Symbols *************************/
    test("Method Symbol equality", fn(ctx) => { 
      ctx.assertTrue(methodSymP1 == symFac.makeMethodSymbol("method1",dummyAST, packSym1));
      ctx.assertFalse(methodSymP1 == topSym);
      ctx.assertFalse(methodSymP1 == packSym1);
      ctx.assertFalse(methodSymP1 == stateSym1);
      ctx.assertFalse(methodSymP1 == fieldSymP1);
      ctx.assertFalse(methodSymP1 == methodSymP2);
      ctx.assertFalse(methodSymP1 == methodSymS1);
      ctx.assertFalse(methodSymS1 == methodSymP1);
      ctx.assertFalse(methodSymS1 == methodSymP2);
      ctx.assertFalse(methodSymP1 == varSym1);
      ctx.assertFalse(methodSymP1 == thisSym1);
    }); 
    
    test("Method Symbol getSignature", fn(ctx) => { 
      ctx.assertTrue(methodSymP1.getSignature() == methodSigP1);
      //java.lang.System.out.println(methodSymP2.getSignature().toString());
      //java.lang.System.out.println(methodSigP2.toString());
      ctx.assertTrue(methodSymP2.getSignature() == methodSigP2);
      //java.lang.System.out.println(methodSymS1.getSignature().toString());
      //java.lang.System.out.println(methodSigS1.toString());
      ctx.assertTrue(methodSymS1.getSignature() == methodSigS1);
      //java.lang.System.out.println(methodSymS2.getSignature().toString());
      //java.lang.System.out.println(methodSigS2.toString());
      ctx.assertTrue(methodSymS2.getSignature() == methodSigS2);
    }); 
    
    /********************** Variable Symbols *************************/
    test("Variable Symbol equality", fn(ctx) => { 
      ctx.assertTrue(varSym1 == symFac.makeVariableSymbol("var1",dummyAST));
      ctx.assertFalse(varSym1 == topSym);
      ctx.assertFalse(varSym1 == packSym1);
      ctx.assertFalse(varSym1 == stateSym1);
      ctx.assertFalse(varSym1 == fieldSymP1);
      ctx.assertFalse(varSym1 == methodSymP1);
      ctx.assertFalse(varSym1 == varSym2);
      ctx.assertFalse(varSym1 == thisSym1);
    });
    
    /********************** This Symbol *************************/
    test("This Symbol equality", fn(ctx) => { 
      ctx.assertTrue(thisSym1 == symFac.makeThisSymbol(stateSym1,dummyAST));
      ctx.assertFalse(thisSym1 == topSym);
      ctx.assertFalse(thisSym1 == packSym1);
      ctx.assertFalse(thisSym1 == stateSym1);
      ctx.assertFalse(thisSym1 == fieldSymP1);
      ctx.assertFalse(thisSym1 == methodSymP1);
      ctx.assertFalse(thisSym1 == varSym1);
      ctx.assertFalse(thisSym1 == thisSym2);
    });
    
    
    tests
  }
  
  
}