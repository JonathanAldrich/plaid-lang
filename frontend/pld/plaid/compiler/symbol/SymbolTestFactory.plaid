/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.symbol;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;

state SymbolTestFactory case of TestFactory {
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
   
    val immutable ParsedASTNode dummyAST = new ParsedEmptyExpr; //TODO: testing full symbols will require AST's to be built
    val unique SymbolFactory symFac = new SymbolFactory;
    
    //Top symbol
    val immutable TopSymbol topSym = symFac.makeTopSymbol();
    
    //package symbols
    val immutable PackageSymbol packSym1 = symFac.makePackageSymbol("pack1",topSym);
    val immutable PackageSymbol packSym2 = symFac.makePackageSymbol("pack2",topSym);
    val immutable PackageSymbol packSymN = symFac.makePackageSymbol("packN",packSym1);
    
    //state Symbols
    val immutable StateSymbol stateSym1 = symFac.makeStateSymbol("state1", dummyAST, packSym1);
    val immutable StateSymbol stateSym2 = symFac.makeStateSymbol("state2", dummyAST, packSym1);
    val immutable StateSymbol stateSymNS = symFac.makeStateSymbol("stateNS", dummyAST, stateSym1);
    val immutable StateSymbol stateSymNP = symFac.makeStateSymbol("stateNP", dummyAST, packSymN);
    
    //Field Symbols
    val immutable FieldSymbol fieldSymP1 = symFac.makeFieldSymbol("field1",dummyAST, packSym1);
    val immutable FieldSymbol fieldSymP2 = symFac.makeFieldSymbol("field2",dummyAST, packSym1);
    val immutable FieldSymbol fieldSymS1 = symFac.makeFieldSymbol("field1",dummyAST, stateSym1);
    val immutable FieldSymbol fieldSymS2 = symFac.makeFieldSymbol("field2",dummyAST, stateSym1);
    
    //Field Symbols
    val immutable MethodSymbol methodSymP1 = symFac.makeMethodSymbol("method1",dummyAST, packSym1);
    val immutable MethodSymbol methodSymP2 = symFac.makeMethodSymbol("method2",dummyAST, packSym1);
    val immutable MethodSymbol methodSymS1 = symFac.makeMethodSymbol("method1",dummyAST, stateSym1);
    val immutable MethodSymbol methodSymS2 = symFac.makeMethodSymbol("method2",dummyAST, stateSym1);
    
    //variable symbol
    val immutable VariableSymbol varSym1 = symFac.makeVariableSymbol("var1",dummyAST);
    val immutable VariableSymbol varSym2 = symFac.makeVariableSymbol("var2",dummyAST);
    
    //this symbol
    val immutable ThisSymbol thisSym1 = symFac.makeThisSymbol(stateSym1,dummyAST);
    val immutable ThisSymbol thisSym2 = symFac.makeThisSymbol(stateSym2,dummyAST);

    /********************** Top Symbol *************************/
    test("Top Symbol equality", fn(ctx) => { 
      ctx.assertTrue(topSym == symFac.makeTopSymbol());
      ctx.assertFalse(topSym == packSym1);
      ctx.assertFalse(topSym == stateSym1);
      ctx.assertFalse(topSym == fieldSymP1);
      ctx.assertFalse(topSym == methodSymP1);
      ctx.assertFalse(topSym == varSym1);
      ctx.assertFalse(topSym == thisSym1);
    }); 
    
    
    /********************** Package Symbols *************************/
    test("Package Symbol equality", fn(ctx) => { 
      ctx.assertTrue(packSym1 == symFac.makePackageSymbol("pack1",topSym));
      ctx.assertFalse(packSym1 == topSym);
      ctx.assertFalse(packSym1 == packSym2);
      ctx.assertFalse(packSym1 == packSymN);
      ctx.assertFalse(packSymN == packSym1);
      ctx.assertFalse(packSym1 == stateSym1);
      ctx.assertFalse(packSym1 == fieldSymP1);
      ctx.assertFalse(packSym1 == methodSymP1);
      ctx.assertFalse(packSym1 == varSym1);
      ctx.assertFalse(packSym1 == thisSym1);
    }); 
    
    /********************** State Symbols *************************/
    test("State Symbol equality", fn(ctx) => { 
      ctx.assertTrue(stateSym1 == symFac.makeStateSymbol("state1", dummyAST, packSym1));
      ctx.assertFalse(stateSym1 == topSym);
      ctx.assertFalse(stateSym1 == packSym1);
      ctx.assertFalse(stateSym1 == stateSym2);
      ctx.assertFalse(stateSym1 == stateSymNP);
      ctx.assertFalse(stateSym1 == stateSymNS);
      ctx.assertFalse(stateSymNS == stateSym1);
      ctx.assertFalse(stateSym1 == fieldSymP1);
      ctx.assertFalse(stateSym1 == methodSymP1);
      ctx.assertFalse(stateSym1 == varSym1);
      ctx.assertFalse(stateSym1 == thisSym1);
    }); 
    
    /********************** Field Symbols *************************/
    test("Field Symbol equality", fn(ctx) => { 
      ctx.assertTrue(fieldSymP1 == symFac.makeFieldSymbol("field1",dummyAST, packSym1));
      ctx.assertFalse(fieldSymP1 == topSym);
      ctx.assertFalse(fieldSymP1 == packSym1);
      ctx.assertFalse(fieldSymP1 == stateSym1);
      ctx.assertFalse(fieldSymP1 == fieldSymP2);
      ctx.assertFalse(fieldSymP1 == fieldSymS1);
      ctx.assertFalse(fieldSymS1 == fieldSymP1);
      ctx.assertFalse(fieldSymS1 == fieldSymP2);
      ctx.assertFalse(fieldSymP1 == methodSymP1);
      ctx.assertFalse(fieldSymP1 == varSym1);
      ctx.assertFalse(fieldSymP1 == thisSym1);
    }); 
    
    /********************** Method Symbols *************************/
    test("Method Symbol equality", fn(ctx) => { 
      ctx.assertTrue(methodSymP1 == symFac.makeMethodSymbol("method1",dummyAST, packSym1));
      ctx.assertFalse(methodSymP1 == topSym);
      ctx.assertFalse(methodSymP1 == packSym1);
      ctx.assertFalse(methodSymP1 == stateSym1);
      ctx.assertFalse(methodSymP1 == fieldSymP1);
      ctx.assertFalse(methodSymP1 == methodSymP2);
      ctx.assertFalse(methodSymP1 == methodSymS1);
      ctx.assertFalse(methodSymS1 == methodSymP1);
      ctx.assertFalse(methodSymS1 == methodSymP2);
      ctx.assertFalse(methodSymP1 == varSym1);
      ctx.assertFalse(methodSymP1 == thisSym1);
    }); 
    
    /********************** Variable Symbols *************************/
    test("Variable Symbol equality", fn(ctx) => { 
      ctx.assertTrue(varSym1 == symFac.makeVariableSymbol("var1",dummyAST));
      ctx.assertFalse(varSym1 == topSym);
      ctx.assertFalse(varSym1 == packSym1);
      ctx.assertFalse(varSym1 == stateSym1);
      ctx.assertFalse(varSym1 == fieldSymP1);
      ctx.assertFalse(varSym1 == methodSymP1);
      ctx.assertFalse(varSym1 == varSym2);
      ctx.assertFalse(varSym1 == thisSym1);
    });
    
    /********************** Variable Symbols *************************/
    test("This Symbol equality", fn(ctx) => { 
      ctx.assertTrue(thisSym1 == symFac.makeThisSymbol(stateSym1,dummyAST));
      ctx.assertFalse(thisSym1 == topSym);
      ctx.assertFalse(thisSym1 == packSym1);
      ctx.assertFalse(thisSym1 == stateSym1);
      ctx.assertFalse(thisSym1 == fieldSymP1);
      ctx.assertFalse(thisSym1 == methodSymP1);
      ctx.assertFalse(thisSym1 == varSym1);
      ctx.assertFalse(thisSym1 == thisSym2);
    });
    
    
    tests
  }
  
  
}