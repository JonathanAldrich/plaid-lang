package plaid.compiler.symbol;

import plaid.compiler.Symbol;
import plaid.ast.parsed.ASTNode;

import plaid.collections.makeLinkedList;

state MethodSymbol case of DeclSymbol {
    immutable ASTNode declaration;
    val immutable Symbol owner;
    val immutable Option<immutable MethodSignature> methodSignature = NONE;

    override method immutable Boolean ==(immutable Symbol other)[immutable MethodSymbol this] {
        match (other) {
            case MethodSymbol { this.name.equals(other.name) && this.owner == other.owner }
            default { false }
        }
    }

    method immutable MethodType getSignature() {
        match (this.methodType)  {
            case Some {
                this.methodType.value
            }
            case None {
                val returnType     = makeTypeFromAST(this.declaration.returnType);
                val staticArgsSpec = makeLinkedList();
                val arguments      = makeLinkedList();
                val environment    = makeLinkedList();

                // translate static args
                this.declaration.staticArgsSpec.map(fn (arg) => {
                    // TODO: fixme
                });

                // translate arguments 
                this.declaration.arguments.map(fn (arg) => {
                    val preType  = makeTypeFromAST(arg.argSpec.preType);
                    val postType = makeTypeFromAST(arg.argSpec.postType);
                    arguments.add(
                        new ChangeType {
                            val preType  = preType;
                            val postType = postType;
                            val name     = arg.name.name;
                        }
                    );
                });

                // translate environment 
                this.declaration.environment.map(fn (arg) => {
                    val preType  = makeTypeFromAST(arg.argSpec.preType);
                    val postType = makeTypeFromAST(arg.argSpec.postType);
                    environment.add(
                        new ChangeType {
                            val preType  = preType;
                            val postType = postType;
                            val name     = arg.name.name;
                        }
                    );
                    
                });

                this.methodType = makeSome( new MethodSignature {
                    val returnType     = returnType;
                    val name           = this.declaration.name.name;
                    val staticArgsSpec = staticArgsSpec;
                    val environment    = environment;
                });
            }
        }
    }
}