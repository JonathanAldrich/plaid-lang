package plaid.compiler.symbol;

state SymbolFactory {
    method shared VariableSymbol makeVariableSymbol(immutable String name, 
                                                    immutable ASTNode decl) {
        new VariableSymbol{name = name; var declaration = decl;};
    }

    method shared FieldSymbol makeFieldSymbol(immutable String name, 
                                              immutable ASTNode decl,
                                              shared Symbol owner) {
        new FieldSymbol{name = name; var declaration = decl; owner = owner;};
    }

    method shared XMLFieldSymbol makeXMLFieldSymbol(immutable String name, 
                                                 immutable ASTNode decl,
                                                 shared Symbol owner,
                                                 shared LinkedList path) {
        new XMLFieldSymbol{name = name; var declaration = decl; owner = owner; path = path;};
    }
    
    method shared DatagroupSymbol makeDatagroupSymbol(immutable String name, 
                                                      immutable ASTNode decl,
                                                      shared Symbol owner) {
        new DatagroupSymbol{name = name; var declaration = decl; owner = owner;};
    }
    
    method shared StaticParameterSymbol makeStaticParameterSymbol(immutable String name, 
                                                                  immutable ASTNode decl) {
        new StaticParameterSymbol{name = name; val declaration = decl;};
    }
    
    method shared MethodSymbol makeMethodSymbol (immutable String name, 
                                                 immutable ASTNode decl,
                                                 owner) {
        new MethodSymbol{name = name; var declaration = decl; owner = owner;};
    } 

    method shared LambdaSymbol makeLambdaTypeSymbol (immutable ASTNode decl) {
        new LambdaTypeSymbol{name = "<ANONYMOUS Lambda Type>"; declaration = decl; };
    } 


    method shared StateSymbol makeStateSymbol(immutable String name, 
                                              immutable ASTNode decl,
                                              shared Symbol owner) {
        new StateSymbol{name = name; var declaration = decl; owner = owner;};
    }

    method shared StateRefSymbol makeStateRefSymbol(immutable ASTNode decl,
                                                    shared StateSymbol referencedState) {
        new StateRefSymbol{name = referencedState.name + "<specialized>"; declaration = decl; referencedState = referencedState; };
    }

    method shared JavaClassSymbol makeJavaClassSymbol(immutable String name, 
                                                  shared Class clazz,
                                                  shared Symbol owner) {
        new JavaClassSymbol{name = name; clazz = clazz; owner = owner;};
    }
    
    method shared JavaStaticFieldSymbol makeJavaStaticFieldSymbol(immutable String name, 
                                                  				  shared Symbol owner) {
     
    	new JavaStaticFieldSymbol{ name = name; owner = owner; };
	}

    method shared JavaStaticMethodSymbol makeJavaStaticMethodSymbol(immutable String name, 
                                                  				  shared Symbol owner) {
     
    	new JavaStaticMethodSymbol{ name = name; owner = owner; };
	}
	
	method shared JavaConstrutorSymbol makeJavaConstructorSymbol(immutable String name, 
                                                  				  shared Symbol owner) {
     
    	new JavaConstructorSymbol{ name = name; owner = owner; };
	}
    
    method shared StateValSymbol makeStateValSymbol(immutable String name, 
                                              immutable ASTNode decl) {
        new StateValSymbol{name = name; val declaration = decl;};
    }
    
    method shared PackageSymbol makePackageSymbol(immutable String name, 
                                                  shared Symbol owner) {
        new PackageSymbol{name = name; owner = owner;};
    }
    
    method shared TopSymbol makeTopSymbol() {
        new TopSymbol;
    }

    method shared DynamicSymbol makeDynamicSymbol() {
        new DyanmicSymbol;
    }
    
}

