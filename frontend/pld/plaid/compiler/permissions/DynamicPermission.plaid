package plaid.compiler.permissions;

import plaid.compiler.Permission;
import plaid.compiler.*;

/**
 *  Dynamic Permission
 */
state DynamicPermission case of SourcePermission {
  
  //dynamic permission gives write access
  method immutable Boolean isWritable()[immutable DynamicPermission this] { true }
  
  //dynamic permission does not guarantee the state
  method immutable Boolean guaranteesState()[immutable DynamicPermission this] { false }
  
  method immutable Boolean ==(immutable Permission p2)[immutable DynamicPermission this] {
    match(p2) {
      case DynamicPermission { true }
      default { false }
    };
  }
  
  method immutable String toString()[immutable UniquePermission >> void] {
    "dynamic"
  }

  
  method unique Option<immutable Permission> 
      splitPerm(immutable Permission >> void p2)
           [immutable UniquePermission >> void] 
  {
    ABORT("Dynamic splitting not implemented");
  }
  
  
  method unique Option<immutable Permission>
      returnPerm(immutable Permission p2)
        [immutable DynamicPermission this] 
  {
    ABORT("Dynamic splitting not implemented");
  }
  
  override method immutable Boolean isSubPermOf(immutable Permission p2)[immutable DynamicPermission this] {
    false;
  } 
  
  override method immutable Permission leastUpperBound(immutable SourcePermission p2)[immutable UniquePermission >> void] {
    this
  }
 
}