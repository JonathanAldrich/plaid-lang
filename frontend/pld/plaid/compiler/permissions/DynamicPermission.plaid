package plaid.compiler.permissions;

import plaid.compiler.Permission;
import plaid.compiler.*;

/**
 *  Dynamic Permission
 */
state DynamicPermission case of SourcePermission {
  
  //dynamic permission gives write access
  method immutable Boolean isWritable()[immutable DynamicPermission this] { true }
  
  //dynamic permission does not guarantee the state
  method immutable Boolean guaranteesState()[immutable DynamicPermission this] { false }
  
  method immutable Boolean ==(immutable Permission p2)[immutable DynamicPermission this] {
    match(p2) {
      case DynamicPermission { true }
      default { false }
    };
  }
  
  method immutable String toString()[immutable DynamicPermission this] {
    "dynamic"
  }

  /**
   *  can only split dynamic from dynamic
   */
  method unique Option<immutable Permission> 
      splitPerm(immutable Permission >> void p2)
           [immutable DynamicPermission >> void] 
  {
    match (p2) {
      case DynamicPermission { makeSome(DYNAMICP) }
      default { new None }
    }
  }
  
  /**
   *  can only return dynamic to dynamic
   */  
  //method unique Option<immutable Permission>
  method immutable Permission
      returnPerm(immutable Permission p2)
        [immutable DynamicPermission this] 
  {
    match (p2) {
      case DynamicPermission { this }
      default { this.incompatibleReturnError(p2) }
      //case DynamicPermission { makeSome(DYNAMICP) }
      //default { new None }
    }
  }
}