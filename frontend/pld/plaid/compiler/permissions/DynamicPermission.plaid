package plaid.compiler.permissions;

import plaid.compiler.Permission;
import plaid.compiler.*;

/**
 *  Dynamic Permission
 */
state DynamicPermission case of SourcePermission {
  
  /**
   * dynamic permission gives write access to fields
   */
  method immutable Boolean isWritable() { true }
  
  /**
   * dynamic permission does not guarantee the state
   */ 
  method immutable Boolean guaranteesState() { false }
  
  method immutable Boolean ==(immutable Permission p2) {
    match(p2) {
      case DynamicPermission { true }
      default { false }
    };
  }
  
  method immutable String toString() { "dynamic" }

  /**
   *  can only split dynamic from dynamic
   */
  method immutable ?Permission splitPerm(immutable Permission p2) {
    match (p2) {
      case DynamicPermission { DYNAMICP }
      default { unit }
    }
  }
  
  /**
   *  can only return dynamic to dynamic
   */  
  method immutable Permission returnPerm(immutable Permission p2)
                                        [immutable DynamicPermission this] 
  {
    match (p2) {
      case DynamicPermission { this }
      default { this.incompatibleReturnError(p2) }
    }
  }
}