package plaid.compiler.permissions;

import plaid.compiler.AP;

/**
 *	Local permissions cannot be written into the heap
 *  and will be returned to their original source when
 * 	they leave scope.  The underlying permission must
 *	be symmetric.  
 *
 *	a local permission may have been split in which case
 *  we also keep track of its original permission prior
 * 	to the split and how many times it has been split
 * 	to allow the original permission to be regained
 *	when all splits have been rejoined.
 */
state LocalPermission case of AP {
	val immutable SymmetricPerm thePerm;
	
	method toString() {
		"Local(" + this.thePerm.toString() + ")"
	}
	
	method ==(other) {
		match (other) {
			case SplitLocalPerm { false }
			case LocalPermission {
				this.thePerm == other.thePerm
			}
			default { false }
		}
	}
}