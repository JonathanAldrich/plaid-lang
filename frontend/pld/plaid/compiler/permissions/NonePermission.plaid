package plaid.compiler.permissions;

import plaid.compiler.Permission;

/**
 *	None permission
 */
state NonePermission case of SystemPermission {
	
	/** 
	 * none provides no write abilities
	 */
	method immutable Boolean isWritable()[immutable NonePermission >> void] { false }

	/**
	 * none does not guarantee the state of the object
	 */
	method immutable Boolean guaranteesState()[immutable NonePermission >> void] { false }
	
	method immutable Boolean ==(immutable Permission >> void p2)[immutable NonePermission >> void] {
		match(p2) {
			case NonePermission { true }
			default { false }
		};
	}
	
	method immutable String toString()[immutable NonePermission this] {
		"none"
	}

	/**
	 * There are no permissions that can be split from none, except none
	 */
	method unique Option<immutable Permission> splitPerm(immutable Permission p2)
												[immutable NonePermission this] 
	{
		ifElse ( p2 == NONEP)
			{ makeSome(NONEP) }
			{ new None }
	}
	
	/**
	 * returning anything to none results in the permission that was returned
	 */
	//method unique Option<immutable Permission> returnPerm(immutable Permission p2)
  method immutable Permission returnPerm(immutable Permission p2)
												 [immutable NonePermission this] {
		match (p2) {
			case SourcePermission { p2 }
      case NonePermission { this }
      default { this.incompatibleReturnError(p2) } //BorrowedPermissions cannot be returned - error
			/*case SourcePermission { makeSome(p2); }
			case NonePermission { makeSome(this) }
			default { new None } //BorrowedPermissions cannot be returned - error
		  */
		}
		
		
	}
	
/* NO LUB/GLB for NONE */	
	//upper bound will always be the other permission
	/*method immutable Permission leastUpperBound(immutable Permission >>void p2)[immutable NonePermission >> void] {
		match (p2) {
			case UniquePermission { UNIQUE }
			case ImmutablePermission { IMMUTABLE }
			case SharedPermission { SHARED }
			case LocalPermission { p2 }
			case NonePermission { NONEP }
			default { UNIQUE; }  //error - not a permission, default to UNIQUE - KBN error handling?

			//unused cases
			//case DynPermission { DYNP }
			//case FullPermission { FULL }
			//case PurePermission { PURE }
		}
	}*/
	
	//lower bound will always be None (or Dyn)
	/*method immutable Permission greatestLowerBound(immutable Permission p2)[immutable NonePermission] {
		match (p2) {
			case UniquePermission { NONEP }
			case ImmutablePermission { NONEP }
			case SharedPermission { NONEP }
			case LocalPermission { NONEP }
			case NonePermission { NONEP }
			default { NONEP } //error - not a permission, default to NONEP - KBN error handling? 
			
			//unused cases
			//case DynPermission { DYNP }
			//case FullPermission { NONEP }
			//case PurePermission { NONEP }
		}	
	}*/
}