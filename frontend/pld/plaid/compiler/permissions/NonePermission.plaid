package plaid.compiler.permissions;

import plaid.compiler.Permission;

/**
 *	None permission
 */
state NonePermission case of SystemPermission {
	
	/** 
	 * none provides no write abilities
	 */
	method immutable Boolean isWritable() { false }

	/**
	 * none does not guarantee the state of the object
	 */
	method immutable Boolean guaranteesState() { false }
	
	method immutable Boolean ==(immutable Permission p2) {
		match(p2) {
			case NonePermission { true }
			default { false }
		};
	}
	
	method immutable String toString() {"none" }

	/**
	 * There are no permissions that can be split from none, except none
	 */
	method immutable ?Permission splitPerm(immutable Permission p2) {
		ifElse ( p2 == NONEP)
			{ NONEP }
			{ unit }
	}
	
	/**
	 * returning anything to none results in the permission that was returned
	 */
  method immutable ?Permission returnPerm(immutable Permission p2)
                                    [immutable NonePermission this] {
		match (p2) {
			case DynamicPermission { 
				this.incompatibleReturnError(p2); //BorrowedPermissions cannot be returned - error
      			unit
			}
			case SourcePermission { p2 }
      		case NonePermission { this }
      		default { 
      			this.incompatibleReturnError(p2); //BorrowedPermissions cannot be returned - error
      			unit
      		}
		}
	}
}