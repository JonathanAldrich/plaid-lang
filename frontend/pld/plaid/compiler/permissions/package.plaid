/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.permissions;

import plaid.compiler.ABORT;

// ***** GLOBALS ***** //
val immutable Permission UNIQUE = new UniquePermission;
val immutable Permission IMM = new ImmutablePermission;
val immutable Permission IMMUTABLE = new ImmutablePermission;  //So I can have both fully spelled and not...
val immutable Permission SHARED = new SharedPermission;
val immutable Permission NONEP = new NonePermission;
val immutable Permission LOCALIMM = makeLocal(IMM);
val immutable Permission LOCALIMMUTABLE = makeLocal(IMM);
val immutable Permission LOCALSHARED = makeLocal(SHARED);
val immutable Permission DYNP = new DynamicPermission;
val immutable Permission DYNAMICP = new DynamicPermission;

// ***** FACTORY METHODS ***** //
val makeShared = fn (unique LinkedList datagroup) => {
    new SharedPermission { override var unique LinkedList datagroup = datagroup; }
};

val makeLocal = fn (immutable SymmetricPermission thePerm) => {
	match ( thePerm ) {
	    case SharedPermission { 
            new LocalPermission {
                val immutable SymmetricPermission thePerm = thePerm;
            }
        }
	    case ImmutablePermission { 
            new LocalPermission {
                val immutable SymmetricPermission thePerm = thePerm;
            }
        }
        default { 
            ABORT("(implementation error) creating a borrowed permission with a " +
	            "non-symmetric permission '" + thePerm.toString() + "'") 
        }
	};
};

val makeBorrowedPerm = fn (immutable SymmetricPermission thePerm,
						 immutable Permission originalPerm,
						 immutable Integer splitCount) =>
{
	match (thePerm) {
	    case ImmutablePermission {
            new BorrowedPermission {
                val immutable SymmetricPermission thePerm = thePerm;
                val immutable Permission originalPerm = originalPerm;
                val immutable Integer splitCount = splitCount;
            }
        }
        case SharedPermission {
            new BorrowedPermission {
                val immutable SymmetricPermission thePerm = thePerm;
                val immutable Permission originalPerm = originalPerm;
                val immutable Integer splitCount = splitCount;
            }        
        }
        default {
            ABORT("(implementation error) creating a borrowed permission with a " +
                  "non-symmetric permission '" + thePerm.toString() + "'")         
        }
    };					 
};