package plaid.compiler.permissions;

method immutable ?Permission splitFieldPermission(immutable Permission receiverPerm, 
                                                 immutable Permission fieldPerm, 
                                                 immutable Permission neededPerm)
{
  val immutable ?Permission splitFromField = fieldPerm.splitPerm(neededPerm);
  
  match (splitFromField) {
  	case Permission {
	  match (splitFromField == fieldPerm) {
		case True {
		  match (receiverPerm) { //can pull anything that doesn't change field as long as receiver permission is not NONE or DYNAMIC
			case NonePermission { unit }
			case DynamicPermission { unit } 
			default { fieldPerm } 
		  }
		}
		case False {
		  match (receiverPerm) {
			case UniquePermission { splitFromField } //unique receivers can give up anything
			case LocalPermission {
			  match (receiverPerm == neededPerm) {
				case True { splitFromField }
				case False { unit }
			  }
			}
			case BorrowedPermission {
			  match (neededPerm) {
				case LocalPermission {
				  match (receiverPerm.thePerm == neededPerm.thePerm) {
					case True { splitFromField }
					case False { unit }
				  }
				}
				default { unit }
			  }
			}
			case SymmetricPermission{   //if a (local) symmetric of the same kind as the 
			  match (fieldPerm) {  //receiver, this is ok
				case UniquePermission {
				  match (neededPerm) {
					case SymmetricPermission{
					  ifElse (neededPerm == receiverPerm)
						{ UNIQUE }
						{ unit }
					}
					case LocalPermission {
					  ifElse (neededPerm.thePerm == receiverPerm)
						{ UNIQUE }
						{ unit }
					}
					default { unit }
				  }
				}
				default { unit }
			  }
			}
			default { unit }
		  }
		}
	  }
	}
    default { unit }  //split failed
  }
}