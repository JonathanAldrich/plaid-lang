package plaid.compiler.permissions;

import plaid.compiler.AP;

/**
 *	Local permissions cannot be written into the heap
 *  and will be returned to their original source when
 * 	they leave scope.  The underlying permission must
 *	be symmetric.  
 *
 *	a local permission may have been split in which case
 *  we also keep track of its original permission prior
 * 	to the split and how many times it has been split
 * 	to allow the original permission to be regained
 *	when all splits have been rejoined.
 */
state SplitLocalPerm case of LocalPermission {
	val immutable Permission originalPerm;
	val immutable Integer splitCount;
	
	override method toString() {
		"Borrow(Local(" + this.thePerm.toString() + "), " 
		+ this.originalPerm.toString() + ", " + this.splitCount + ")"
	}
	
	override method ==(other) {
		match (other) {
			case SplitLocalPerm { 
				this.thePerm == other.thePerm &&
				this.originalPerm == other.originalPerm &&
				this.splitCount == other.splitCount
			}
			default { false }
		}
	}
}

