/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package plaid.compiler.permissions;

import plaid.compiler.Permission;

/**
 * Source permissions include base permissions actually written in the source:
 *  	unique, immutable, shared(, full, pure)
 *  They also include local permissions which are expressible through change types
 * 	and will also be inferred at certain points
 *  	local immutable, local shared(, local pure)
 *
 *	This is what the lattice looks like based on current and (future) permissions
 *
 *					unique
 *					  |
 *					(full)
 *				   / 	  \
 *			immutable       shared
 *				|			   |
 *		local immutable    local shared
 *				   \ 	   /
 *					 (pure)
 */

state SourcePermission case of Permission {

	/**
	 *  Source permissions form a join-bounded lattice, so we
	 *  will always have an expressible least upper bound
	 */
	method immutable SourcePermission leastUpperBound(immutable SourcePermission p2)
													 [immutable SourcePermission];
													 											 
	/**
	 *  No current use and not a meet-bounded lattice currently
	 *  would have to include none (?) or pure (better)
	 */
//	method immutable SourcePermission greatestLowerBound(immutable SourcePermission p2)
//													    [immutable SourcePermission];
	
}