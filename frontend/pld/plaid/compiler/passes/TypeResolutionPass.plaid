package plaid.compiler.passes;

import plaid.ast.parsed.LeafVisitor;

import plaid.compiler.ERROR;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.Pass;


state TypeResolutionPass case of Pass = LeafVisitor with  {
    var immutable Source sourceFile;
    var shared Reporter reporter;
    var shared Map map;

    method immutable Boolean run(unique Job job, unique Reporter reporter) {
        match (job.ast) {
            case Some {
                DEBUG(DEBUG_PRIO_HIGH, "<TypeResolutionPass> started");
                this.sourceFile = job.source.getPath();
                this.reporter = reporter;
                this.map = job.symbolMap;

                job.ast.value.accept(this);

                DEBUG(DEBUG_PRIO_HIGH, "<TypeResolutionPass> finished");
                true
            }
            default { 
                ERROR("<TypeResolutionPass> AST invalid");
                false 
            }
        }
    }

    
    method shared Symbol resolveDerefence(immutable Dereference dref)  {
        
    }


    override method void visitDereference(immutable Dereference node) {
        //DEBUG(DEBUG_PRIO_MEDIUM, " found dereference.");
    }
}
