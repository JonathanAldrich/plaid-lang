package plaid.compiler.passes;

import plaid.compiler.Pass;
import plaid.compiler.Reporter;
import plaid.compiler.AEMINIUM_MODE;
import plaid.compiler.JAVASCRIPT_MODE;
import plaid.compiler.codegen.makeSequentialCodeGenOps;
import plaid.compiler.codegen.makeJavascriptCodeGenOps;
import plaid.compiler.aeminium.makeAEminiumCodeGenOps;
import plaid.ast.parsed.*;


state CodeGenPass case of Pass {
    var immutable String titlePrefix = "";

    method immutable Boolean run(unique Job job) {
        match (job.ast) {
            case Some {
                DEBUG(DEBUG_PRIO_HIGH, "<CodeGenPass> started for file " + job.source.path);
                val ops = ifElse ( AEMINIUM_MODE() ) {
                    makeAEminiumCodeGenOps();
                }{
                    ifElse (JAVASCRIPT_MODE() ) {
                        makeJavascriptCodeGenOps();
                    }{
                        makeSequentialCodeGenOps();
                    }
                };
                ops.codegenCU(ops, job, job.ast.value);
                DEBUG(DEBUG_PRIO_HIGH, "<CodeGenPass> finished for file " + job.source.path);
                true
            }
            default { false }
        }
    }
}