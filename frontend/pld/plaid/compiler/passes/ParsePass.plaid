package plaid.compiler.passes;

import plaid.ast.parsed.*;
import plaid.ast.translator.ASTTranslator;
import plaid.ast.util.makeTokenFromJavaToken;
import plaid.parser.PlaidCoreParser;
import plaid.parser.Parser;
import plaid.compiler.Pass;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_HIGH;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.DEBUG_PRIO_LOW;
import plaid.compiler.ERROR;
import plaid.compiler.Reporter;

import java.io.File;
import java.io.FileInputStream;

state ParsePass case of Pass {
    method immutable Boolean run(unique SourceJob job, unique Reporter reporter) {
        // parse source file 
        val file     = java.io.File.new(job.source.getPath());
        val inStream = java.io.FileInputStream.new(file);
        val parser   = Parser.new(inStream, 4);
        
        DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> started");
        DEBUG(DEBUG_PRIO_HIGH, "parse file '" + job.source.getPath() + "'");

        match (parser.hasCompilationUnit()) {
            case True {
                DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> parse Java AST start");
                val javaAST  = parser.getCompilationUnit();
                                
                // translate from Java -> Plaid AST
                DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> translate Java AST => Plaid AST start");
                val translator = new ASTTranslator;
                job.ast = makeSome(translator.translateAST(javaAST));

                DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> finished");               
                true 
            }
            default { 
                ERROR("Failed to parse file '" + job.source.getPath()+"'");
                ERROR("==>  " + parser.getParseErrorMessage() );
                val token = makeTokenFromJavaToken(parser.getToken());
                reporter.errorToken(file, token, "Parse error.");
                false 
            }
        }
    }
}