package plaid.compiler.passes;

import plaid.ast.parsed.*;
import plaid.ast.translator.ASTTranslator;
import plaid.parser.PlaidCoreParser;
import plaid.parser.Parser;
import plaid.compiler.Pass;

import java.io.File;
import java.io.FileInputStream;

state ParsePass case of Pass {
    method immutable Boolean run(unique SourceJob job) {
        // parse source file 
        val file     = java.io.File.new(job.source.getPath());
        val inStream = java.io.FileInputStream.new(file);
        val parser   = Parser.new(inStream);
        
        match (parser.hasCompilationUnit()) {
            case True {
                val javaAST  = parser.getCompilationUnit();
                
                // translate from Java -> Plaid AST
                val translator = new ASTTranslator;
                job.ast = createSome(translator.translateAST(javaAST));
                
                true 
            }
            default { false }
        }
    }
}