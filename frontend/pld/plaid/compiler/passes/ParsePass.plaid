package plaid.compiler.passes;

import plaid.ast.parsed.*;
import plaid.ast.translator.ASTTranslator;
import plaid.ast.util.makeTokenFromJavaToken;
import plaid.parser.PlaidCoreParser;
import plaid.parser.Parser;
import plaid.compiler.Pass;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_HIGH;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.DEBUG_PRIO_LOW;
import plaid.compiler.ERROR;
import plaid.compiler.Reporter;

import java.io.File;
import java.io.FileInputStream;

state ParsePass case of Pass {
    method immutable Boolean run(unique SourceJob job) {
        // parse source file 
        val inStream = job.source.stream;
        val parser   = Parser.new(inStream, 4);
        
        DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> started");
        DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> parse file '" + job.source.path + "'");

        match (parser.hasCompilationUnit()) {
            case True {
                DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> parse Java AST start");
                val javaAST  = parser.getCompilationUnit();
                                
                // translate from Java -> Plaid AST
                DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> translate Java AST => Plaid AST start");
                val translator = new ASTTranslator ; //with { override method void LOG(immutable String msg) { DEBUG(DEBUG_PRIO_LOW, "<ParsePass> " + msg)} };
                val fileName = job.source.path;
                job.ast = makeSome(translator.translateAST(javaAST,fileName.substring(fileName.lastIndexOf("/")+1)));

                match (job.ast) {
                     case Some {
                         job.resolver.addCompilationUnit(job.ast.value, job.source.path);
                         DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> finished");
                         true
                     }
                     case None {
                         ERROR("<ParsePass> Failed to translate Java AST to Plaid AST.");
                         DEBUG(DEBUG_PRIO_HIGH, "<ParsePass> finished");               
                         false
                     }
                };
            }
            default { 
                ERROR("Failed to parse file '" + job.source.path+"'");
                ERROR("==>  " + parser.getParseErrorMessage() );
                val token = makeTokenFromJavaToken(parser.getToken());
                job.addError(token, "Parse error: " + parser.getParseErrorMessage());
                ABORT_WITH_JOB(job);
                false 
            }
        }
    }
}