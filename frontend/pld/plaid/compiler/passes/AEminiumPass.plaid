package plaid.compiler.passes;

import plaid.ast.parsed.ParsedLeafVisitor;
import plaid.ast.util.makeStringFromQualifiedIdentifier;

import plaid.compiler.ERROR;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_MEDIUM;
import plaid.compiler.Pass;

import plaid.compiler.*;
import plaid.compiler.typechecker.*;
import plaid.compiler.aeminium.*;
import plaid.compiler.permissions.*;

state AEminiumPass case of Pass = ParsedLeafVisitor with {
    var hasErrors = false;
    
    method immutable Boolean run(unique Job job) {
        match (job) {
          case UserJob {
              match (job.ast) {
                  case Some {
                    ifElse ( AEMINIUM_MODE()  ) {
                        DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> started");
                    
                        job.ast.value.accept(this);
                
                        DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> finished");
                        !this.hasErrors;
                    }{
                        true
                    }
                  }
                  default {
                      ERROR("<AEminiumPass> AST invalid");
                      false
                  }
              }
          }
          case CompilerJob {
              DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> skip CompilerJob");
              true
          }
        }
    }
    
    override method void LOG(immutable String msg) {
        //DEBUG(DEBUG_PRIO_LOW, "<AEminiumPass> " + msg);
    }
    
    override method void visitParsedConcreteMethodDecl(immutable ParsedConcreteMethodDecl node) {
        DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumPass> found Method Declaration '" + node.name.name + "'");
        
        ifElse ( typecheckingEnabled(node) ) {         
            // get dependency information for 
            val unique DependencyInformationCollector dic = new DependencyInformationCollector;
            node.accept(dic);
            val unique Set infos = dic.getNodes();
            DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumPass>     found " + infos.size() + " dependency information nodes");
            
            val unique LinkedList ops = makeLinkedList();
            ops.addLast( fn (depInfos) => {
                 val result = removeJoinJoin(depInfos);
                 dumpGraph(node, "PRE-JOIN-JOIN");
                 result
            });
            ops.addLast( fn (depInfos) => {
                 val result = removeSplitSplit(depInfos);
                 dumpGraph(node, "PRE-SPLIT-SPLIT");
                 result
            });
            ops.addLast( fn (depInfos) => {
                 val result = removeNonsenseJoinSplit(depInfos);
                 dumpGraph(node, "JOIN-SPLIT");
                 result
            });  
            ops.addLast( fn (depInfos) => {
                 val result = removeJoinJoin(depInfos);
                 dumpGraph(node, "POST-JOIN-JOIN");
                 result
            });
            ops.addLast( fn (depInfos) => {
                 val result = removeSplitSplit(depInfos);
                 dumpGraph(node, "POST-SPLIT-SPLIT");
                 result
            });        
            
            // execute ops
            var unique Set nodes = infos; 
            ops.do( fn (op) => {
                nodes = op(nodes);
            });
        }{
            DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> SKIP method " + node.name.name);
        }
    }
    
    /***********************************************************************
     **                   optimization functions                          **
     ***********************************************************************/
    
    
    method void removeDependencyInformation(shared DependencyInformation depInfo)  {
        DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> REMOVE " + depInfo.toString() );
        
        // remove node from dependents 
        val rdepsIt = depInfo.rdeps.iterator();
        while { rdepsIt.hasNext() }{
            val shared DepenendencyInformation rdep = rdepsIt.next();
            
            // remove depInfo from rdep
            rdep.deps.remove(depInfo);
            
            // connect to deps of DepInfo
            val depsIt = depInfo.deps.iterator();
            while { depsIt.hasNext() }{
                val shared DependencyInformation dep = depsIt.next();
                
                // remove depInfo from dep
                dep.rdeps.remove(depInfo);
                
                // add connection between rdep -> dep
                addDependency(rdep, dep);
            }
        }
    }
 
    method shared JoinInformation findNextJoin(shared SplitInformation splitInfo) {
        val joins = getJoinInformation(splitInfo.rdeps);
        ifElse ( joins.size() > 0 ) {
            if ( joins.size() != 1 ) { ABORT("<AEminiumPass> found too many joins.") };
            joins.iterator().next()
        }{
            val splits = getSplitInformation(splitInfo.rdeps);
            ifElse ( splits.size() > 0 ) {
                if ( splits.size() != 1 ) { ABORT("<AEminiumPass> found too many splits.") };
                findNextJoin(splits.iterator().next());
            }{
                ABORT("<AEminiumPass> couldn't find split information to continue");
            }
        }
    }
 
 
    method shared SplitInformation findPreviousSplit(shared DependencyInformation depInfo, shared Symbol symbol) {
        val splits = getSplitInformation(depInfo.deps);
        ifElse ( splits.size() > 0 ) {
            if ( splits.size() != 1 ) { ABORT("<AEminiumPass> found too many splits.") };
            val previousSplit = splits.iterator().next();
            if ( !(previousSplit.symbol == symbol) ) { ABORT("<AEminiumPass> split does not match") };
            previousSplit
        }{
            val it = depInfo.deps.iterator();
            var result = new None;
            while { it.hasNext() }{
                val next = it.next();
                match (next) {
                    case SplitInformation {
                        if ( next.symbol == symbol ) {
                            result = makeSome(depinfo);
                        }
                    }
                    default {
                        result = makeSome(findPreviousSplit(next, symbol));
                    }
                }
            };
            match (result) {
                case Some { result.value }
                case None { ABORT("<AEminiumPass> cannot find previous split ")}
            }
        }
    } 
 
    method void fixNonsenseJoinSplit(shared JoinInformation upperJoin,
                                     shared SplitInformation splitInfo,
                                     shared JoinInformation lowerJoin) {
        DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumPass> fixNonsenseJoinSplit");
        DEBUG(DEBUG_PRIO_MEDIUM, "               upperJoin = "+ upperJoin.toString());
        DEBUG(DEBUG_PRIO_MEDIUM, "               splitInfo = "+ splitInfo.toString());
        DEBUG(DEBUG_PRIO_MEDIUM, "               lowerJoin = "+ lowerJoin.toString());

        // make dependencie of upper join dependencies of lower join 
        val depsIt = upperJoin.deps.iterator();
        while { depsIt.hasNext() }{
            val depNext = depsIt.next();
            depNext.rdeps.remove(upperJoin);
            addDependency(lowerJoin, depNext);
        };
        
        // make make items that dependend on split depend on next higher split 
        val previousSplit = findPreviousSplit(upperJoin, upperJoin.symbol);
        DEBUG(DEBUG_PRIO_MEDIUM, "<AEminiumPasss> found previous split " + previousSplit );
        val splitsIt = splitInfo.rdeps.iterator();
        while {splitsIt.hasNext()}{
            val splitNext = splitsIt.next();
            splitNext.deps.remove(splitInfo);
            
            addDependency(splitNext, previousSplit);
        }
    }
                                     
 
    method unique Set removeNonsenseJoinSplit(unique Set infos) {
        DEBUG(DEBUG_PRIO_LOW, "<AEminiumPass> removeNonsenseJoinSplit");
        val unique Set result = java.util.HashSet.new();
        
        val it = infos.iterator();
        while { it.hasNext() }{
            val shared DependencyInformation depInfo = it.next();
            
            match (depInfo) {
                case SplitInformation {                    
                    ifElse ( depInfo.deps.size() == 1 ) {
                        val shared DependencyInformation upperJoin = depInfo.deps.iterator().next();
                        match (upperJoin) {
                            case JoinInformation {
                                if ( depInfo.permOut == upperJoin.permIn ) {
                                   DEBUG(DEBUG_PRIO_HIGH, "<AEminiumMode> Found nonsense join/split");
                                   val splitInfo = depInfo; 
                                   val lowerJoin = findNextJoin(splitInfo);
                                   fixNonsenseJoinSplit(upperJoin, splitInfo, lowerJoin);
                               }
                            }
                            default { result.add(depInfo) }
                        }
                    }{
                        result.add(depInfo);
                    }                
                }
                default { result.add(depInfo) }
            }
        };
        
        result
    }
    
    
    method void fixSplitSplit(shared DependencyInformation splitInfo) {
        removeDependencyInformation(splitInfo);
    }

    method void fixJoinJoin(shared DependencyInformation splitInfo) {
        removeDependencyInformation(splitInfo);
    }
    
    method immutable Permission simplePermission(immutable Permission perm) {
        match (perm){
            case ImmutablePermission { perm }
            case SharedPermission    { perm }
            case UniquePermission    { perm }
            case NonePermission      { perm }
            case LocalPermission     { perm.thePerm }
            case BorrowedPermission  { perm.thePerm }
            default                  { ABORT("<AEminiumPass> found not supported permission: " + perm.toString()) }
        }        
    }

    method unique Set removeSplitSplit(unique Set infos) {
        DEBUG(DEBUG_PRIO_LOW, "<AEminiumPass> removeSplitSplit");
        val unique Set result = java.util.HashSet.new();
        
        val it = infos.iterator();
        while { it.hasNext() }{
            val shared DependencyInformation depInfo = it.next();
            
            match (depInfo) {
                case SplitInformation {                    
                    ifElse ( simplePermission(depInfo.permIn) == simplePermission(depInfo.permOut) ) {
                        val upperSplits = getSplitInformation(depInfo.deps);
                        ifElse ( upperSplits.size() > 0) {
                            DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> found split hierarchy ");
                            if ( upperSplits.size() != 1 ) { ABORT("<AEminiumPass> cannot have more than one split") };
                            fixSplitSplit(depInfo);                            
                        }{
                            result.add(depInfo)
                        }
                    }{
                        result.add(depInfo);
                    }
                }
                default { result.add(depInfo) }
            }
        };
        
        result      
    }
    
    method unique Set removeJoinJoin(unique Set infos) {
        DEBUG(DEBUG_PRIO_LOW, "<AEminiumPass> removeJoinJoin");
        val unique Set result = java.util.HashSet.new();
        
        val it = infos.iterator();
        while { it.hasNext() }{
            val shared DependencyInformation depInfo = it.next();
            
            match (depInfo) {
                case JoinInformation {                    
                    ifElse ( simplePermission(depInfo.permIn) == simplePermission(depInfo.permOut) ) {
                        val lowerJoins = getJoinInformation(depInfo.rdeps);
                        ifElse ( lowerJoins.size() > 0) {
                            DEBUG(DEBUG_PRIO_HIGH, "<AEminiumPass> found join hierarchy ");
                            if ( lowerJoins.size() != 1 ) { ABORT("<AEminiumPass> cannot have more than one split") };
                            fixJoinJoin(depInfo);                            
                        }{
                            result.add(depInfo)
                        }
                    }{
                        result.add(depInfo);
                    }
                }
                default { result.add(depInfo) }
            }
        };
        
        result      
    }
}