package plaid.compiler;

state CompilerConfiguration {
    val immutable List     plaidpath;
    val immutable Boolean  force;
    val immutable Boolean  keep;
    val immutable String   outputDir;
    val immutable String   inputDir;
    val immutable String   tempDir;
    val immutable List     inputFiles;

    method unique CompilerConfiguration expand() [unique CompilerConfiguration  >> none CompilerConfiguration this] {
        DEBUG("Expand CompilerConfiguration.");

        var immutable String outputDir = System.getProperty("user.dir");
        var immutable String tempDir   = System.getProperty("user.dir");
        var immutable String inputDir  = System.getProperty("user.dir");
        var immutable List inputFiles  = this.inputFiles;

        if ( this.outputDir.length() > 0 ) { outputDir = this.outputDir() };
        if ( this.tempDir.length() > 0 )   { tempDir   = this.tempDir() };
        if ( this.inputDir.length() > 0 )  { 
            inputDir = this.inputDir;
            // expand file 
            inputFiles = findPlaidFiles(inputDir);
        };

        new CompilerConfiguration {
            val plaidpath   = this.plaidpath;
            val force       = this.force;
            val keep        = this.keep;
            val outputDir   = outputDir;
            val inputDir    = inputDir;
            val tempDir     = tempDir;
            val inputFiles  = inputFiles;
        }; 
    }

    method immutable List findPlaidFiles(immutable String path) {
        val unique File currentDir = java.io.File.new(path);
        val unique List files = makeEmptyList();

        findPlaidFilesHelper(currentDir, files);

        files        
    }

    method void findPlaidFilesHelper(immutable File currentDir, unique List files) {
        DEBUG("Searching for file in " + currentDir.getAbsolutePath().toString());
        val content = java.util.Arrays.asList(currentDir.listFiles());
        val it = content.iterator();

        while {  it.hasNext() }{
            val f = it.next();
            ifElse ( f.isDirectory() ) {
                findPlaidFilesHelper(f, files);
            }{
                if ( f.isFile() && f.getAbsolutePath().endsWith(".plaid") ) {
                    DEBUG("  Found Plaid file '" + f.getAbsolutePath() + "'.");
                    files.add(f.getAbsolutePath());
                }
            };
        };        
    }

    method toString() {
        "CompilerCompilation("+
            "outputDir=" + this.outputDir +
            ",inputDir=" + this.inputDir +
            ",tempDir=" + this.tempDir +
            ",plaidpath=[" + this.plaidpath.toString()+"]" +
            ",force=" + force.toString() + 
            ",keep=" + keep.toString() +
            ",inputFiles=[" + inputFiles.toString() +"]" +          
            ")"            
    }
}