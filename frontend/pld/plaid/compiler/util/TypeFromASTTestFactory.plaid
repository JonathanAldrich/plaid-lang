/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.util;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.collections.makeLinkedList;
import plaid.ast.parsed.*;
import plaid.compiler.permissions.*;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;
import plaid.compiler.types.*;
import plaid.compiler.tests.*;

state TypeFromASTTestFactory case of TestFactory {
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
    val unique SymbolFactory symFac = new SymbolFactory;
   
    val ast = new ASTsForTests;
    ast.initASTs();
    val symbols = new SymbolsForTests;
    symbols.initSymbols(ast);
    val types = new TypesForTests;
    types.initPermissions();
    types.initTypes(ast,symbols);

    test("ASTtoPermission", fn(ctx) => {
      ctx.assertTrue(makePermissionFromAST(new ParsedUniquePermission) == UNIQUE);
      ctx.assertTrue(makePermissionFromAST(new ParsedImmutablePermission) == IMMUTABLE);
      ctx.assertTrue(makePermissionFromAST(new ParsedSharedPermission) == SHARED);
      ctx.assertTrue(makePermissionFromAST(new ParsedNonePermission) == NONEP);
      ctx.assertTrue(makePermissionFromAST(new ParsedEmptyPermission) == UNIQUE);
      ctx.assertTrue(makePermissionFromAST(new ParsedLocalPermission { val symmetricPermission = new ParsedImmutablePermission; } ) == LOCALIMMUTABLE);
      ctx.assertTrue(makePermissionFromAST(new ParsedLocalPermission { val symmetricPermission = new ParsedSharedPermission; } ) == LOCALSHARED);
    }); 

    test("ASTtoType", fn(ctx) => {
      ctx.assertTrue(makeTypeFromAST(ast.EMPTY_TYPE_AST) == DYNAMICTYPE);
      ctx.assertTrue(makeTypeFromAST(ast.typeASTu1) == types.nominalType_u1);
      ctx.assertTrue(makeTypeFromAST(ast.typeASTe2) == types.nominalType_i2);
      ctx.assertTrue(makeTypeFromAST(ast.typeASTe3) == types.nominalType_u3);
    });  
    
    test("ASTtoArgSpec", fn(ctx) => {
      ctx.assertTrue(makeArgSpecFromAST(ast.argSpecASTu1n1) == types.argSpec_u1n1);
    }); 
    
    tests
  }
  
  
}