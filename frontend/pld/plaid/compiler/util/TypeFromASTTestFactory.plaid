/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.util;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.collections.makeLinkedList;
import plaid.ast.parsed.*;
import plaid.compiler.permissions.*;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;
import plaid.compiler.types.*;

state TypeFromASTTestFactory case of TestFactory {
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
    val unique SymbolFactory symFac = new SymbolFactory;
   
    test("ASTtoPermission", fn(ctx) => {
      ctx.assertTrue(makePermissionFromAST(new ParsedUniquePermission) == UNIQUE);
      ctx.assertTrue(makePermissionFromAST(new ParsedImmutablePermission) == IMMUTABLE);
      ctx.assertTrue(makePermissionFromAST(new ParsedSharedPermission) == SHARED);
      ctx.assertTrue(makePermissionFromAST(new ParsedNonePermission) == NONEP);
      ctx.assertTrue(makePermissionFromAST(new ParsedEmptyPermission) == UNIQUE);
      ctx.assertTrue(makePermissionFromAST(new ParsedLocalPermission { val symmetricPermission = new ParsedImmutablePermission; } ) == LOCALIMMUTABLE);
      ctx.assertTrue(makePermissionFromAST(new ParsedLocalPermission { val symmetricPermission = new ParsedSharedPermission; } ) == LOCALSHARED);
    }); 
    
    val immutable String stateName1 = "state1";
    val immutable String stateName2 = "state2";
    val immutable String stateName3 = "state3";
    
    val immutable ParsedIdentifier stateID1 = new ParsedIdentifier { val name = stateName1; };
    val immutable ParsedIdentifier stateID2 = new ParsedIdentifier { val name = stateName2; };
    val immutable ParsedIdentifier stateID3 = new ParsedIdentifier { val name = stateName3; };
    
    val unique LinkedList QIlist1 = makeLinkedList();
    QIlist1.add(stateID1);
    val unique LinkedList QIlist2 = makeLinkedList();
    QIlist2.add(stateID2);
    val unique LinkedList QIlist3 = makeLinkedList();
    QIlist3.add(stateID3);
    
    val immutable ParsedQualifiedIdentifier stateQID1 = new ParsedQualifiedIdentifier { val identifiers = QIlist1; };
    val immutable ParsedQualifiedIdentifier stateQID2 = new ParsedQualifiedIdentifier { val identifiers = QIlist2; };
    val immutable ParsedQualifiedIdentifier stateQID3 = new ParsedQualifiedIdentifier { val identifiers = QIlist3; };
    
    val immutable ParsedNominalStructure nomStruct1 = new ParsedNominalStructure { val stateQi = stateQID1; val metaTypes = makeLinkedList(); };
    val immutable ParsedNominalStructure nomStruct2 = new ParsedNominalStructure { val stateQi = stateQID2; val metaTypes = makeLinkedList(); };
    val immutable ParsedNominalStructure nomStruct3 = new ParsedNominalStructure { val stateQi = stateQID3; val metaTypes = makeLinkedList(); };
    
    val immutable ParsedConcreteType nominalAST1 = new ParsedConcreteType {
      val permission = new ParsedUniquePermission;
      val structure = nomStruct1;
    };
    val immutable ParsedConcreteType nominalAST2 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = nomStruct2;
    };
     val immutable ParsedConcreteType nominalAST3 = new ParsedConcreteType {
      val permission = new ParsedEmptyPermission;
      val structure = nomStruct3;
    };
    
    val unique LinkedList immutableModList = makeLinkedList();
    immutableModList.add(new ParsedImmutableModifier);
    
    val immutable ParsedStateDecl stateAST1 = new ParsedStateDecl { 
      val name = stateName1;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    val immutable ParsedStateDecl stateAST2 = new ParsedStateDecl { 
      val name = stateName2;
      val modifiers = immutableModList;
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    val immutable ParsedStateDecl stateAST3 = new ParsedStateDecl { 
      val name = stateName3;
      val modifiers = makeLinkedList();
      val caseOf = new ParsedEmptyQualifiedIdentifier;
      val StaticArgsSpec = makeLinkedList();
      val metaCaseOfArgs = makeLinkedList();
    };
    
    
    val shared Symbol stateSym1 = symFac.makeStateSymbol(stateName1, 
                                                  stateAST1,
                                                  symFac.makeTopSymbol());
    val shared Symbol stateSym2 = symFac.makeStateSymbol(stateName2, 
                                                  stateAST2,
                                                  symFac.makeTopSymbol());
    val shared Symbol stateSym3 = symFac.makeStateSymbol(stateName3, 
                                                  stateAST3,
                                                  symFac.makeTopSymbol());                                             
    
    addSymbolForAST(stateQID1, stateSym1);
    addSymbolForAST(stateQID2, stateSym2);
    addSymbolForAST(stateQID3, stateSym3);
    
    val nomStruct1cmp = makeType(UNIQUE, makeNominalStructure(stateSym1,VOID,stateName1));
    val nomStruct2cmp = makeType(IMMUTABLE,makeNominalStructure(stateSym2,VOID,stateName2));
    val nomStruct3cmp = makeType(UNIQUE, makeNominalStructure(stateSym3,VOID,stateName3));
    
    test("ASTtoType", fn(ctx) => {
      ctx.assertTrue(makeTypeFromAST(new ParsedEmptyType) == DYNAMICTYPE);
      ctx.assertTrue(makeTypeFromAST(nominalAST1) == nomStruct1cmp);
      ctx.assertTrue(makeTypeFromAST(nominalAST2) == nomStruct2cmp);
      ctx.assertTrue(makeTypeFromAST(nominalAST3) == nomStruct3cmp);
    });  
    
    val immutable ParsedArgSpec as1 = new ParsedArgSpec {
      val inputType = nominalAST1;
      val outputType = nominalAST2;
    };  
    
    test("ASTtoArgSpec", fn(ctx) => {
      ctx.assertTrue(makeArgSpecFromAST(as1) == makeArgSpec(nomStruct1cmp,nomStruct2cmp));
    }); 
    
    tests
  }
  
  
}