package plaid.compiler.util;

import plaid.compiler.PlaidType;

method immutable PlaidType makeTypeFromAST(immutable Type typeNode) {
    match(node) {
        case EmptyType {
            new DynamicPlaidType; 
        }
        case NominalObjectType {
            val qiSymbol = symbolForAST(node.stateQi);
            match (qiSymbol) {
                case Some {
                    val qiType = qiSymbol.value.getType();
                    val permission = makePermissionFromAST();
                    new PermType {
                        val permission = permission;
                        val permType   = qiType();
                    }                 
                 }
                 case None {
                     ABORT("Cannot find symbol for '" + makeStringFromQualifiedIdentifier(node.stateQi) + "'");
                 }
             }
        }
        case LambdaPlaidType {
            ABORT("Cannot handle LambdaTypes yet");
        }
        default {
            ERROR("Cannot create type from ASTNode.");
            NONE
        }
    }
}