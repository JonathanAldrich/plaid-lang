package plaid.compiler.util;

import plaid.ast.parsed.*;
import plaid.compiler.*;
import plaid.compiler.types.*;

method immutable PlaidType makeTypeFromAST(immutable Type typeNode) {
    match(typeNode) {
        case EmptyType {
            DEBUG(DEBUG_PRIO_LOW, "<makeTypeFromAST> EmptyType -> DynamicPlaidType");
            new DynamicPlaidType; 
        }
        case NominalObjectType {
            DEBUG(DEBUG_PRIO_LOW, "<makeTypeFromAST> transform NominalObjectType");
            val qiSymbol = symbolForAST(typeNode.stateQi);
            match (qiSymbol) {
                case Some {
                    val qiType = qiSymbol.value.getType();
                    val permission = makePermissionFromAST();
                    new PermPlaidType {
                        val permission = permission;
                        val permType   = qiType;
                    }
                 }
                 case None {
                     ABORT("Cannot find symbol for '" + makeStringFromQualifiedIdentifier(typeNode.stateQi) + "'");
                 }
             }
        }
        case LambdaPlaidType {
            ABORT("Cannot handle LambdaTypes yet");
        }
        default {
            ABORT("Cannot create type from ASTNode. " + typeNode.toString());
        }
    }
}