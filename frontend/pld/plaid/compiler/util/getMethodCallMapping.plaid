package plaid.compiler.util;

import plaid.ast.parsed.*;
import plaid.compiler.types.*;

method unique Map getMethodCallMapping(immutable MethodSignature mSig, 
                                       immutable ParsedMethodCall mCall) {
    DEBUG(DEBUG_PRIO_MEDIUM, "<getMethodCallMapping> for " + mSig.toString());
    val substMap = java.util.HashMap.new();
    
    if ( mSig.staticArgsSpec.size() != mCall.staticArgs.size() ) {
        ABORT("Cannot compute mapping when argument count does not specification.");
    };
    
    val zipped = mSig.staticArgsSpec.zip(mCall.staticArgs);
    zipped.do( fn (z) =>{
        val staticArgSpec = z.fst;
        val staticArg     = z.snd;
        
        match ( staticArgSpec ) {
            case StaticArgSpec { 
                val name = staticArgSpec.name;
                val value = makeAbstractExpressionFromAST(staticArg);
                DEBUG(DEBUG_PRIO_MEDIUM, "<getMethodCallMapping>     add mapping '" + name + "' -> '" + value.toString() + "'");
                substMap.put(name, value);
            }
            default { ABORT("<getMethodCallMapping> Unknown static arg spec.") } 
        };
    });     
    
    substMap;
}