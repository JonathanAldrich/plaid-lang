package plaid.compiler.util;

import plaid.compiler.symbolForAST;
import plaid.compiler.DEBUG;
import plaid.compiler.DEBUG_PRIO_LOW;
import plaid.compiler.ABORT;
import plaid.ast.parsed.ParsedNominalStructure;
import plaid.ast.util.makeStringFromQualifiedIdentifier;
import plaid.compiler.symbol.StateSymbol;
import plaid.compiler.symbol.JavaClassSymbol;
import plaid.compiler.Structure;

method immutable Structure makeNominalStructureFromAST(immutable ParsedNominalStructure ps) {
    val qiSymbol = symbolForAST(ps.stateQi);
    match (qiSymbol) {
        case Some {
            DEBUG(DEBUG_PRIO_LOW, "<makeTypeFromAST> create structure for state '" + qiSymbol.value.getFQN() + "'");
      		match (qiSymbol.value) {
      			case StateSymbol { 
      			    val struct = qiSymbol.value.getStructure(); 
      			    
      			    val staticArgs = ps.staticArgs.map ( fn (arg) => {
      			        val expr = makeAbstractExpressionFromAST(arg);
      			        match (expr) {
      			            case AbstractExpression { expr  }
      			            default { ABORT("Cannot convert parsed static arg to abstract expression."); }
      			        }
      			    });
      			    
      			    struct.substitute(staticArgs);
      			}
      			case JavaClassSymbol { qiSymbol.value.getStructure(); }
      			default { ABORT("unexpected symbol type for nominal structure: " + qiSymbol.value.symbolType()) }
      		};
            
        }
        case None {
            ABORT("Cannot find symbol for '" + makeStringFromQualifiedIdentifier(typeNode.structure.stateQi) + "'");
        }
    }

}