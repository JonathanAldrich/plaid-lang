/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */
package plaid.compiler.resolver;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.resolver.Resolver;
import plaid.compiler.resolver.ClasspathResolver;

state ResolverTestFactory case of TestFactory { 
    method unique List<unique Test> createTests() {
        val /* List<Test> */ tests = makeEmptyList(); 

        val /*List<String>*/ classpath = makeEmptyList();
        classpath.add("../stdlib");
        classpath.add("../stdlib/plaidsl.jar");
        classpath.add("pld");

        // resolver         
        val unique Resolver resolver = new ClasspathResolver {
            val classpath = classpath; 
        };


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Init Test" }
            method immutable Boolean run() {
                true
            }
        });
        

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'unit'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("unit");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'unit' [cached]" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("unit");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'Integer'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("Integer");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'Boolean'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("Boolean");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "lookup 'True'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("True");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'False'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("False");
                match (result) {
                    case Some { true }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Non-Existing Item" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("$I$.$do$.$not$.$exist$");
                match (result) {
                    case None { true; }
                    default { false; }
                }
            }
        });

        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'Resolver'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.typechecker.resolver.Resolver");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'Resolver' [cached]" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.typechecker.resolver.Resolver");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests.add(new Test {
            val classpath = classpath;
            val resolver = resolver;
            method immutable String getName() { "Lookup 'if'" }
            method immutable Boolean run() {
                val /* Option<Type> */ result = resolver.lookup("plaid.lang.globals.if");
                match (result) {
                    case Some { true; }
                    default { false }
                }
            }
        });


        tests 
    }
}