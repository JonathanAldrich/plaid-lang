/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typechecker;

import plaid.lang.testing.TestFactory;
import plaid.lang.testing.Test;
import plaid.compiler.*;
import plaid.compiler.symbol.SymbolFactory;
import plaid.ast.parsed.*;
import plaid.compiler.types.*;
import plaid.compiler.permissions.*;
import plaid.compiler.symbol.*;
import plaid.compiler.tests.*;

import plaid.collections.makeLinkedList;

state TypecheckerTestFactory case of TestFactory {
  
  method immutable Boolean sourceLocListCompare(list1, list2) {
    match (list1.size() == list2.size()) {
      case True {
        list1.zip(list2).reduce(true, fn(acc,next) => acc && ( next.fst == next.snd));
      }
      case False { false }
    }
  }
  
  method unique List<unique Test> createTests() {
    val tests = makeLinkedList();
    val test = fn(name,body) => { tests.add(mktest(name, body)) };
    var result = unit;  //dummy variable to get around match scoping bug
    var context = unit;
    var contextCMP = unit;
    var sourceLocListCMP = unit;
    
    val ast = new ASTsForTests;
    ast.initASTs();
    val symbols = new SymbolsForTests;
    symbols.initSymbols(ast);
    val types = new TypesForTests;
    types.initPermissions();
    types.initTypes(ast,symbols);
    
    val astCMP = new ASTsForTests;
    astCMP.initASTs();
    val symbolsCMP = new SymbolsForTests;
    symbolsCMP.initSymbols(astCMP);
    val typesCMP = new TypesForTests;
    typesCMP.initPermissions();
    typesCMP.initTypes(astCMP,symbolsCMP);
    
    /****************** Variables *******************/
    
    test("type variable", fn(ctx) => {
      context = new LinearContext;
      context.put(symbols.valSym1u1, types.nominalType_u1);
      
      contextCMP = new LinearContext;
      contextCMP.put(symbols.valSym1u1, types.nominalType_i1);
      
      sourceLocListCMP = makeLinkedList();
      sourceLocListCMP.add(types.sourceLocVal1u1);
      
      result = typecheckExpression(context, IMMUTABLE, ast.valID1u1);
      
      ctx.assertTrue(result.expType == types.nominalType_i1 &&
                     result.ctxResult == contextCMP &&
                     this.sourceLocListCompare(result.sourceLocList,sourceLocListCMP));
      //test exception thrown when in other cases once we have exceptions
    });
    
    /****************** Assignment *******************/
    
    test("type assignment to Local", fn(ctx) => {
      context = new LinearContext;
      context.put(symbols.varSym1u1, types.nominalType_u1);
      context.put(symbols.varSym2u2, types.nominalType_u2);
      
      contextCMP = new LinearContext;
      contextCMP.put(symbols.varSym1u1, types.nominalType_u1);
      contextCMP.put(symbols.varSym2u2, types.nominalType_n2);
      
      sourceLocListCMP = makeLinkedList();
      sourceLocListCMP.add(types.sourceLocVar2u2);
      
      result = typecheckExpression(context, NONEP, ast.assignAST_var1u1TOvar2u2);
      
      ctx.assertTrue(result.expType == VOID &&
                     result.ctxResult == contextCMP &&
                     this.sourceLocListCompare(result.sourceLocList,sourceLocListCMP));
      //test exception thrown when in other cases once we have exceptions
    });
    
    test("type assignment to packed field", fn(ctx) => {
      context = new LinearContext;
      context.put(symbols.valSym4u4, types.nominalType_u4);
      context.put(symbols.varSym2u2, types.nominalType_u2);
      
      contextCMP = new LinearContext;
      contextCMP.put(symbols.valSym4u4, types.nominalType_u4);
      contextCMP.put(symbols.varSym2u2, types.nominalType_n2);
      
      sourceLocListCMP = makeLinkedList();
      
      result = typecheckExpression(context, NONEP, ast.assignAST_val4u4DOTfield1TOvar2u2);
      
      ctx.assertTrue(result.expType == VOID &&
                     result.ctxResult == contextCMP &&
                     this.sourceLocListCompare(result.sourceLocList,sourceLocListCMP));
      //test exception thrown when in other cases once we have exceptions
    });
    
    test("type assignment to unpacked field", fn(ctx) => {
      context = new LinearContext;
      context.put(symbols.valSym4u4, types.unpackedType_u4Var3u1_1Bs1);
      context.put(symbols.valSym3u3, types.nominalType_u3);
      
      contextCMP = new LinearContext;
      contextCMP.put(symbols.valSym4u4, types.nominalType_u4);
      contextCMP.put(symbols.varSym3u3, types.nominalType_n3);
      
      sourceLocListCMP = makeLinkedList();
      
      result = typecheckExpression(context, NONEP, ast.assignAST_val4u4DOTfield3TOvar3u3);
      
      ctx.assertTrue(result.expType == VOID &&
                     result.ctxResult == contextCMP &&
                     this.sourceLocListCompare(result.sourceLocList,sourceLocListCMP));
      //test exception thrown when in other cases once we have exceptions
    });
    
    tests
  }
}    
  