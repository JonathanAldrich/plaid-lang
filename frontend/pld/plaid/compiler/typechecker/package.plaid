/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typechecker;

import plaid.compiler.Symbol;


/**
 *  factory methods for source locations
 */
method immutable VarSourceLocation makeVarSourceLoc(immutable Symbol varSymbol) {
  new VarSourceLocation {
    val varSymbol = varSymbol;
  }
}

method immutable FieldSourceLocation makeFieldSourceLoc(immutable Symbol objectVarSymbol, immutable UnpackedFieldSignature fsig) {
  new FieldSourceLocation {
    val objectVarSymbol = objectVarSymbol;
    val fieldName = fsig.getFieldName();
    val objectID = fsig.objectID;
  }
}

//DO NOT USE EXCEPT FOR TESTING
method immutable FieldSourceLocation makeFieldSourceLocSetID(immutable Symbol objectVarSymbol, 
                                                             immutable String fieldName, 
                                                             immutable Integer objectID) {
  new FieldSourceLocation {
    val objectVarSymbol = objectVarSymbol;
    val fieldName = fieldName;
    val objectID = objectID;
  }
}

/**
 * Restores Permission perm to each source location in sourceLocs to LinearContext ctx
 */
method void listRestore(unique LinkedList<SourceLocation> sourceLocs, immutable Type retType, unique LinearContext ctx) {
  sourceLocs.do(fn (immutable SourceLocation sourceLoc)[immutable Type retType, unique LinearContext ctx] => { sourceLoc.restoreToLoc(retType, ctx) })
}

/**
 * factory method for TypecheckResult - when tuples work better, just use those
 */
method unique TypecheckResult makeTypecheckResult(immutable Type expType, 
                                                  unique LinearContext ctxResult,
                                                  immutable LinkedList<immutable SourceLocaiton> sourceLocList)
{
  new TypecheckResult {
    val expType = expType;
    val ctxResult = ctxResult;
    val sourceLocList = sourceLocList;
  }
}