/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typechecker;

immutable state FieldSourceLocation case of SourceLocation { 
  val immutable VariableSymbol objectVarSymbol;
  val immutable String fieldName;
  val immutable Integer objectID;
  
  method unique LinearContext restore(immutable Type retType, unique LinearContext ctx) {
    val unique Option<immutable Type> curObjectTypeOption = ctx.getOption(this.objectVarSymbol);
    match (curObjectTypeOption) {
      case Some {
        val immutable Structure curStruct = curObjectTypeOption.value.structure;
        match (curStruct) {
          case ObjectStructure {
            val immutable Structure newStruct = curStruct.restoreToField(this.fieldName, retType, this.objectID);
            val newCtx = ctx.copy();
            newCtx.update(this.objectVarSymbol, makeType(curObjectTypeOption.value.permission, newStruct));
            newCtx;
          }
          default { ABORT(objectSymbol.name + "is not an object structure - cannot restore to its fields") }
        }
      }
      case None { ctx.copy() /* no op - object not in scope to return to*/ }
    }
  
  }


}