/**
 * Copyright (c) 2011 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.compiler.typechecker;

import plaid.compiler.types.mergeStructures;
import plaid.compiler.types.makeType;

import plaid.compiler.aeminium.*;

immutable state VarSourceLocation case of SourceLocation { 
  val immutable Symbol varSymbol;
  
  /**
   *  restores retType to varSymbol - (if it is assignable (var), this is not implemented)
   *  If the varSymbol is still in scope (exists in the context), then
   *    - the incoming permission is returned to the permission from the context
   *    - the two structures are merged
   *    - varSymbol is updated in the context with the type formed from the 
   *      updated permission and structure
   */
  method void restore(immutable Type retType, unique LinearContext ctx) {
    if (this.varSymbol.isVar()) { ABORT("(implementation Error) Cannot restore to Var local variables/top level fields yet") };
    val unique Option<immutable Type> curVarTypeOption = ctx.getOption(this.varSymbol);
    match(curVarTypeOption) {
      case Some {
        val immutable Permission restoredPerm = curVarTypeOption.value.permission.returnPerm(retType.permission);
        val immutable Structure restoredStructure = mergeStructures(curVarTypeOption.value.structure, retType.structure);
        if (AEMINIUM_MODE() ) {
            DEBUG(DEBUG_PRIO_MEDIUM, "<VarSourceLocation> create join node for '" + this.varSymbol.name + "' from '" + retType.permission +"=>" + restoredPerm+"'");
            val unique DependencyInformation joinInfo = makeJoinInformation(this.varSymbol, retType.permission, restoredPerm);
            val unique Set lastDependents = findLastDependents(depInfoForSymbol(this.varSymbol).value);
            val it = lastDependents.iterator();
            while { it.hasNext() } {
                val shared DependencyInformation dep = it.next();
                joinInfo.deps.add(dep);
                dep.rdeps.add(joinInfo);
            };
            setDepInfoForSymbol(this.varSymbol, joinInfo);
        };
        ctx.update(this.varSymbol, makeType(restoredPerm, restoredStructure));
        unit
      }
      case None { unit }
    }
  }
  
  method immutable Boolean ==(immutable SourceLocation other) {
    match (other) {
      case VarSourceLocation {
        this.varSymbol == other.varSymbol
      }
      default { false }
    }
  }
  
  method immutable String toString() {
    "SourceLoc(" + this.varSymbol.name + ")"
  }
}