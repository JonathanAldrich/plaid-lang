package plaid.compiler.typechecker;

import plaid.compiler.*;
import plaid.compiler.permissions.*;
import plaid.compiler.util.*;

method immutable Boolean checkType(immutable Type t, unique LinearContext ctx) {
    DEBUG(DEBUG_PRIO_MEDIUM, "<checkType> " + t.toString());
    
    // check permission 
    val permOk = match (t.permission) {
        case SharedPermission { ctx.gpMap.containsKey(t.permission.groupExpr.toString()) }
        default { true }
    };
    
    // check structure 
    val structOk = match (t.structure) {
        case NominalStructure {
            var result = true;
            t.structure.staticArgs.do( fn (arg) => result = result && ctx.gpMap.containsKey(arg.toString()) );
            result
        }
        default { true }
    };
    
    permOk && structOk
}