package plaid.compiler;

import plaid.collections.makeLinkedList;

state Job {
    var unique Option<unique ASTNode>  ast  = new None;
    val shared Resolver resolver;
    var immutable Boolean noErrors = true;
    val unique Source source;
    var unique List passes;
    var unique List generatedFiles = makeLinkedList();
    val unique Map jobData = java.util.HashMap.new();
    
    method void addJobData(immutable String key,
                           shared JobData value) {
        this.jobData.put(key, value);                       
    }
    
    method immutable Option getJobData(immutable String key) {
        ifElse (this.jobData.containsKey(key) ) {
            makeSome(this.jobData.get(key));
        }{
            new None
        }
    }
    
    method void addGeneratedFile(immutable String path) {
        this.generatedFiles.add(path);
    }
    
    method immutable boolean isReady() {
        this.noErrors && !this.passes.isEmpty()
    }
    
    method getNextPass() {
        match (this.passes.isEmpty()) {
            case True { ABORT("job has no more passes"); }
            case False { 
                val thePassOption = this.passes.get(0);
                match (thePassOption) {
                    case Some { //remove it from the list and return
                        this.passes.removeFirst();
                        thePassOption.value; 
                    }
                    case None { ABORT("job has no more passes"); }
                };
            }
        }
    }
}