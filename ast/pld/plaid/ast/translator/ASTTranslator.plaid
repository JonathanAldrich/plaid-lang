package plaid.ast.translator;

import plaid.ast.parsed.*;
import plaid.ast.util.makeListFromJavaCollection;
import plaid.ast.util.makeTokenFromJavaToken;

state ASTTranslator {
	 method immutable CompilationUnit translateAST(immutable ASTNode node){
		 match(node){
			case plaid.parser.ast.AbstractFieldDecl{ 
				new plaid.parser.ast.AbstractFieldDecl {
					specifier = this.translateAST(root.getSpecifier());
					type = this.translateAST(root.getType());
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.AbstractMethodDecl{ 
				new plaid.parser.ast.AbstractMethodDecl {
					type = this.translateAST(root.getType());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					arguments = makeListFromJavaCollection(root.getArguments()).map(fn(a) => this.translateAST(a));
					env = makeListFromJavaCollection(root.getEnv()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.AbstractStateDecl{ 
				new plaid.parser.ast.AbstractStateDecl {
					caseOf = this.translateAST(root.getCaseOf());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					metaCaseOfArgs = makeListFromJavaCollection(root.getMetaCaseOfArgs()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.AbstractStateValDecl{ 
				new plaid.parser.ast.AbstractStateValDecl {
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Application{ 
				new plaid.parser.ast.Application {
					f = this.translateAST(root.getF());
					argument = this.translateAST(root.getArgument());
					metaArgs = makeListFromJavaCollection(root.getMetaArgs()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Arg{ 
				new plaid.parser.ast.Arg {
					name = this.translateAST(root.getName());
					argSpec = this.translateAST(root.getArgSpec());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ArgSpec{ 
				new plaid.parser.ast.ArgSpec {
					preType = this.translateAST(root.getPreType());
					postType = this.translateAST(root.getPostType());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ArgumentExpression{ 
				new plaid.parser.ast.ArgumentExpression {
					args = makeListFromJavaCollection(root.getArgs()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Assignment{ 
				new plaid.parser.ast.Assignment {
					target = this.translateAST(root.getTarget());
					field = this.translateAST(root.getField());
					value = this.translateAST(root.getValue());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.AtomicBlock{ 
				new plaid.parser.ast.AtomicBlock {
					datagroups = makeListFromJavaCollection(root.getDatagroups()).map(fn(a) => this.translateAST(a));
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.BlockExpr{ 
				new plaid.parser.ast.BlockExpr {
					statements = makeListFromJavaCollection(root.getStatements()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Cast{ 
				new plaid.parser.ast.Cast {
					type = this.translateAST(root.getType());
					exp = this.translateAST(root.getExp());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.CompilationUnit{ 
				new plaid.parser.ast.CompilationUnit {
					decls = makeListFromJavaCollection(root.getDecls()).map(fn(a) => this.translateAST(a));
					packageName = this.translateAST(root.getPackageName());
					imports = makeListFromJavaCollection(root.getImports()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ConcreteFieldDecl{ 
				new plaid.parser.ast.ConcreteFieldDecl {
					expr = this.translateAST(root.getExpr());
					specifier = this.translateAST(root.getSpecifier());
					type = this.translateAST(root.getType());
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ConcreteMethodDecl{ 
				new plaid.parser.ast.ConcreteMethodDecl {
					body = this.translateAST(root.getBody());
					type = this.translateAST(root.getType());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					arguments = makeListFromJavaCollection(root.getArguments()).map(fn(a) => this.translateAST(a));
					env = makeListFromJavaCollection(root.getEnv()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ConcreteStateDecl{ 
				new plaid.parser.ast.ConcreteStateDecl {
					stateBinding = this.translateAST(root.getStateBinding());
					caseOf = this.translateAST(root.getCaseOf());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					metaCaseOfArgs = makeListFromJavaCollection(root.getMetaCaseOfArgs()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.ConcreteStateValDecl{ 
				new plaid.parser.ast.ConcreteStateValDecl {
					stateBinding = this.translateAST(root.getStateBinding());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.DeclList{ 
				new plaid.parser.ast.DeclList {
					decls = makeListFromJavaCollection(root.getDecls()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.DefaultCase{ 
				new plaid.parser.ast.DefaultCase {
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Dereference{ 
				new plaid.parser.ast.Dereference {
					left = this.translateAST(root.getLeft());
					right = this.translateAST(root.getRight());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.DestructiveDereference{ 
				new plaid.parser.ast.DestructiveDereference {
					left = this.translateAST(root.getLeft());
					right = this.translateAST(root.getRight());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.DoubleLiteral{ 
				new plaid.parser.ast.DoubleLiteral {
					value = root.getValue();
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.DynamicType{ 
				new plaid.parser.ast.DynamicType {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptyArgSpec{ 
				new plaid.parser.ast.EmptyArgSpec {
					preType = this.translateAST(root.getPreType());
					postType = this.translateAST(root.getPostType());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptyExpression{ 
				new plaid.parser.ast.EmptyExpression {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptyPermission{ 
				new plaid.parser.ast.EmptyPermission {
					permissionKind = this.translateAST(root.getPermissionKind());
					datagroup = this.translateAST(root.getDatagroup());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptyQualifiedIdentifier{ 
				new plaid.parser.ast.EmptyQualifiedIdentifier {
					ids = makeListFromJavaCollection(root.getIds()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptySpecifier{ 
				new plaid.parser.ast.EmptySpecifier {
					sk = this.translateAST(root.getSk());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.EmptyType{ 
				new plaid.parser.ast.EmptyType {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Freeze{ 
				new plaid.parser.ast.Freeze {
					frozenExpr = this.translateAST(root.getFrozenExpr());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.GroupDecl{ 
				new plaid.parser.ast.GroupDecl {
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					name = this.translateAST(root.getName());
					modifiers = makeListFromJavaCollection(root.getModifiers()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.GroupType{ 
				new plaid.parser.ast.GroupType {
					gp = this.translateAST(root.getGp());
					id = this.translateAST(root.getId());
					isAbstract = this.translateAST(root.getIsAbstract());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Identifier{ 
				new plaid.parser.ast.Identifier {
					name = root.getName();
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Import{ 
				new plaid.parser.ast.Import {
					qi = this.translateAST(root.getQi());
					star = root.getStar();
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.InfixOperator{ 
				new plaid.parser.ast.InfixOperator {
					left = this.translateAST(root.getLeft());
					right = this.translateAST(root.getRight());
					operator = this.translateAST(root.getOperator());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.IntLiteral{ 
				new plaid.parser.ast.IntLiteral {
					value = root.getValue();
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Lambda{ 
				new plaid.parser.ast.Lambda {
					arguments = makeListFromJavaCollection(root.getArguments()).map(fn(a) => this.translateAST(a));
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					env = makeListFromJavaCollection(root.getEnv()).map(fn(a) => this.translateAST(a));
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.LambdaType{ 
				new plaid.parser.ast.LambdaType {
					metaTypes = makeListFromJavaCollection(root.getMetaTypes()).map(fn(a) => this.translateAST(a));
					argTypes = makeListFromJavaCollection(root.getArgTypes()).map(fn(a) => this.translateAST(a));
					env = makeListFromJavaCollection(root.getEnv()).map(fn(a) => this.translateAST(a));
					returnType = this.translateAST(root.getReturnType());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.LocalStateValDecl{ 
				new plaid.parser.ast.LocalStateValDecl {
					id = this.translateAST(root.getId());
					st = this.translateAST(root.getSt());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Match{ 
				new plaid.parser.ast.Match {
					e = this.translateAST(root.getE());
					caseList = makeListFromJavaCollection(root.getCaseList()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.MetaArg{ 
				new plaid.parser.ast.MetaArg {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.MetaArgSpec{ 
				new plaid.parser.ast.MetaArgSpec {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.MetaGroupArgSpec{ 
				new plaid.parser.ast.MetaGroupArgSpec {
					gp = this.translateAST(root.getGp());
					id = this.translateAST(root.getId());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.MetaType{ 
				new plaid.parser.ast.MetaType {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.MethodCall{ 
				new plaid.parser.ast.MethodCall {
					arguments = makeListFromJavaCollection(root.getArguments()).map(fn(a) => this.translateAST(a));
					hasArgs = root.getHasArgs();
					receiver = this.translateAST(root.getReceiver());
					methodId = this.translateAST(root.getMethodId());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Modifier{ 
				new plaid.parser.ast.Modifier {
					modiferKind = this.translateAST(root.getModiferKind());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.NewInstance{ 
				new plaid.parser.ast.NewInstance {
					st = this.translateAST(root.getSt());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.NominalObjectType{ 
				new plaid.parser.ast.NominalObjectType {
					permission = this.translateAST(root.getPermission());
					st = this.translateAST(root.getSt());
					metaTypes = makeListFromJavaCollection(root.getMetaTypes()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Operator{ 
				new plaid.parser.ast.Operator {
					operator = this.translateAST(root.getOperator());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.PatternCase{ 
				new plaid.parser.ast.PatternCase {
					pattern = this.translateAST(root.getPattern());
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Permission{ 
				new plaid.parser.ast.Permission {
					permissionKind = this.translateAST(root.getPermissionKind());
					datagroup = this.translateAST(root.getDatagroup());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.QualifiedIdentifier{ 
				new plaid.parser.ast.QualifiedIdentifier {
					ids = makeListFromJavaCollection(root.getIds()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Replace{ 
				new plaid.parser.ast.Replace {
					e = this.translateAST(root.getE());
					st = this.translateAST(root.getSt());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.Specifier{ 
				new plaid.parser.ast.Specifier {
					sk = this.translateAST(root.getSk());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.SplitBlock{ 
				new plaid.parser.ast.SplitBlock {
					datagroups = makeListFromJavaCollection(root.getDatagroups()).map(fn(a) => this.translateAST(a));
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StateChange{ 
				new plaid.parser.ast.StateChange {
					e = this.translateAST(root.getE());
					st = this.translateAST(root.getSt());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StateOp{ 
				new plaid.parser.ast.StateOp {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StateOpRemove{ 
				new plaid.parser.ast.StateOpRemove {
					name = this.translateAST(root.getName());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StateOpRename{ 
				new plaid.parser.ast.StateOpRename {
					from = this.translateAST(root.getFrom());
					to = this.translateAST(root.getTo());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StateRef{ 
				new plaid.parser.ast.StateRef {
					st = this.translateAST(root.getSt());
					specializations = makeListFromJavaCollection(root.getSpecializations()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.StringLiteral{ 
				new plaid.parser.ast.StringLiteral {
					value = root.getValue();
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.TypeParameter{ 
				new plaid.parser.ast.TypeParameter {
					id = this.translateAST(root.getId());
					caseof = this.translateAST(root.getCaseof());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.TypeParameterType{ 
				new plaid.parser.ast.TypeParameterType {
					name = this.translateAST(root.getName());
					metaArgsSpec = makeListFromJavaCollection(root.getMetaArgsSpec()).map(fn(a) => this.translateAST(a));
					qi = this.translateAST(root.getQi());
					metaArgs = makeListFromJavaCollection(root.getMetaArgs()).map(fn(a) => this.translateAST(a));
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.UnaryOperator{ 
				new plaid.parser.ast.UnaryOperator {
					e = this.translateAST(root.getE());
					operator = this.translateAST(root.getOperator());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.UnitLiteral{ 
				new plaid.parser.ast.UnitLiteral {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.UnitType{ 
				new plaid.parser.ast.UnitType {
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.UnpackInnerGroups{ 
				new plaid.parser.ast.UnpackInnerGroups {
					body = this.translateAST(root.getBody());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.VarDecl{ 
				new plaid.parser.ast.VarDecl {
					speccifier = this.translateAST(root.getSpeccifier());
					type = this.translateAST(root.getType());
					id = this.translateAST(root.getId());
					expr = this.translateAST(root.getExpr());
					token = createToken(root.getToken());
				}
			}
			case plaid.parser.ast.With{ 
				new plaid.parser.ast.With {
					r1 = this.translateAST(root.getR1());
					r2 = this.translateAST(root.getR2());
					token = createToken(root.getToken());
				}
			}
		}
	}
}
