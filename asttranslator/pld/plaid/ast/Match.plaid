package plaid.ast;

state Match case of Expression {
	val /*Token*/ token;
	val /*Expression*/ e;
	val /*List<Case>*/ caseList;

	method accept(v) {
		v.visitMatch(this)
	}
	
	method copy() {
		new Match {
			val /*Token*/ token = this.token;
			val /*Expression*/ e = this.e.copy();
			val /*List<Case>*/ caseList = this.caseList.map(fn (c) => c.copy());
		}
	}
	
	method immutable String toString()[immutable Match] {
		var caseString = "";
		this.caseList.map(fn (c) => caseString = caseString + " " + c.toString());
		"MATCH(" + this.e.toString() + "{ " + caseString + " })";
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable Match] {
		match (other) {
			case Match {
				match (this.caseList.length() == other.caseList.length()) {
					case True {
						var casesOk = true;
						(this.caseList.zip(other.caseList)).map(
							fn (p) => casesOk = casesOk && p.fst == p.snd
						);
						casesOk && this.e == other.e
					}
					case False { false }
				}
			}
			default { false }
		}
	}
}