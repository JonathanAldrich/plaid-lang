package plaid.ast;

import plaid.ast.types.*;

state ASTNode {
	var /*Set<Dependency>*/ dependencies = new None;
	var /*Integer*/ num = 0;
	
	val /*Token*/ token;
	 
	method accept(/*ASTVisitor*/ v);
	
	method /*ASTnode*/ copy();
	
	// start all expression as not knowing what type they are, 
	// the typechecker will fill these values in by changing
	// the state of this field.
	val /*unique PlaidType*/ type = new UncheckedType;
	
	method /*String*/ eTypeString() {
	    match (this.type) {
    		case PermType {
    			" : " + this.type.toString();
    		}
    		case MethodType {
    			" : " + this.type.toString();
    		}
    		case FieldType {
    			" : " + this.type.toString();
    		}
    		case ErrorType {
    			" ** TYPING ERROR: " + this.type.errorMsg + "**";
			}
    		default { "" }
    	}
	}
}