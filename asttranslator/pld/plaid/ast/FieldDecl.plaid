package plaid.ast;

state FieldDecl case of Decl {
	val /*Token*/ token;
	val /*ID*/ f;
	val /*Expression*/ e;
	val /*boolean*/ abstractField;
	val /*boolean*/ immutableField;
	val /*boolean*/ overrides;
	val /*FieldType*/ fieldType;


	method accept(v) {
		v.visitFieldDecl(this)
	}
	
	method getName() {
		this.f.name
	}
	
	method copy() {
		new FieldDecl {
			val /*Token*/ token = this.token;
			val /*ID*/ f = this.f.copy();
			val /*Expression*/ e = this.e.copy();
			val /*boolean*/ abstractField = this.abstractField;
			val /*boolean*/ immutableField = this.immutableField;
			val /*boolean*/ overrides = this.overrides;
			val /*FieldType*/ fieldType = this.fieldType; //TODO: need to copy types?
		}
	}
	
	method immutable String toString()[immutable FieldDecl] {
		val ab = match (this.abstractField) { case True { "(A) " } case False { "" } };
		val im = match (this.immutableField) { case True { "val " } case False { "var " } };
		val or = match (this.overrides) { case True { "overrides " } case False { "" } };
		ab + or + im + fieldType.binding.toString() + " " + f.name + " = " + e.toString()
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable FieldDecl] {
		match (other) {
			case FieldDecl {
				this.f == other.f && this.e == other.e && this.fieldType == other.fieldType &&
				this.abstractField == other.abstractField && this.immutableField == other.immutableField &&
				this.overrides == other.overrides
			}
			default { false }
		}
	} 
}