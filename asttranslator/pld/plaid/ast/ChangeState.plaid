package plaid.ast;

state ChangeState case of Expression {
	val /*Token*/ token;
	val /*Expression*/ e;
	val /*State*/ s;
	
	method accept(v) {
		v.visitChangeState(this)
	}
	
	method copy() {
		new ChangeState {
			val /*Token*/ token = this.token;
			val /*Expression*/ e = this.e.copy();
			val /*State*/ s = this.s.copy();
		}
	}
	
	method immutable String toString()[immutable ChangeState] {
		"SC(" + this.e.toString() + " <- " + this.s.toString() + ")"
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable ChangeState] {
		match (other) {
			case ChangeState {
				this.e == other.e && this.s == other.s && this.objectType == other.objectType
			}
			default { false }
		}
	}
}