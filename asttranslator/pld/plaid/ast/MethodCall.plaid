package plaid.ast;

state MethodCall case of Expression {
	val /*Token*/ token;
	val /*Expression*/ receiver;
	val /*ID*/ methodName;
	val /*List<Expression>*/ arguments;
	var /*Boolean*/ isTailCall = false;
	
	method accept(v) {
		v.visitMethodCall(this)
	}
	
	method copy() {
		new MethodCall {
			val /*Expression*/ receiver = this.receiver.copy();
			val /*ID*/ methodName = this.methodName.copy();
			val /*Expression*/ arguments = this.arguments.map(fn (a) => a.copy());
			val /*Token*/ token = this.token;
			override var /*Boolean*/ isTailCall = this.isTailCall;
		}
	}
	
	method immutable String toString()[immutable MethodCall] {
		"CALL(" + this.receiver.toString() + "." + this.methodName.name + "(" + this.arguments.toString() + ")"
	}	
	
	method immutable Boolean ==(immutable ASTNode other) [immutable MethodCall] {
		match (other) {
			case MethodCall {
				this.receiver == other.receiver && this.methodName == other.methodName &&
					this.arguments == other.arguments && this.isTailCall == other.isTailCall && this.objectType == other.objectType
			}
			default { false }
		}
	}

}