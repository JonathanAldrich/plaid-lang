package plaid.ast;

state PermTypeAnnotation case of Annotation {
	val immutable PermType pType;
	
	method immutable Boolean equalAnnotation(immutable Annotation other)[immutable PermTypeAnnotation] {
		match (other) {
			case PermTypeAnnotation { this.pType == other.pType }
			default { false }
		}
	}
	
	method immutable String annotationString()[immutable PermTypeAnnotation] {
		" : " + this.pType.toString() + " "
	}	
	
	method unique Binding getBinding()[immutable PermTypeAnnotation] {
		match(this) {
			case BorrowBinding {
				val immutable Permission lb = match(this) {
					case NoLowerBound { NONEP }
					case LowerBound { this.lowerBound }
				};
				val immutable Permission sbFlag = match(this) {
					case StrongBorrow { true }
					case NotStrongBorrow { false }
				};
				createBorrowType(this.pType.perm, this.pType.type.copy(), lb, sbFlag)
				
			}
			default { //TakeBinding or LetBinding
				createTakeType(this.pType.perm, this.pType.type.copy())
			}
		}
	}
}