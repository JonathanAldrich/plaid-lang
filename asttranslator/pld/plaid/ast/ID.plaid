package plaid.ast;

state ID case of Expression {
	val /*Token*/ token;
	val /*String*/ name;
	val /*boolean*/ isTemp = false; //useful for managing the context in the typechecker, potentially
	
	method accept(v) {
		v.visitID(this)
	}
	
	method hashCode() {
		this.name.hashCode();
	}
	
	method copy() {
		new ID {
			val /*Token*/ token = this.token;
			val /*String*/ name = this.name;
			override val /*Boolean*/ isTemp = this.isTemp;
		}
	}
	
	method immutable String toString() {
		val temp = match(isTemp) { case True { "t-" } case False { "" } };
		"ID(" + temp + this.name + ")";
	}

	method immutable Boolean ==(immutable ASTNode other)[immutable ID] {
		match (other) {
			case ID {
				match (this.isTemp == other.isTemp) {
					case True {
						this.isTemp || this.name.equals(other.name)  //if temporary, don't worry about names, otherwise do.
					}
					case False { false }
				}	
			}
			default { false }
		}
	}
}