package plaid.ast;

state StateDecl case of ASTNode {
	val /*Token*/ token;
	val /*ID*/ name;
	val /*State*/ stateDef;
	val /*Option QI*/ caseOf;
	val /*boolean*/ isCaseOf;
	val /*StateType*/ stateType = new UncheckedType; //TODO: fix me;
    val /*List<MetaParameter> */ metaParams;
    val /*List<MetaArgument> */ metaCaseOfArgs;

	method accept(v) {
		v.visitStateDecl(this)
	}
	
	method getName() {
		this.name.name
	}
	
	method copy() {
		new StateDecl {
			val /*Token*/ token = this.token;
			val /*ID*/ name = this.name.copy();
			val /*State*/ stateDef = this.stateDef.copy();
			val /*Option QI*/ caseOf = (fn () => {
				match (this.caseOf) {
					case Some { createSome(this.caseOf.copy()) }
					case None { NONE }
				}
			}) ();
			val /*boolean*/ isCaseOf = this.isCaseOf;
			val /*StateType*/ stateType = this.stateType;
			val /*List<MetaParameter>*/ metaParams = this.metaParams;
			val /*List<MetaArgument>*/ metaCaseOfArgs = this.metaCaseOfArgs;
		}	
	}
	
	method immutable String toString()[immutable StateDecl] {
		val caseOf = match(this.caseOf) { case Some { "case of " + this.caseOf.value.toString() + " " } case None { "" } };
		"state " + this.name.name + " " + caseOf + "= " + this.stateDef.toString()
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable StateDecl] {
		match (other) {
			case StateDecl {
				val caseOk = match (this.caseOf) {
					case Some {
						match (other.caseOf) {
							case Some { this.caseOf.value == other.caseOf.value }
							case None { false }
						}
					}
					case None {
						match (other.caseOf) {
							case Some { false }
							case None { true }
						}
					}
				};
				caseOk && this.name.equals(other.name) && this.stateDef == other.stateDef // TODO : add && this.stateTeyp == other.stateType
			}
			default { false }
		}
	}
	
}