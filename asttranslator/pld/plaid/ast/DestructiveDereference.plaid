package plaid.ast;

state DestructiveDereference case of Expression {
	val /*Token*/ token;
	val /*Expression*/ left;
	val /*ID*/ right;

	method accept(v) {
		v.visitDestructiveDereference(this)
	}
	
	method copy() {
		new Dereference {
			val /*Token*/ token = this.token;
			val /*Expression*/ left = this.left.copy();
			val /*ID*/ right = this.right.copy();
		}
	}	
	
	method immutable String toString()[immutable DestructiveDereference] {
		"DEREF(" + left.toString() + "!" + right.name + ")"
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable Dereference] {
		match (other) {
			case DestructiveDereference {
				this.left == other.left && this.right == other.right
			}
			default { false }
		}
	}
}