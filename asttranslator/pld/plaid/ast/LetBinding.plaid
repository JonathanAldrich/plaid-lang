package plaid.ast;

state LetBinding case of Binding {
	method void toTake()[unique LetBinding >> unique TakeBinding]
		{ this <- TakeBinding } 
	
	method void toBorrow()[unique LetBinding >> unique BorrowBinding]
		{ 	
			this <- BorrowBinding;
			this <- NoLowerBound with NotStrongBorrow;
		}
		
	method void accept(unique ASTVisitor v) {
		v.visitLetBinding(this);
	}	
	
	method unique LetBinding copy() {
		this.updatePreserveStates(this.exp.copy(),this.body.copy());
	}
	
	method unique LetBinding updatePreserveStates(unique Expression >> void newExp, unique Expression >> void newBody) {
		val copy = this.updateBindingPreserveStates(newExp, newBody);
		copy <- LetBinding;
		copy
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable LetBinding] {
		match(other) {
			case LetBinding { this.equalBinding(other) } //&& this.objectType == other.objectType }
			default { false }
		}
	}
	
	method immutable String toString()[immutable TakeBinding] {
		"Let " + this.bindingString()
	}
}