package plaid.ast;

state Binding case of Expression = {
	val immutable Token token;
	val unique ID x;
	val unique Expression exp;
	val unique Expression body;
	val immutable Boolean mutable;
	
	method void accept();
	
	method unique Binding copy();
	
	method unique Binding updatePreserveStates(unique Expression >> void newExp, unique Expression >> void newBody);
	
	method unique Binding copyBinding() {
		this.updateBindingPreserveStates(this.exp.copy(), this.body.copy());
	}
	
	method unique Binding updateBindingPreserveStates(unique Expression >> void newExp, unique Expression >> void newBody) {
		val copy = makeBinding(this.token, this.x.copy(), newExp, newBody, this.mutable);
		match (this) {
			case NoTypeAnnotation { copy <- NoTypeAnnotation }
			case ObjectTypeAnnotation { copy <- ObjectTypeAnnotation { val oType = this.oType.copy(); } }
			case PermTypeAnnotation { copy <- PermTypeAnnotation { val pType = this.pType.copy(); } }
		};
		copy
	}
	
	method immutable Boolean equalBinding(immutable Binding other)[immutable Binding] {
		this.x == other.x  &&
		this.exp == other.exp &&
		this.body == other.body &&
		this.mutable == other.mutable 
//		&& this.equalAnnotation(other)	//TODO add this back
	}
	
	method immutable String bindingString()[immutable Binding] {
		x.toString() + this.annotationString() + "= " + this.exp.toString() + " in " + body.toString() 
	}
	
} with Annotation