package plaid.ast.visitor;

import plaid.ast.*;

state PrintVisitor case of ASTVisitor {
	var indent = 0;
	
	method output(s) {
		var i = 0;
		while { i < this.indent; } {
			java.lang.System.out.print("    ");
			i = i + 1
		};
		java.lang.System.out.println(s);
	}
	
	method inc() {
		this.indent = this.indent + 1
	}
	
	method dec() {
		this.indent = this.indent - 1
	}
	
	method visitApplication(node) {
		this.output("Application");
		this.inc();
		node.f.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
		this.dec();
	}
	
	method visitAssignment(node) {
		this.output("Assignment");
		this.inc();
        match (node.target) {
            case plaid.lang.Some {
			    node.target.value.accept(this);
            }
            default {}
		};
		node.field.accept(this);
		node.value.accept(this);
		this.dec();		
	}
	
	method visitCase(node) {
		this.output("Case");
		this.inc();
		node.qi.accept(this);
		node.x.accept(this);
		node.e.accept(this);
		this.dec();
	}
	
	method visitChangeState(node) {
		this.output("ChangeState");
		this.inc();
		node.e.accept(this);
		node.s.accept(this);
		this.dec();
	}
	
	method visitCompilationUnit(node) {
		this.output("CompilationUnit");
		this.inc();
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		node.imports.accept(this);
		this.dec();
	}
	
	method visitDeclList(node) {
		this.output("DeclList");
		this.inc();
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		this.dec();
	}
	
	method visitDereference(node) {
		this.output("Dereference");
		this.inc();
		node.left.accept(this);
		node.right.accept(this);
		this.dec();
	}

	method visitDestructiveDereference(node) {
		this.output("DestructiveDereference");
		this.inc();
		node.left.accept(this);
		node.right.accept(this);
		this.dec();
	}
	
	method visitDoubleLiteral(node) {
        this.output("DoubleLiteral(" + node.double + ")");
    }
    
	method visitFieldDecl(node) {
		this.output("FieldDecl");
		this.inc();
		node.f.accept(this);
		node.e.accept(this);
		this.dec();
	}
	
	method visitID(node) {
		this.output("ID(" + node.name + ")");
	}
	
	method visitImportList(node) {
		this.output("ImportList");
	}
	
	method visitIntLiteral(node) {
		this.output("IntLiteral(" + node.integer + ")");
	}
	
	method visitLambda(node) {
		this.output("Lambda");
		this.inc();
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
		this.dec();
	}
	
	method visitLetBinding(node) {
		this.output("LetBinding");
		this.inc();
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
		this.dec();
	}
	
	method visitMatch(node) {
		this.output("Match");
		this.inc();
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this)
		});
		this.dec();
	}
	
	method visitMethodCall(node) {
		this.output("MethodCall(***print better info***)");
	}
	
	method visitMethodDecl(node) {
		this.output("MethodDecl(" + node.name + ")");
		this.inc();
		node.methodType.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this);
		this.dec();
	}
	
//	method visitMethodTypeDecl(node) {
//		this.output("MethodTypeDecl(" + node.name.name + ")");
//		this.inc();
//		node.retPermType.accept(this);
//		node.argTypes.map(fn (argType) => {
//			argType.accept(this)
///		});
//		node.argNames.map(fn (argName) => {
//			argName.accept(this)
//		});
//		this.dec();
//	}
	
	method visitMethodInvocation(node) {
		this.output("MethodInvocation");
		this.inc();
		node.obj.accept(this);
		node.function.accept(this);
		node.arg.accept(this);
		this.dec();
	}
	
	method visitNewInstance(node) {
		this.output("NewInstance");
		this.inc();
		node.s.accept(this);
		this.dec();
	}
	
	method visitPermType(node) {
		this.output("PermType");
	}
	
	method visitQI(node) {
		this.output("QI");
	}
	
	method visitStateDecl(node) {
		this.output("StateDecl");
		this.inc();
		node.name.accept(this);
		node.stateDef.accept(this);
		match (node.caseOf) {
            case plaid.lang.Some {
			    node.caseOf.value.accept(this);
            }
            default {}
		};
		this.dec();
	}
	
	method visitStringLiteral(node) {
		this.output("StringLiteral('" + node.string + "')");
	}
	
	method visitUnitLiteral(node) {
		this.output("UnitLiteral");
	}
	
	method visitWith(node) {
		this.output("With");
		this.inc();
		node.s1.accept(this);
		node.s2.accept(this);
		this.dec();
	}
}