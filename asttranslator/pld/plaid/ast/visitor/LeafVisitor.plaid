package plaid.ast.visitor;

state LeafVisitor case of ASTVisitor {
	method visitAnnotatedLetBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this);
	}
	
	method visitApplication(node) {
		node.f.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
	}
	
	method visitAssignment(node) {
		match (node.target) {
			case Some {
				node.target.value.accept(this);
			}
			default {}
		};
		node.field.accept(this);
		node.value.accept(this)		
	}
	
	method visitCase(node) {
		match (node.qi) {
			case Some {
				node.qi.value.accept(this);
			}
			case None { }
		};
		match (node.x) {
			case Some {
				node.x.value.accept(this);
			}
			case None { }
		};
		node.e.accept(this)
	}
	
	method visitCast(node) {
		match (node.theVar) {
			case Some {
				node.theVar.value.accept(this);
			}
			case None {}
		};
		node.body.accept(this);
	}
	
	method visitChangeState(node) {
		node.e.accept(this);
		node.s.accept(this)
	}
	
	method visitCompilationUnit(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		node.imports.accept(this)
	}
	
	method visitDeclList(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
	}
	
	method visitDereference(node) {
		node.left.accept(this);
		node.right.accept(this)
	}
	
	method visitDestructiveDereference(node) {
		node.left.accept(this);
		node.right.accept(this)
	}
  
    method visitDoubleLiteral(node) {
    }
	
	method visitFieldDecl(node) {
		node.f.accept(this);
		node.e.accept(this)
	}
	
	method visitID(node) {
	}
	
	method visitImportList(node) {
//		node.imports.map(fn (im) => {
//			im.accept(this)
//		});
	}
	
	method visitIntLiteral(node) {
	}
	
	method visitJoin(node) {
		node.theVar.accept(this);
		node.body.accept(this);
	}
	
	method visitLambda(node) {
		node.arguments.map(fn (a) => a.accept(this));
		node.body.accept(this)
	}
	
	method visitLetBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this)
	}
	
	method visitMatch(node) {
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this)
		});
	}
	
	method visitMethodCall(node) {
		node.receiver.accept(this);
		node.methodName.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
	}
	
	method visitMethodDecl(node) {
		node.body.accept(this);
		node.arguments.map(fn (a) => a.accept(this));
	}
	
	method visitNewInstance(node) {
		node.s.accept(this)
	}
	
	method visitPermType(node) {
	}
	
	method visitQI(node) {
		match (node.initState) {
			case Some {
				node.initState.value.accept(this);
			}
			case None { }
		}
	}
	
	method visitsplitPerm(node) {
		node.theVar.accept(this);
		node.body.accept(this);
	}
	
	method visitStateDecl(node) {
		node.name.accept(this);
		node.stateDef.accept(this);
		match (node.caseOf) {
			case Some {
				node.caseOf.value.accept(this);
			}
			default {}
		};
	}
	
	method visitStringLiteral(node) {
	}
	
	method visitUnitLiteral(node) {
	}
	
	method visitWith(node) {
		node.s1.accept(this);
		node.s2.accept(this)
	}
}