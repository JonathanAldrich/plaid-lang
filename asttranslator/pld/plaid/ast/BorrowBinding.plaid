package plaid.ast;

state BorrowBinding case of Binding = {
	method void accept(unique ASTVisitor v) {
		v.visitBorrowBinding(this);
	}
	
	method unique BorrowBinding copy() {
		this.updatePreserveStates(this.exp.copy(),this.body.copy());
	}
	
	method unique BorrowBinding updatePreserveStates(unique Expression >> void newExp, unique Expression >> void newBody) {
		val copy = this.updateBindingPreserveStates(newExp, newBody);
		copy <- BorrowBinding;
		match (this) {
			case NoLowerBound { copy <- NoLowerBound }
			case LowerBound { copy <- LowerBound { val lowerBound = this.lowerBound; } }
		};
		match (this) {
			case NotStrongBorrow { copy <- NotStrongBorrow }
			case StrongBorrow { copy <- StrongBorrow }
		};
		copy
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable BorrowBinding] {
		match(other) {
			case BorrowBinding { this.equalBinding(other) && this.equalLowerBound(other) && this.objectType == other.objectType }
			default { false }
		}
	}
	
	method immutable String toString()[immutable TakeBinding] {
		
		val sbFlag = match (this) { case StrongBorrow { "Strong" } case NotStrongBorrow { "" } };
		sbFlag + "Borrow(" + this.lowerBoundString() + ") " + this.bindingString()
	}

} with PermLowerBound with Aliasing