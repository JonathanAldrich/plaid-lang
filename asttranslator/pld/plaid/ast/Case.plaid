package plaid.ast;

import plaid.ast.types.UncheckedType;

state Case case of ASTNode {
	val /*Token*/ token;
	val /*Option QI*/ qi;
	val /*Option ID*/ x;
	val /*Expression*/ e;
	val /*boolean*/ defaultCase;
	val /*boolean*/ boundVar;
	val /*PermType*/ type = new UncheckedType;
	
	method /*String*/ eTypeString() {
	    match (this.type) {
    		case PermType {
    			" : " + this.type.toString();
    		}
    		case MethodType {
    			" : " + this.type.toString();
    		}
    		case FieldType {
    			" : " + this.type.toString();
    		}
    		default { "" }
    	}
	}

	method accept(v) {
		v.visitCase(this)
	}
	
	method copy() {
		new Case {
			val /*Token*/ token = this.token;
			val /*Option QI*/ qi = (fn () => {
				match (this.qi) {
					case Some { createSome(this.qi.value.copy())}
					case None { NONE }
				}
			}) ();
			val /*Option ID*/ x = (fn () => {
				match (this.x) {
					case Some { createSome(this.x.value.copy())}
					case None { NONE }
				}
			}) ();
			val /*Expression*/ e = this.e.copy();
			val /*boolean*/ defaultCase = this.defaultCase;
			val /*boolean*/ boundVar = this.boundVar;
		}
	}
}