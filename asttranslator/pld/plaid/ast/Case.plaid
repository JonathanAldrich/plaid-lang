package plaid.ast;

import plaid.ast.types.UncheckedType;

state Case case of ASTNode {
	val /*Token*/ token;
	val /*Option QI*/ qi;
	val /*Option ID*/ x;
	val /*Expression*/ e;
	val /*boolean*/ defaultCase;
	val /*boolean*/ boundVar;

	method accept(v) {
		v.visitCase(this)
	}
	
	method copy() {
		new Case {
			val /*Token*/ token = this.token;
			val /*Option QI*/ qi = (fn () => {
				match (this.qi) {
					case Some { createSome(this.qi.value.copy())}
					case None { NONE }
				}
			}) ();
			val /*Option ID*/ x = (fn () => {
				match (this.x) {
					case Some { createSome(this.x.value.copy())}
					case None { NONE }
				}
			}) ();
			val /*Expression*/ e = this.e.copy();
			val /*boolean*/ defaultCase = this.defaultCase;
			val /*boolean*/ boundVar = this.boundVar;
		}
	}
	
	method immutable String toString()[immutable Case] {
		val caseOf = match (this.qi) {
			case Some { this.qi.value.toString() }
			case None { "default" }
		};
		val boundVar = match (this.x) {
			case Some { this.x.value.toString() + " : " }
			case None { "" }
		};
		"CASE(" + boundVar + caseOf + " { " + this.e.toString() + " })"  
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable Case] {
		match(other) {
			case Case {
				val qiOk = match (this.qi) {
					case Some {
						match(other.qi) {
							case Some { this.qi.value == other.qi.value }
							case None { false }
						}
					}
					case None{
						match(other.qi) {
							case Some { false }
							case None { true }
						}
					}
				};
				val varOk = match (this.x) {
					case Some {
						match(other.x) {
							case Some { this.x.value == other.x.value }
							case None { false }
						}
					}
					case None{
						match(other.x) {
							case Some { false }
							case None { true }
						}
					}
				};
				qiOk && varOk && this.e == other.e && 
					this.defaultCase == other.defaultCase &&
					this.boundVar == other.boundVar
			}
			default { false }
		}
	}
}