package plaid.ast;

state Application case of Expression {
	val /*Token*/ token;
	val /*Expression*/ f;
	val /*List<Expression>*/ arguments;
	var /*Boolean*/ isTailCall = false;
	
	method accept(v) {
		v.visitApplication(this)
	}
	
	method copy() {
		new Application {
			val /*Token*/ token = this.token;
			val /*Expression*/ f = this.f.copy();
			val /*Expression*/ arguments = this.arguments.map(fn (a) => a.copy());
			override var /*Boolean*/ isTailCall = this.isTailCall;
		}
	}
	
	method immutable Boolean equals(immutable ASTNode other)[immutable Application] {
		match (other) {
			case Application {
				this.f.equals(other.f) &&
				(ifElse (this.arguments.length() == other.arguments.length() ) 
				{
					this.arguments.zip(this.arguments, other.arguments).foldr(fn (c, p) => {
						ifElse (c) 
							{ p.fst.equals(p.snd) } 
							{ false }
					})
				} { false })
			}
			default { false }
		}
	}
	
	method immutable String toString()[immutable Application] {
		var argList = this.arguments.foldl(fn (e, c) => {c + e.toString() + ", " }, "");
		if (argList.length() > 0) { argList = argList.substring(0,argList.length() - 2) };
		"APP(" + this.f.toString() + ") (" + argList + ")"
	}
}