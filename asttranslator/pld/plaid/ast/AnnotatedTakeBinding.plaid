package plaid.ast;

state AnnotatedTakeBinding case of AnnotatedBinding {
	method void accept(/* ??? ASTVisitor */ v) {
		v.visitAnnotatedLetBinding(this);
	}
	
	method unique AnnotatedTakeBinding copy() {
		new AnnotatedTakeBinding {
			val immutable Token token = this.token;
			val unique ID x = this.x.copy();
			val unique Expression exp = this.exp.copy();
			val unique Expression body = this.body.copy();
			val immutable Boolean mutable = this.mutable;
			val immutable TypeBinding annotation = this.annotation;  //TODO: do I need to make new objects for types?
		}
	}
	
	method immutable Boolean equals(immutable ASTNode other)[immutable AnnotatedTakeBinding] {
		match(other) {
			case AnnotatedTakeBinding {
				this.equalBinding(other) &&
				this.annotation.equals(other.annotation)
			}
			default { false }
		}
	}
}