package plaid.ast;

state Lambda case of Expression {
	val /*Token*/ token;
	val /*List<ID>*/ arguments;
	val /*Expression*/ body;
	val /*LambdaType*/ lambdaType;
	var /*Option ID*/ recursiveName;

	method accept(v) {
		v.visitLambda(this)
	}
	
	method copy() {
		new Lambda {
			val /*Token*/ token = this.token;
			val /*List<ID>*/ arguments = this.arguments.map(fn (a) => a.copy());
			val /*Expression*/ body = this.body.copy();
			val /*LambdaType*/ lambdaType = this.lambdaType;
			var /*Option ID*/ recursiveName = 
				match (this.recursiveName) {
					case Some {
						createSome(this.recursiveName.value)
					}
					case None {
						NONE;
					}
				};
		}
	}
}