package plaid.ast;

state Lambda case of Expression {
	val /*Token*/ token;
	val /*List<ID>*/ arguments;
	val /*Expression*/ body;
	val /*LambdaType*/ lambdaType;
	var /*Option ID*/ recursiveName;

	method accept(v) {
		v.visitLambda(this)
	}
	
	method copy() {
		new Lambda {
			val /*Token*/ token = this.token;
			val /*List<ID>*/ arguments = this.arguments.map(fn (a) => a.copy());
			val /*Expression*/ body = this.body.copy();
			val /*LambdaType*/ lambdaType = this.lambdaType;
			var /*Option ID*/ recursiveName = 
				match (this.recursiveName) {
					case Some {
						createSome(this.recursiveName.value)
					}
					case None {
						NONE;
					}
				};
		}
	}
	
	method immutable String toString()[immutable Lambda] {
		var args = this.arguments.zip(this.lambdaType.argTypes).map(fn(p) => p.snd.toString() + " " + p.fst.name).toString(); 
		val it = this.lambdaType.environmentTypes.keySet().iterator();
		var envString = "";
		while { it.hasNext() } {
			val key = it.next();
			envString = envString + ", " + this.lambdaType.environmentTypes.get(key).toString() + " " + key.toString();
		};
		"fn (" + args + ")[" + envString + "] : " + this.lambdaType.returnType.toString() + " => {" + this.body.toString() + "}" 
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable Lambda] {
		match (other) {
			case Lambda {
				this.arguments == other.arguments && this.body == other.body &&
					this.lambdaType == other.lambdaType && this.recursiveName == other.recursiveName && this.objectType == other.objectType
			}
			default { false }
		}
	}
}