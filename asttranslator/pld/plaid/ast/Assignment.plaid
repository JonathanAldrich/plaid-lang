package plaid.ast;

state Assignment case of Expression {
	val /*Token*/ token;
	val /*Option Expression */ target;
	val /*ID*/ field;
	val /*Expression*/ value;
	
	method accept(v) {
		v.visitAssignment(this)
	}
	
	method copy() {
		new Assignment {
			val /*Token*/ token = this.token;
			val /*Option Expression */ target = (fn () => {
				match (this.target) {
					case Some { createSome(this.target.value.copy()) }
					case None { NONE }
				}
			}) ();
			val /*ID*/ field = this.field.copy();
			val /*Expression*/ value = this.value.copy();
		}
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable Assignment] {
		match (other) {
			case Assignment {
				val targetOk = match(this.target) {
					case Some {
						match (other.target) {
							case Some { this.target.value == other.target.value }
							case None { false }
						}
					}
					case None {
						match (other.target) {
							case Some { false }
							case None { true }
						}
					}
				};
				targetOk && this.field == other.field && this.value == other.value	
			}
			default { false }
		}
	}
	
	method immutable String toString()[immutable Assignment] {
		val receiverString = match (this.target) { 
			case Some { this.target.value.toString() + "." } 
			case None { "" } 
		};
		"ASGN(" + receiverString + this.field.toString() + " = " + this.value.toString() + ")"
	}
}