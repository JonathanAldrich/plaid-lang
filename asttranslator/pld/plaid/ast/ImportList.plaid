package plaid.ast;

state ImportList case of ASTNode {
	val /*List<QualifiedID>*/ imports;
	val /*Token*/ token;
	
	method accept(v) {
		v.visitImportList(this)
	}
	
//	method checkAndExpandImports(/*PackageRep*/ plaidpath, /*List<String>*/ declMembers, /*String*/ thePackage) {
//		//currently only expand the import, but dosn't do check 
//		var fromPackage = java.util.HashMap.new();
//		var fromStar = java.util.HashMap.new();
//		var duplicateStarMembers = java.util.ArrayList.new();
//		var javaPackages = java.util.ArrayList.new();
//		
//		imports.map(fn(x) => {
//			var /*String*/ theImport = x.toString();
//						
//			//if (!theImport.contains(".") || theImport.endsWith(".")) throw new RuntimeException("malformed import " + theImport);
//			
//			var packageName = theImport.substring(0, theImport.lastIndexOf("."));
//			var memberName = theImport.substring(theImport.lastIndexOf(".") + 1);
//			
//			ifElse (memberName.equals("*")) {
//				var /*List<MemberRep>*/ pMembers = plaidpath.getPackageMembers(theImport.substring(0, theImport.length() - 2));
//				
//				match (pMembers) {
//					case Some {								
//						val iter = pMembers.iterator();
//						while {iter.hasNext();} {
//							var m = iter.next();
//						};
//					
//						memberName = m.getName();
//						ifElse (declMembers.contains(memberName)) {
//							//do nothing - do not import members defined in this decl except for from the current package (below)
//						} {
//							ifElse (fromPackage.containsKey(memberName)) {
//								ifElse (fromStar.get(memberName)) { //indicate that we have duplicate star imports
//									duplicateStarMembers.add(memberName);
//									fromPackage.put(memberName,fromPackage.get(memberName) + ";" + packageName);
//								} {
//									//do nothing - explicit import takes precedence
//								}
//							} {
//								fromPackage.put(memberName, packageName);
//								fromStar.put(memberName, true); //could be overriden by explicit import later
//							}
//						} 
//					}
//					default {
//						//todo: check
//						javaPackages.add(theImport);		
//					}
//				}
//			} {
//				//if (declMembers.contains(memberName))
//				//	throw new RuntimeException("Member " + memberName + " explicitly imported into a compilation unit where it is also defined.");
//				//if (fromPackage.containsKey(memberName) && fromStar.get(memberName) == false) {
//				//	throw new RuntimeException("Member " + memberName + " explicitly imported from both " + 
//				//			packageName + " and " + fromPackage.get(memberName) + ".");					
//				//}
//				
//				fromPackage.put(memberName, packageName);
//				fromStar.put(memberName, false);
//				duplicateStarMembers.remove(memberName); //made explicit - remove if looked ambiguous earlier
//			}
//		});
//		
//		//import packagemembers including those declared in this compilation unit
//		
//		iter = plaidpath.getPackageMembers(thePackage).iterator();		
//		while {iter.hasNext()} {
//			m = iter.next();
//			var member = m.getName();
//			ifElse (fromPackage.containsKey(member)) {
//				ifElse (fromStar.get(member)) {
//					fromPackage.put(member, thePackage);
//				} {
//					//Do nothing - explicit import does override package declaration
//				}				
//			} {
//				fromPackage.put(member, thePackage);
//			}
//		};
//
//		//create new import list, order doesn't matter since all of the imported members have unique names
//		imports = java.util.ArrayList.new();
//		
//		iter = fromPackage.keySet().iterator();
//		while {iter.hasNext()} {
//			var nid = plaid.compiler.java.QualifiedID.new(fromPackage.get(member) + "." + member,  ".");	//not sure right
//			imports.add(nid);
//		};
//		
//		iter = javaPackages.iterator();
//		while {iter.hasNext()} {
//			nid = plaid.compiler.java.QualifiedID.new( javaPackage, "." );	//not sure right
//			imports.add(nid);	
//		}
//	}
	
	method copy() {
		new ImportList {
			val /*List<QualifiedID>*/ imports = this.imports.map(fn (qi) => qi.copy());
			val /*Token*/ token = this.token;
		}
	}
}