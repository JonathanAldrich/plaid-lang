package plaid.ast;

state MethodDecl case of ASTNode {
	val /*Token*/ token;
	val /*String*/ name;
	val /*Expression*/ body;
	val /*List<ID>*/ arguments;
	val /*boolean*/ abstractMethod;
	val /*boolean*/ overrides;
	val /*MethodType*/ methodType;

	method accept(v) {
		v.visitMethodDecl(this)
	}
	
	method getName() {
		this.name
	}
	
	method /*boolean*/ hasArg() {
		match (arg) {
			case Some {
				true;
			}
			case None {
				false;
			}
		}
	}	
	
	method copy() {
		new MethodDecl {
			val /*Token*/ token = this.token;
			val /*String*/ name = this.name;
			val /*Expression*/ body = this.body.copy();
			val /*List<ID>*/ arguments = this.arguments.map(fn (a) => a.copy());
			val /*boolean*/ abstractMethod = this.abstractMethod;
			val /*boolean*/ overrides = this.overrides;
			val /*MethodType*/ methodType = this.methodType;
		}
	}
	
	method immutable String toString()[immutable MethodDecl] {
		val ab = match (this.abstractField) { case True { "(A) " } case False { "" } };
		val or = match (this.overrides) { case True { "overrides " } case False { "" } };
		var args = this.arguments.zip(this.methodType.argTypes).toString();
		val it = this.environmentTypes.keySet().iterator();
		var envString = "";
		while { it.hasNext() } {
			val key = it.next();
			envString = envString + ", " + this.environmentTypes.get(key).toString() + " " + key.toString();
		};
		ab + or + "method " + this.methodType.returnType.toString() + " " + 
			name + "(" + args + ")[" + this.methodType.receiverType.toString() + envString + "] {" + this.body.toString() + "}"
	}
	
	method immutable Boolean ==(immutable ASTNode other)[immutable MethodDecl] {
		match (other) {
			case MethodDecl {
				this.arguments == other.arguments && this.name.equals(other.name) && this.body == other.body &&
					this.abstractMethod == other.abstractMethod && this.overrides == other.overrides &&
					this.methodType == other.methodType
			}
			default { false }
		}
	}
	
}