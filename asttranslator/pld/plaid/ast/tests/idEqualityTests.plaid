package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val idEqualityTests = fn () => {
	
	var res = unit;
	var n1 = unit;
	var n2 = makeDefaultCase(makeToken(), makeID(makeToken(),"x"));
	
	
	//Testing ID equality	
	System.out.println("Testing ID equality");
	n1 = makeTempID(makeToken(),"test1");
	testName("IDs are not equal to other ast node types");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	
	n2 = makeTempID(makeToken(),"test2");
	testName("temp IDs are always equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID(makeToken(),"test1");
	n2 = makeID(makeToken(),"test1");
	testName("IDs with the same name are equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID(makeToken(),"test1");
	n2 = makeID(makeToken(),"test2");
	testName("IDs with different names are not equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	System.out.println("");
};