package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val caseEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	val qid1 = makeEmptyList(); qid1.add("path1");
	val qi1 = makeQI(makeToken(),qid1, new None);
	val qid2 = makeEmptyList(); qid2.add("path2");
	val qi2 = makeQI(makeToken(),qid2,new None);

	//******TESTING Case******
	System.out.println("Testing Case equality");
	n1 = makeDefaultCase(makeToken(),makeID(makeToken(),"d"));
	testName("Case not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeCase(makeToken(), createSome(qi2), new None, makeID(makeToken(),"d"));
	testName("One cannot be a default case and the other not");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeCase(makeToken(), createSome(qi1), new None, makeID(makeToken(),"d"));
	testName("must be the same case");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeCase(makeToken(), new None, createSome(makeID(makeToken(),"x")), makeID(makeToken(),"c"));
	n2 = makeCase(makeToken(), new None, new None, makeID(makeToken(),"c"));
	testName("must both have bound variables or not");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeCase(makeToken(), new None, createSome(makeID(makeToken(),"y")), makeID(makeToken(),"c"));
	testName("must both have the same bound variable");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeCase(makeToken(), new None, createSome(makeID(makeToken(),"x")), makeID(makeToken(),"c2"));
	testName("must both have the same body");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeCase(makeToken(), new None, createSome(makeID(makeToken(),"x")), makeID(makeToken(),"c"));
	testName("Cases can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");

};