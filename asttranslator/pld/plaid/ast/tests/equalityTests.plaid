package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.*;
import java.lang.System;

val () -> void equalityTests = fn () => {

	System.out.println("---------------------------");
	System.out.println("|    AST EQUALITY TESTS   |");
	System.out.println("---------------------------");
	var res = unit;
	var n1 = unit;
	var n2 = unit;
	System.out.println("");
	
	//Testing ID equality	
	System.out.println("Testing ID equality");
	n1 = makeTempID("test1");
	n2 = makeTempID("test2");
	testName("temp IDs are always equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID("test1");
	n2 = makeID("test1");
	testName("IDs with the same name are equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID("test1");
	n2 = makeID("test2");
	testName("IDs with different names are not equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	System.out.println("");
	
	//Testing Application equality
	System.out.println("Testing Application equality");
	var argList1 = makeEmptyList();
	argList1.add(makeTempID("t"));
	var argList2 = makeEmptyList();
	n1 = makeApplication(makeTempID("test1"),argList1);
	n2 = makeApplication(makeTempID("test2"),argList2);
	testName("argument lists must be the same length");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("argument lists must be the same length (reversed)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("arguments must be equivalent expressions");
	argList2.add(makeID("i"));
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("function must be equivalent expressions");
	argList2 = makeEmptyList();
	argList2.add(makeTempID("t"));
	n1 = makeApplication(makeID("test1"),argList1);
	n2 = makeApplication(makeID("test2"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	
	testName("applications can be equivalent");
	n1 = makeApplication(makeID("test1"),argList1);
	n2 = makeApplication(makeID("test1"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	System.out.println("");
	
	//Testing Binding equality
	System.out.println("Testing Binding equality");
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeTempID("e"),makeTempID("b"),false);
	n2 = makeUnannotatedLet(makeToken(),makeID("y"),makeTempID("e"),makeTempID("b"),false);
	testName("bound variables must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e1"),makeTempID("b"),false);
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e2"),makeTempID("b"),false);
	testName("bound expressions must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b1"),false);
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b2"),false);
	testName("body expressions must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b1"),true);
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b2"),false);
	testName("mutability must be the same (NOTE: currently not used or displayed)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	testName("Bindings can be equivalent");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing Annotation Equality");
	n1.addPermType(getVoidType());
	testName("Must both be annotated to the same degree (PTA-other)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	testName("Must both be annotated to the same degree (NTA-other)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	testName("Must both be annotated to the same degree (OTA-other)");
	n2.addObjectType(getUnitType());
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n2.addPermission(UNIQUE);
	testName("Must both have the same annotation (PTA)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n1.addPermType(createPermType(IMMUTABLE,createNominalType(createID("test"))));
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2.addPermType(createPermType(IMMUTABLE,createNominalType(createID("test"))));
	testName("PermTypeAnnotations can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};
	
	n1 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n1.addObjectType(createNominalType(createID("test")));
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2.addObjectType(getUnitType());
	testName("Must both have the same annotation (OTA)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	n2 = makeUnannotatedLet(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2.addObjectType(createNominalType(createID("test")));
	testName("ObjectTypeAnnotations can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing take/borrow Equality");
	n1.toTake();
	testName("Take different than Let");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	testName("Let different than Take");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	n2.toBorrow();
	testName("Borrow different than Take");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	n1 = makeTake(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2 = makeTake(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	testName("TakeBindings can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};
	
	n1 = makeBorrow(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	n2 = makeBorrow(makeToken(),makeID("x"),makeID("e"),makeID("b"),false);
	testName("BorrowBindings can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing LowerBound Equality");

	n2.addLowerBound(IMMUTABLE);
	testName("Must both have lower bounds");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	testName("Must both have lower bounds (reversed)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	n1.addLowerBound(UNIQUE);
	testName("Must both have lower bounds");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};

};