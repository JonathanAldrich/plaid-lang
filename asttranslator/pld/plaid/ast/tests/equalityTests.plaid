package plaid.ast.tests;

import java.lang.System;

val () -> void equalityTests = fn () => {

	System.out.println("---------------------------");
	System.out.println("|    AST EQUALITY TESTS   |");
	System.out.println("---------------------------");
	var res = unit;
	var n1 = unit;
	var n2 = unit;
	System.out.println("");
	
	//Testing ID equality	
	System.out.println("Testing ID equality");
	n1 = makeTempID("test1");
	n2 = makeTempID("test2");
	testName("temp IDs are always equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID("test1");
	n2 = makeID("test1");
	testName("IDs with the same name are equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	n1 = makeID("test1");
	n2 = makeID("test2");
	testName("IDs with different names are not equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	System.out.println("");
	
	//Testing Application equality
	System.out.println("Testing Application equality");
	var argList1 = makeEmptyList();
	argList1.add(makeTempID("t"));
	var argList2 = makeEmptyList();
	n1 = makeApplication(makeTempID("test1"),argList1);
	n2 = makeApplication(makeTempID("test2"),argList2);
	testName("argument lists must be the same length");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	testName("argument lists must be the same length (reversed)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	testName("arguments must be equivalent expressions");
	argList2.add(makeID("i"));
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	testName("function must be equivalent expressions");
	argList2 = makeEmptyList();
	argList2.add(makeTempID("t"));
	n1 = makeApplication(makeID("test1"),argList1);
	n2 = makeApplication(makeID("test2"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	testName("applications can be equivalent");
	n1 = makeApplication(makeID("test1"),argList1);
	n2 = makeApplication(makeID("test1"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	System.out.println("");
	
	//Testing Binding equality	
	System.out.println("Testing Binding equality");

};