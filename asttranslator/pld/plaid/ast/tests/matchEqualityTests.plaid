package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val matchEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING Match******
	System.out.println("Testing Match equality");
	val basicCase1 = makeDefaultCase(makeToken(),makeID(makeToken(),"d"));
	val cList1 = makeEmptyList(); cList1.add(basicCase1);
	n1 = makeMatch(makeToken(),makeID(makeToken(),"m"),cList1);
	testName("Match not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeMatch(makeToken(),makeID(makeToken(),"m"),makeEmptyList());
	testName("Case Lists must be of equal length");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val basicCase2 = makeDefaultCase(makeToken(),makeID(makeToken(),"e"));
	val cList2 = makeEmptyList(); cList2.add(basicCase2);
	n2 = makeMatch(makeToken(),makeID(makeToken(),"m"),makeEmptyList());
	testName("Case Lists must be of equal length");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};

};
