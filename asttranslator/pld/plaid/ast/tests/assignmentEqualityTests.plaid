package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val assignmentEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING Assignment******
	System.out.println("Testing Assignment Equality");
	n1 = makeAssignment(makeToken(),new None, makeID(makeToken(),"f1"),makeID(makeToken(), "v"));
	testName("Assignment not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeAssignment(makeToken(),new None, makeID(makeToken(),"f2"),makeID(makeToken(), "v"));
	testName("target field/variable must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeAssignment(makeToken(),new None, makeID(makeToken(),"f"),makeID(makeToken(), "v1"));
	n2 = makeAssignment(makeToken(),new None, makeID(makeToken(),"f"),makeID(makeToken(), "v2"));
	testName("value must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeAssignment(makeToken(),new None, makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	n2 = makeAssignment(makeToken(),makeSome(makeID(makeToken(),"r")), makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	testName("one cannot be a field and the other a local variable");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	testName("one cannot be a field and the other a local variable (reversed");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeAssignment(makeToken(),makeSome(makeID(makeToken(),"r1")), makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	n2 = makeAssignment(makeToken(),makeSome(makeID(makeToken(),"r2")), makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	testName("receiver must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeAssignment(makeToken(),makeSome(makeID(makeToken(),"r")), makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	n2 = makeAssignment(makeToken(),makeSome(makeID(makeToken(),"r")), makeID(makeToken(),"f"),makeID(makeToken(), "v"));
	testName("Assignments can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");
};