package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val lambdaEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING Lambda*****
	System.out.println("Testing Lambda equality");
	
	val argTypes1 = makeEmptyList(); argTypes1.add(
		createChangeType(createPermType(IMM,createNominalType(makeID(makeToken(),"nom"))),
						 createPermType(IMM,createNominalType(makeID(makeToken(),"nom"))),
						 true));
	val lt1 = createLambdaType(createPermType(IMM,createNominalType(makeID(makeToken(),"ret"))), argTypes1, java.util.HashMap.new());
	val args1 = makeEmptyList(); args1.add(makeID(makeToken(), "a"));
	n1 = makeLambda(makeToken(),args1,makeID(makeToken(),"e"),lt1,new None);
	testName("Lambda not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val args2 = makeEmptyList(); args2.add(makeID(makeToken(), "a1"));
	n2 = makeLambda(makeToken(),args2,makeID(makeToken(),"e"),lt1,new None);
	testName("Lambdas cannot have different args");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val args2a = makeEmptyList(); args2a.add(makeID(makeToken(), "a"));
	n2 = makeLambda(makeToken(),args2a,makeID(makeToken(),"e1"),lt1,new None);
	testName("Lambdas cannot have different bodies");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val argTypes2 = makeEmptyList(); argTypes2.add(
		createChangeType(createPermType(IMM,createNominalType(makeID(makeToken(),"nom"))),
						 createPermType(IMM,createNominalType(makeID(makeToken(),"nom"))),
						 true));
	val lt2 = createLambdaType(createPermType(IMM,createNominalType(makeID(makeToken(),"ret2"))), argTypes2, java.util.HashMap.new());
	n2 = makeLambda(makeToken(),args2a,makeID(makeToken(),"e"),lt2,new None);
	testName("Lambds cannot have different types");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeLambda(makeToken(),args2a,makeID(makeToken(),"e"),lt1,createSome(makeID(makeToken(),"l")));
	testName("Lambdas cannot have different recursive names (not printed)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeLambda(makeToken(),args2a,makeID(makeToken(),"e"),lt1,new None);
	testName("Lambdas can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
};