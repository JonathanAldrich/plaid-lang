package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val methodCallEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING MethodCalls*****
	System.out.println("Testing MethodCall equality");
	n1 = makeMethodCall(makeToken(),makeID(makeToken(),"r"),makeID(makeToken(),"m"),makeEmptyList());
	testName("MethodCall not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeMethodCall(makeToken(),makeID(makeToken(),"r2"),makeID(makeToken(),"m"),makeEmptyList());
	testName("MethodCalls must have equal receivers");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeMethodCall(makeToken(),makeID(makeToken(),"r"),makeID(makeToken(),"m2"),makeEmptyList());
	testName("MethodCalls must have equal method names");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val args = makeEmptyList(); args.add(makeID(makeToken(),"a"));
	n2 = makeMethodCall(makeToken(),makeID(makeToken(),"r"),makeID(makeToken(),"m"),args);
	testName("MethodCalls must have equal argument lists");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeMethodCall(makeToken(),makeID(makeToken(),"r"),makeID(makeToken(),"m"),makeEmptyList());
	testName("MethodCalls can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	
};