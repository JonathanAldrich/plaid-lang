package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val scEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");
	
	//******TESTING State Change*****
	System.out.println("Testing state change equality");
	val l1 = makeEmptyList(); l1.add(makeID(makeToken(),"path"));
	n1 = makeChangeState(makeToken(),makeID(makeToken(),"x"),makeQI(makeToken(),l1,new None));
	testName("StateChange not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeChangeState(makeToken(),makeID(makeToken(),"y"),makeQI(makeToken(),l1,new None));
	testName("both state change must have same target");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeChangeState(makeToken(),makeID(makeToken(),"x"),makeQI(makeToken(),l1,createSome(makeEmptyList())));
	testName("both state change must have same incoming state");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeChangeState(makeToken(),makeID(makeToken(),"x"),makeQI(makeToken(),l1,new None));
	testName("state changes can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");
};