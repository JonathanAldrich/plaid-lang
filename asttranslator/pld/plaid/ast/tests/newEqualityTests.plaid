package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val newEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING NEW*****
	System.out.println("Testing new equality");
	val qidList1 = makeEmptyList(); qidList1.add("path");
	val qid1 = makeQI(makeToken(),qidList1, new None);
	n1 = makeNewInstance(makeToken(),qid1);
	testName("New not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val qidList2 = makeEmptyList(); qidList2.add("path2");
	val qid2 = makeQI(makeToken(),qidList2, new None);
	n2 = makeNewInstance(makeToken(),qid2);
	testName("News must instantiate the same state");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val qidList2a = makeEmptyList(); qidList2a.add("path");
	val qid2a = makeQI(makeToken(),qidList2a, new None);
	n2 = makeNewInstance(makeToken(),qid2a);
	testName("News can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
};