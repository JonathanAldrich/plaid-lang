package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val applicationEqualityTests = fn () => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//*****Testing Application equality******
	System.out.println("Testing Application equality");
	var argList1 = makeEmptyList();
	argList1.add(makeTempID(makeToken(),"t"));
	n1 = makeApplication(makeToken(),makeTempID(makeToken(),"test1"),argList1);
	testName("applications not equal to other ast node types");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	var argList2 = makeEmptyList();
	n2 = makeApplication(makeToken(),makeTempID(makeToken(),"test2"),argList2);
	testName("argument lists must be the same length");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("argument lists must be the same length (reversed)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("arguments must be equivalent expressions");
	argList2.add(makeID(makeToken(),"i"));
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};
	
	testName("function must be equivalent expressions");
	argList2 = makeEmptyList();
	argList2.add(makeTempID(makeToken(),"t"));
	n1 = makeApplication(makeToken(),makeID(makeToken(),"test1"),argList1);
	n2 = makeApplication(makeToken(),makeID(makeToken(),"test2"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(false) }
		case False { testPassed(true) }
	};	
	
	testName("applications can be equivalent");
	n1 = makeApplication(makeToken(),makeID(makeToken(),"test1"),argList1);
	n2 = makeApplication(makeToken(),makeID(makeToken(),"test1"),argList2);
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { testPassed(true) }
		case False { testPassed(false) }
	};	
	System.out.println("");

};