package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val derefEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING QI*****
	System.out.println("Testing (Destructive) Derference equality");
	n1 = makeDestructiveDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"f"));
	testName("Destructive Deref not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"f"));
	testName("Deref not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"f"));
	testName("Derefs must have same receiver");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"g"));
	testName("Derefs must have same field");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"f"));
	testName("Derefs can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	n1 = makeDestructiveDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"f"));
	n2 = makeDestructiveDereference(makeToken(),makeID(makeToken(),"y"),makeID(makeToken(),"f"));
	testName("Destructive Derefs must have same receiver");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeDestructiveDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"g"));
	testName("Destructive Derefs must have same field");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeDestructiveDereference(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"f"));
	testName("Destructive Derefs can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
};