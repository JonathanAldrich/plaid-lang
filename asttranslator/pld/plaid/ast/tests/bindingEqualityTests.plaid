package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.*;
import java.lang.System;

val bindingEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//*****Testing Binding equality*****
	System.out.println("Testing Binding equality");
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeTempID(makeToken(),"e"),makeTempID(makeToken(),"b"),false);
	testName("bindings not equal to other ast node types");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2 = makeLet(makeToken(),makeID(makeToken(),"y"),makeTempID(makeToken(),"e"),makeTempID(makeToken(),"b"),false);
	testName("bound variables must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e1"),makeTempID(makeToken(),"b"),false);
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e2"),makeTempID(makeToken(),"b"),false);
	testName("bound expressions must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b1"),false);
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b2"),false);
	testName("body expressions must be the same");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b1"),true);
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b2"),false);
	testName("mutability must be the same (NOTE: currently not used or displayed)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	testName("Bindings can be equivalent");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing Annotation Equality");
	n1.addPermType(getVoidType());
	testName("Must both be annotated to the same degree (PTA-other)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	testName("Must both be annotated to the same degree (NTA-other)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	testName("Must both be annotated to the same degree (OTA-other)");
	n2.addObjectType(getUnitType());
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n2.addPermission(UNIQUE);
	testName("Must both have the same annotation (PTA)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n1.addPermType(createPermType(IMMUTABLE,createNominalType(makeID(makeToken(),"test"))));
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2.addPermType(createPermType(IMMUTABLE,createNominalType(makeID(makeToken(),"test"))));
	testName("PermTypeAnnotations can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	
	n1 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n1.addObjectType(createNominalType(makeID(makeToken(),"test")));
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2.addObjectType(getUnitType());
	testName("Must both have the same annotation (OTA)");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	
	n2 = makeLet(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2.addObjectType(createNominalType(makeID(makeToken(),"test")));
	testName("ObjectTypeAnnotations can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing take/borrow Equality");
	n1.toTake();
	testName("Take different than Let");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};	
	testName("Let different than Take");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	
	n2.toBorrow();
	testName("Borrow different than Take");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	
	n1 = makeTake(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2 = makeTake(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	testName("TakeBindings can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	
	n1 = makeBorrow(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	n2 = makeBorrow(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),makeID(makeToken(),"b"),false);
	testName("BorrowBindings can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	System.out.println("");
	
	System.out.println("Testing LowerBound Equality");
	n2.addLowerBound(IMMUTABLE);
	testName("Must both have lower bounds");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	testName("Must both have lower bounds (reversed)");
	testCall("(" + n2.toString() + ") == (" + n1.toString() + ")");
	res = n2 == n1;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	n1.addLowerBound(UNIQUE);
	testName("Must both have lower bounds");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	System.out.println("");

};