package plaid.ast.tests;

import plaid.ast.*;
import plaid.ast.types.permissions.*;
import plaid.ast.types.*;
import java.lang.System;

val qiEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING QI*****
	System.out.println("Testing QI equality");
	val qid1 = makeEmptyList(); qid1.add("path");
	n1 = makeQI(makeToken(),qid1, new None);
	testName("QI not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val qid2 = makeEmptyList(); qid2.add("path");
	n2 = makeQI(makeToken(),qid2,new None);
	testName("QIs can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	val ft1 = makeFieldType(makeID(makeToken(),"x"),
							createTakeType(IMMUTABLE, createNominalType(makeID(makeToken(),"nom"))),
							true);
	val initList1 = makeEmptyList(); 
	initList1.add(makeFieldDecl(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e"),
				  false,true,ft1));
	val declList1 = makeDeclList(makeToken(), initList1);
	n1 = makeQI(makeToken(),qid1,createSome(declList1));
	testName("QIs must both have init state");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val initList2 = makeEmptyList(); 
	initList2.add(makeFieldDecl(makeToken(),makeID(makeToken(),"x"),makeID(makeToken(),"e2"),
				  true,true,ft1));
	val declList2 = makeDeclList(makeToken(), initList2);
	n2 = makeQI(makeToken(),qid2,createSome(declList2));
	testName("QIs must have same init state");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	qid1.add("one");
	n1 = makeQI(makeToken(),qid1,new None);
	n2 = makeQI(makeToken(),qid2,new None);
	testName("QI must have same length string lists");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	qid2.add("two");
	testName("QI must have same string lists");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};

};
