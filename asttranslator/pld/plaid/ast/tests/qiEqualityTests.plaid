package plaid.ast.tests;

import plaid.ast.*;
import java.lang.System;

val qiEqualityTests = fn (unique Tester tester) => {

	var res = unit;
	var n1 = unit;
	var n2 = makeID(makeToken(),"x");

	//******TESTING QI*****
	System.out.println("Testing QI equality");
	val qid1 = makeEmptyList(); qid1.add("path");
	n1 = makeQI(makeToken(),qid1, new None);
	testName("QI not equal to other AST node type");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	val qid2 = makeEmptyList(); qid2.add("path");
	n2 = makeQI(makeToken(),qid2,new None);
	testName("QIs can be equal");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(true) }
		case False { tester.testPassed(false) }
	};
	qid1.add("one");
	testName("QI must have same length string lists");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	qid2.add("two");
	testName("QI must have same string lists");
	testCall("(" + n1.toString() + ") == (" + n2.toString() + ")");
	res = n1 == n2;
	testResult(res.toString());
	match (res) {
		case True { tester.testPassed(false) }
		case False { tester.testPassed(true) }
	};
	testName("QI must have same init state");
	tester.testPassed(false); //******** need to implement equality on Decl Lists
	System.out.println("");

};
