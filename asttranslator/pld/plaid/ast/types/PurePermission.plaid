package plaid.ast.types;

/**
 *	Pure Permission
 */
state PurePermission case of Permission {
	method isWritable() {
		false;
	}

	method splitPerm(p2) {
		match(p2) {
			// pure => pure/pure
			case PurePermission {
				new Some{ val value = this; };
			}
			// pure => none/pure
			case NonePermission {
				new Some{ val value = this; };
			}
			default {
				new None;
			}
		};
	}
	
	method ==(p2) {
		match(p2) {
			case PurePermission {
				true;
			}
			default {
				false;
			}
		};
	}
	
	method join(p2) {
		match (p2) {
			case NonePermission { this }
			default { p2 }
		}
	}
	
	method joinTo(p2, target) {
		match(target) {
			case UniquePermission {  //pure + full = unique
				match (p2) {
					case FullPermission { createSome(target) }
					default { NONE; }
				}
			}
			default { //normal join and check relative strength
				val joined = this.join(p2);
				ifElse (joined.asStrongAs(target))
					{ createSome(target); }
					{ NONE; };
			}
		}
	}
	
	method asStrongAs(p2) {
		match (p2) {
			case NonePermission { true }
			case PurePermission { true }
			default { false }
		}
	}

	//weaker
	method /*Permission*/ merge(p2) {
		match (p2) {
			case DynPermission { DYNP }
			case NonePermission { NONEP }
			default { PURE } //pure weaker than most
			
		}
	}
	
	method toString() {
		"pure"
	}
}