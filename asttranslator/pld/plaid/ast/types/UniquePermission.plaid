package plaid.ast.types;

/**
 *	Unique Permission
 */
state UniquePermission case of Permission {
	method isWritable() {
		true;
	}

	method split(p2) {
		match(p2) {
			// unique => unique/none
			case UniquePermission {
				new Some{ val value = new NonePermission; };
			}
			// unique => full/pure
			case FullPermission {
				new Some{ val value = new PurePermission; };
			}
			// unique => shared/shared
			case SharedPermission {
				new Some{ val value = new SharedPermission; };
			}
			// unique => immutable/immutable
			case ImmutablePermission {
				new Some{ val value = new ImmutablePermission; };
			}
			// unique => pure/full
			case PurePermission {
				new Some{ val value = new FullPermission; };
			}
			// unique => none/unique
			case NonePermission {
				new Some{ val value = this; };
			}
			default {
				new None;
			}
		};
	}
	
	method ==(p2) {
		match(p2) {
			case UniquePermission {
				true;
			}
			default {
				false;
			}
		};
	}
	
	method join(p2) {
		match (p2) {
			case DynPermission { p2 }
			default { this }
		}
	}
	
	method joinTo(p2, target) {
		match (p2) {
			case DynPermission { NONE }
			default { createSome(target) }
		}
	}
	
	method asStrongAs(p2) {
		match(p2) {
			case DynPermission { false }
			default { true }
		}
	}
	
	method toString() {
		"unique"
	}
}