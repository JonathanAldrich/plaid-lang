package plaid.ast.types;

/**
 *	Dynamic Permission (separate from Dynamic object type)
 */
state DynPermission case of Permission {
	method isWritable() {
		true;
	}

	method split(p2) {
		new Some { val value = new DynPermission; }
	}
	
	method ==(p2) {
		match(p2) {
			case DynPermission {
				true;
			}
			default {
				false;
			}
		};
	}
	
	//Always return dyn
	method join(p2) {
		this
	}
	
	//only join to dyn, None otherwise
	method /*Option Permission*/ joinTo(p2, target) {
		match (target) {
			case DynPermission { new Some { val value = this; } }
			default { new None }
		}
	}
	
	// Dyn permission always stronger
	method /*boolean*/ asStrongAs(p2) {
		true
	}
	
	method toString() {
		"DynP"
	}
}