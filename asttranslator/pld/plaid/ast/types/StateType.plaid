package plaid.ast.types;

state StateType {
	val /*Map<String,DeclType>*/ declaredTypes = java.util.HashMap.new();
	val /*Map<String,DeclType>*/ providedTypes = java.util.HashMap.new();
	val /*Option StateType*/ superType;
	val /*ID*/ name;
	
	method /*Option DeclType */ declaredTypeOf(name) {
		ifElse(declaredTypes.containsKey(name)) 
			{ new Some { val value = declaredTypes.get(name); }}
			{ new None }
	}
	
	method /*Option DeclType */ providedTypeOf(name) {
		ifElse(providedTypes.containsKey(name)) 
			{ new Some { val value = providedTypes.get(name); }}
			{ new None }
	}
	
	method toString() {
		val pfn = fn (dType) => ret = ret + "\n\t\t" + dType.toString();
		var ret = "state " + this.name.name;
		match(this.superType) {
			case Some { ret = ret + " case of " + superType.value.name.name }
			default { }
		};
		ret = ret + ":\n\tDeclaredType = ";
		val iter = declaredTypes.values().iterator();
		while { iter.hasNext() } {
			ret = ret + "\n\t\t" + iter.next().toString();
		};
		ret = ret + "\n\tProvidedType = ";
		val iter2 = providedTypes.values().iterator();
		while { iter2.hasNext() } {
			ret = ret + "\n\t\t" + iter2.next().toString();
		};
		ret = ret + "\n";		
	}
}