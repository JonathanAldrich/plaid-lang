package plaid.ast.types;

/**
 *	represents the type of a field declaration
 */
state FieldType case of DeclType {
	val immutable ID name;
	val immutable TypeBinding binding;
	val immutable Boolean isImmutable;

	method ==(other) {
		match (other) {
			case FieldType {
				this.name == other.name
				&& this.binding == other.binding
				&& this.isImmutable == other.isImmutable;
			}
			default {
				false;
			}
		};
	}
	
	method toString() {
		var ret = "";
		ifElse (this.isImmutable)
			{ ret = "val " }
			{ ret = "var " };
		ret = ret + this.binding.toString() + " " + this.name.name;
		ret
	}
	
	method /*Boolean*/ declSubTypeOf(/*DeclType*/ other, /*StateTable*/ stateTable) {
		match (other) {
			case FieldType {
				// requirements
				//0) name has to be the same
				val /*boolean*/ nameOk = this.name == other.name;
				if (!nameOk) { java.lang.System.out.println("TYPECHECK FAILED: trying to subtype fields with different names - " + 
																this.name.name + " <: " + other.name.name) };
																
				//1) both (im)mutable
				val /*boolean*/ mutOk = this.isImmutable == other.isImmutable;
				if (!mutOk) { java.lang.System.out.println("TYPECHECK FAILED: fields must have same mutability") };
				
				//2) field types must be subtypes
				val /*boolean*/ typeOk = this.binding.isSubPermTypeOf(other.binding, stateTable);
				
				nameOk && mutOk && typeOk;				
			}
			default { 
				java.lang.System.out.println("TYPECHECK FAILED: field must subtype another field");
				false 
			}
		}
	}
}