package plaid.ast.types;

state MethodType case of Type {
	val /*ID*/ name;
	val /*PermType*/ returnType;
	val /*List<ChangeType>*/ argTypes;
	val /*ChangeType*/ receiverType;
	val /*Map<ID,ChangeType>*/ environmentTypes;

	method ==(other) {
		match (other) {
			case MethodType {
				this.name.getName() == other.name.getName()
				&& this.returnType == other.returnType
				&& this.argTypes == other.argTypes
				&& this.receiver == other.receiver
				&& this.environmentTypes == other.environmentTypes;
			}
			default {
				false;
			}
		};
	}
	
	method toString() { //TODO: multiple args and env types
		var ret = "method " + this.returnType.toString() + " " + this.name.name + "(";
		match( this.argTypes.head) {
			case Cons { ret = ret + this.argTypes.head.value.toString() }
			default { }
		};	
		ret = ret + ")[" + this.receiverType.toString() + "]";
		ret 
	}
	
	method /*boolean*/ hasArg() {
		match (argTypes.head) {
			case Nil { false }
			case Cons { true }
		}
	}
}