package plaid.ast.types;

/**
 *	Represents the declaration of a method's type
 */
state MethodType case of DeclType {
	val /*ID*/ name;
	val /*PermType*/ returnType;
	val /*List<ChangeType>*/ argTypes;
	val /*ChangeType*/ receiverType;
	val /*Map<ID,ChangeType>*/ environmentTypes;

	method ==(other) {
		match (other) {
			case MethodType {
				this.name.getName() == other.name.getName()
				&& this.returnType == other.returnType
				&& this.argTypes == other.argTypes
				&& this.receiver == other.receiver
				&& this.environmentTypes == other.environmentTypes;
			}
			default {
				false;
			}
		};
	}
	
	method toString() { //TODO: multiple args and env types
		var ret = "method " + this.returnType.toString() + " " + this.name.name + "(";
		if (this.hasArg()) {
			val args = this.argTypes.foldr(fn (a,r) => ", " + a.toString() + r, "");
			ret = ret + args.substring(1);
		};
		ret = ret + ")[" + this.receiverType.toString() + "]";
		ret 
	}
	
	method /*boolean*/ hasArg() {
		match (argTypes.head) {
			case Nil { false }
			case Cons { true }
		}
	}
	
	method /*boolean*/ declSubTypeOf(/*DeclType*/ other, /*StateTable*/ stateTable) {
		match (other) {
			case MethodType {
				//requirements:
				//0) same names
				val /*boolean*/ nameOk = this.name == other.name;
				if (!nameOk) { java.lang.System.out.println("TYPECHECK FAILED: trying to subtype methods with different names - " + 
																this.name.name + " <: " + other.name.name) };
				
				//1) this.returnType <: other.returnType
				val /*Boolean*/ retTypeOk = this.returnType.isSubPermTypeOf(other.returnType, stateTable); //error message elsewhere
				
				//2) this.receiverType.input <: other.receiverType.input ***TODO: different for structural types
				val /*Boolean*/ tInputOk = this.receiverType.input.isSubPermTypeOf(other.receiverType.input, stateTable); //error message elsewhere
				
				//3) this.receiverType.output <: other.receiverType.output
				val /*Boolean*/ tOutputOk = this.receiverType.output.isSubPermTypeOf(other.receiverType.output, stateTable); //error message elsewhere
				
				//4) same number and compatible arg types
				var /*Boolean*/ argsOk = this.argTypes.length() == other.argTypes.length();
				ifElse (argsOk) {
					val /*List<Pair<ChangeType,ChangeType>>*/ pairedArgs = this.argTypes.zip(other.argTypes);
					argsOk = pairedArgs.foldr(fn (p,z) => {
					
						var inputOk = false;
						//4a) this.argTypes[i].input <: other.argTypes[i].input //TODO: multiple args
						if ( p.fst.input.isSubPermTypeOf(p.snd.input, stateTable)) {
							inputOk = true; 
						};
						
						var outputOk = false;
						//4b) this.argTypes[i].output <: other.argTypes[i].output
						if ( p.fst.output.isSubPermTypeOf(p.snd.output, stateTable)) {
							outputOk = true;
						};
					
						inputOk && outputOk && z;
					
					}, true);
				} {
					java.lang.System.out.println("SUBTYPING FAILED : mismatched number of args");
				};
				
				
				//6) //TODO: environment Types
				
				nameOk && retTypeOk && tInputOk && tOutputOk && argsOk;
				
			}
			default { 
				java.lang.System.out.println("TYPECHECK FAILED: method must subtype another method");
				false 
			}
		}
	}
}