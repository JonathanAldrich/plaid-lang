package plaid.ast.types;

/**
 *	represents a lambda type as an object type
 *	this could also be represented as a PlaidType, but instead for
 *	consistency and flexibility it is an object Type.  Currently,
 *	all LambdaType objects are considered to have an Immutable 
 *	permission, but later we could allow other permissions under
 *	this structure.
 */
state LambdaType case of Type {

	var /*PermType*/ returnType; //TODO: change back to val when have restricted update state change working for PermType <- PermType
	val /*List<ChangeType>*/ argTypes;
	val /*Map<ID,ChangeType>*/ environmentTypes;
	
	method ==(other) {
		match (other) {
			case LambdaType {
				this.returnType == other.returnType
				&& this.argTypes.zip(other.argTypes)
				                   .map(fn (p) => { p.first() == p.second(); })
				                   .foldr(fn (x, y) => { x && y; }, true);
			}
			default {
				false;
			}
		};
	}
	
	method /*boolean*/ hasArg() {
		match (argTypes.head) {
			case Nil { false }
			case Cons { true }
		}
	}
	
	method toString() { //TODO: multiple args and env types
		match (this.argTypes.head) {
			case Cons {"(" + this.argTypes.head.value.toString() + ") -> " + this.returnType.toString() }
			default { "() -> " + this.returnType.toString() }
		}
		
	}
}