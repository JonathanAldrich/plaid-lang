package plaid.ast.types;

/**
 *	represents a lambda type as an object type
 *	this could also be represented as a PlaidType, but instead for
 *	consistency and flexibility it is an object Type.  Currently,
 *	all LambdaType objects are considered to have an Immutable 
 *	permission, but later we could allow other permissions under
 *	this structure.
 */
state LambdaType case of Type {

	var /*PermType*/ returnType; //TODO: change back to val when have restricted update state change working for PermType <- PermType
	val /*List<ChangeType>*/ argTypes;
	val /*Map<ID,ChangeType>*/ environmentTypes;
	
	method ==(other) {
		match (other) {
			case LambdaType {
				this.returnType == other.returnType
				&& this.argTypes.zip(other.argTypes)
				                   .map(fn (p) => { p.first() == p.second(); })
				                   .foldr(fn (x, y) => { x && y; }, true);
			}
			default {
				false;
			}
		};
	}
	
	method /*boolean*/ hasArg() {
		match (argTypes.head) {
			case Nil { false }
			case Cons { true }
		}
	}
	
	method toString() { //TODO: env types
		var /*String*/ envTypeString = "";
		val envIter = environmentTypes.keySet().iterator();
		while { envIter.hasNext() } {
			val /*ID*/ envVar = envIter.next();
			val /*PermType*/ envVarType = environmentTypes.get(envVar);
			envTypeString = envTypeString + ", " + envVarType.toString() + " " + envVar.name;
		};
		if (envTypeString.length() > 0) {
			envTypeString = "[" + envTypeString.substring(2) + "]";
		};
		
		var /*String*/ args = "";
		ifElse (this.hasArg()) {
			args = this.argTypes.foldr(fn (a,r) => ", " + a.toString() + r, "");
			args = "(" + args.substring(2) + ")";
		} {
			args = "()";
		};
		
		args + envTypeString + " -> " + returnType.toString();
	}
	
	method /*Boolean*/ subtypeOf(/*Type*/ other, /*StateTable*/ stateTable) {
		match (other) {
			case LambdaType {
				//requirements:
				
				//1) this.returnType <: other.returnType
				val /*Boolean*/ retTypeOk = this.returnType.isSubPermTypeOf(other.returnType, stateTable); //error message elsewhere
				
				//2) same number and compatible arg types
				var /*Boolean*/ argsOk = this.argTypes.length() == other.argTypes.length();
				ifElse (argsOk) {
					val /*List<Pair<ChangeType,ChangeType>>*/ pairedArgs = this.argTypes.zip(other.argTypes);
					argsOk = pairedArgs.foldr(fn (p,z) => {
					
						var inputOk = false;
						//2a) other.argTypes[i].input <: this.argTypes[i].input //TODO: multiple args
						if ( p.snd.input.isSubPermTypeOf(p.fst.input, stateTable)) {
							inputOk = true; 
						};
						
						var outputOk = false;
						//2b) this.argTypes[i].output <: other.argTypes[i].output
						if ( p.fst.output.isSubPermTypeOf(p.snd.output, stateTable)) {
							outputOk = true;
						};
					
						inputOk && outputOk && z;
					
					}, true);
				} {
					java.lang.System.out.println("SUBTYPING FAILED : mismatched number of args");
				};
				
				//4) //TODO: environment Types
				
				retTypeOk && argsOk;
			}
			default { 
				java.lang.System.out.println("TYPECHECK FAILED: lambda must subtype another lambda");
				false 
			}
		}
	}
}