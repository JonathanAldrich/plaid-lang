package plaid.ast.types;

state LambdaType case of Type {

	val /*PermType*/ returnType;
	val /*List<ChangeType>*/ argTypes;
	val /*Map<ID,ChangeType>*/ environmentTypes;
	
	method ==(other) {
		match (other) {
			case LambdaType {
				this.returnType == other.returnType
				&& this.argType == other.argType
				&& this.sideEffects.zip(other.sideEffects)
				                   .map(fn (p) => { p.first() == p.second(); })
				                   .foldr(fn (x, y) => { x && y; }, true);
			}
			default {
				false;
			}
		};
	}
}