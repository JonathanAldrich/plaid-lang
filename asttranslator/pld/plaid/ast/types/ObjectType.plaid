package plaid.ast.types;

/**
 *	top level interface for the class of types of objects (traditional types)
 *	this currently includes: Nominal Types, Structural Types, Lambda Types, and the Dynamic Type 
 */
state ObjectType {
	
	/**
	 *  This method checks that a given member is defined in this objectType and returns
	 *  The DeclType in an Option if it is and None otherwise 
	 */
	method /* unique Option<immutable DeclType>*/ contains(immutable ID f, unique StateTable st)[immutable ObjectType];
	
	/**
	 *  This method inspects the objectType to get the declared type of a particular member.
	 */
	method /* unique Option<immutable DeclType> */ declaredType(immutable ID f, unique StateTable st)[immutable ObjectType];
	
	/**
	 *  This method updates the binding on member f in this ObjectType to the new Binding b.
	 *  If the member is not a field or not present in the object, no action will be taken.
	 */
	method void memberUpdate(immutable ID f, immutable Binding >> void b, unique StateTable st)
							[unique ObjectType];
	
	/**
	 *  Some actions such as state change and packing cannot be done if an
	 *  ObjectType is tracking an alias to one of its fields.  This predicate
	 *  checks if this is the case and returns true if not.
	 */
	method immutable Boolean notBorrowed()[immutable ObjectType];
	
	/**
	 *  Pack attempts to turn this objectType into a NominalType.  No action is taken if
	 *  this cannot be done.
	 */
	method void pack(unique StateTable st)[unique ObjectType];
	
	/**
	 *  constructs the least upper Bound of this type and the other type.  The state table is used
	 *  for nominal types.  We return an option because comparing nominal and function types
	 *  does not have an upper bound
	 */
	method /* unique Option<unique ObjectType>*/ 
		leastUpperBound(immutable ObjectType other, unique StateTable st)[immutable ObjectType];
	
	/**
	 *  Object subtyping
	 */
	method immutable Boolean isSubObjectTypeOf(immutable ObjectType other, unique StateTable st)
											  [immutable ObjectType];
	
	/**
	 *  ObjectType downgrading downgrades the objectType of any field that currently has a weak permission
	 *  Note that we currently assume that Nominal Types cannot have fields with weak permissions
	 */
	method void downgrade()[unique ObjectType];
	
	/**
	 *  Type Equality
	 */
	method ==(/*Type*/ otherType);
	
	method immutable String toString()[immutable ObjectType];
}