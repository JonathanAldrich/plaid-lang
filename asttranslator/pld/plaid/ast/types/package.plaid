package plaid.ast.types;

import plaid.ast.ID;

//global for permissions
val DYNP = new DynPermission;
val UNIQUEP = new UniquePermission;
val FULLP = new FullPermission;
val IMMP = new ImmutablePermission;
val SHAREDP = new SharedPermission;
val PUREP = new PurePermission;
val NONEP = new NonePermission;

//NOTE: this test shows that state change for restricted updated is somewhat broken:
// without the change to None first, a is not updated because they are the same state
// and restricted update tries to do something I'm not sure what right now.
//TODO: fix restricted update when we understand it better
method maintest() {
	val a = new PermType {
		val perm = DYNP;
		val type = new NominalType { val typeName = new ID { val name = "unit"; }; };
		val borrowed = false;
	};
	java.lang.System.out.println(a.toString());
	//a <- None;
	a <- PermType {
		override val perm = UNIQUEP;
		override val type = new NominalType { val typeName = new ID { val name = "changed"; }; };
		override val borrowed = true;
	};
	java.lang.System.out.println(a.toString());
	
}