package plaid.ast.types;

import plaid.ast.ID;
import plaid.ast.types.permissions.*;

val immutable PermType VOID = new PermType {
	val perm = NONEP;
	val type = new NominalType { val typeName = new ID { val name = "unit"; }; };
};

//type to indicate an error
val /*(immutable String >> immutable String) -> FailedTypecheck*/ newErrorType = 
	fn (msg) => new ErrorType { val errorMsg = msg; };
	
//change a node with a type field to indicate an error in typechecking
val /*({ val Type type }, String, boolean) -> void*/ typeError = fn (node, msg, local) =>
	node.type <- ErrorType { 
		val errorMsg = msg;
		val isLocal	= local;
	};


//NOTE: this test shows that state change for restricted updated is somewhat broken:
// without the change to None first, a is not updated because they are the same state
// and restricted update tries to do something I'm not sure what right now.
//TODO: fix restricted update when we understand it better
method maintest() {
	val a = new PermType {
		val perm = DYNP;
		val type = new NominalType { val typeName = new ID { val name = "unit"; }; };
		val borrowed = false;
	};
	java.lang.System.out.println(a.toString());
	//a <- None;
	a <- PermType {
		override val perm = UNIQUE;
		override val type = new NominalType { val typeName = new ID { val name = "changed"; }; };
		override val borrowed = true;
	};
	java.lang.System.out.println(a.toString());
	
}