package plaid.ast.types;

import plaid.ast.ID;

//globals for permissions
val immutable Permission DYNP = new DynPermission;
val immutable Permission UNIQUE = new UniquePermission;
val immutable Permission FULL = new FullPermission;
val immutable Permission IMM = new ImmutablePermission;
val immutable Permission SHARED = new SharedPermission;
val immutable Permission PURE = new PurePermission;
val immutable Permission NONE = new NonePermission;

//NOTE: this test shows that state change for restricted updated is somewhat broken:
// without the change to None first, a is not updated because they are the same state
// and restricted update tries to do something I'm not sure what right now.
//TODO: fix restricted update when we understand it better
method maintest() {
	val a = new PermType {
		val perm = DYNP;
		val type = new NominalType { val typeName = new ID { val name = "unit"; }; };
		val borrowed = false;
	};
	java.lang.System.out.println(a.toString());
	//a <- None;
	a <- PermType {
		override val perm = UNIQUE;
		override val type = new NominalType { val typeName = new ID { val name = "changed"; }; };
		override val borrowed = true;
	};
	java.lang.System.out.println(a.toString());
	
}