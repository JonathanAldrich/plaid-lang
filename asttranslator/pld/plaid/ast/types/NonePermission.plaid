package plaid.ast.types;

/**
 *	None permission
 */
state NonePermission case of Permission {
	method isWritable() {
		false;
	}

	method splitPerm(p2) {
		match(p2) {
			// none => none/none
			case NonePermission {
				new Some{ val value = this; };
			}
			default {
				new None;
			}
		};
	}
	
	method ==(p2) {
		match(p2) {
			case NonePermission {
				true;
			}
			default {
				false;
			}
		};
	}
	
	//always take the other one
	method join(p2) {
		p2;
	}
	
	//could only join to None
	method joinTo(p2,target) {
		match (target) {
			case NonePermission { createSome(target) }
			default { NONE }
		}
	}
	
	//always weaker
	method asStrongAs(p2) {
		match (p2) {
			case NonePermission { true }
			default { false }
		}
	}
	
	//weaker
	method /*Permission*/ merge(p2) {
		NONEP //always weaker
	}
	
	method toString() {
		"none"
	}
}