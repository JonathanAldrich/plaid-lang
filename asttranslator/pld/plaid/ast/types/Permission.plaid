package plaid.ast.types;

/**
 *	Top level state representing all Permissions. possibilities are
 *  DynP, Unique, Full, Immutable, Shared, Pure, None
 */
state Permission {
	// What's the purpose of permSplits?
	// val permSplits = java.util.HashMap.new();
	
	/**
	 * Determines whether a specific permission is writable.  If this permission 
	 * allows a stage change, then the permission is writable and this function 
	 * returns true.  Returns false otherwise.
	 */
	method isWritable();
	
	/**
	 * Determines whether the current permission can be split into 
	 * the specified permission.  If it can, the function returns Some((p2, p3))
	 * where p2 and p3 are the results of the split as specified by the 
	 * permission splitting judgment.  If it cannot, the function returns None.
	 *
	 * KBN - slightly different semantics implemented for now...
	 * determines whether the current permission can be split into
	 * the specified permission.  If it can, the function returns Some(newPerm)
	 * where newPerm is the residue after splitting.
	 */
	method /*Option Permission*/ split(p2) [unique Permission >> unique Permission];
	
	/**
	 * Compares this permission to the specified permission.  If they are of the
	 * same type, then they are considered equal.  Returns true if the two
	 * permissions are equal and false otherwise.
	 */
	method ==(p2);
	
	/**
	 * Returns the stronger of the two access permissions.
	 */
	method join(p2);
	
	/**
	 * returns target if this could be joined to p2
	 * to create the target permission
	 * for instance, joinTo could create a unique
	 * from two immutable permissions
	 * (called provides the guarantee that they are
	 * the only immutable permissions out there)
	 * if not possible, it returns None
	 */
	method /*Option Permission*/ joinTo(p2, target);
	
	/**
	 * returns true if this permission is as strong or stronger than p2
	 * returns false otherwise
	 * order: dyn, unique, full, immutable <> shared, pure, none
	 * immutable and shared neither stronger than the other
	 */
	method asStrongAs(p2);
	
	/**
	 *	returns the weakest of the two permissions (for merging after eg multiple case statements)
	 */
	method merge(p2);
	
	method toString();
}