package plaid.ast.types.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.*;
import plaid.ast.stateTable.StateTable;
import java.lang.System;


val nominalTypeTests = fn () => {
	
	//create the state table for testing
	val /*unique Map<immtuable ID,immutable StateType>*/ temp = java.util.HashMap.new();
	
	//unit - just in case
	val u = createID("unit");
	temp.put(u, new StateType { val name = u; val superType = new None; });
	
	//Top
	val top = createID("Top");
	val topType = new StateType { val name = top; val superType = new None; };
	temp.put(top, topType);
	val topNomType = createNominalType(top);
	
	//A
	val a = createID("A");
	val aType = new StateType { val name = a; val superType = createSome(topType);};
	temp.put(a,aType);
	
	//B
	val b = createID("B");
	val bType = new StateType { val name = b; val superType = createSome(topType);};
	temp.put(b,bType);
	
	//C
	val c = createID("C");
	val cType = new StateType { val name = c; val superType = createSome(topType);};
	temp.put(c,cType);
	
	//BSub1
	val bSub1 = createID("Bsub1");
	val bSub1Type = new StateType { val name = bSub1; val superType = createSome(bType);};
	temp.put(bSub1,bSub1Type);
	
	//BSub2
	val bSub2 = createID("Bsub2");
	val bSub2Type = new StateType { val name = bSub2; val superType = createSome(bType);};
	temp.put(bSub2,bSub2Type);
	
	//Other - two fields u and i
	val other = createID("Other");
	val otherType = new StateType { val name = other; val superType = new None; };
	val iFieldName = createID("i");
	val iFieldBinding = new TakeBinding { var currentType = new PermType {
																val perm = IMMUTABLE;
																val type = topNomType;
															};
										};
	val iField = new FieldType { val name = iFieldName;
								 val binding = iFieldBinding;
								 val isImmutable = true;
							   };
	otherType.declaredTypes.put(iFieldName, iField);
	val uFieldName = createID("u");
	val uFieldBinding = new TakeBinding { var currentType = new PermType {
																val perm = UNIQUE;
																val type = topNomType;
															};
										};
	val uField = new FieldType { val name = uFieldName;
								 val binding = uFieldBinding;
								 val isImmutable = true;
							   };
	otherType.declaredTypes.put(uFieldName, uField);
	temp.put(other,otherType);
	
	//construct StateTable
	val unique StateTable st = new StateTable { override val states = temp; };
	System.out.println("Testing state configuration:");
	st.printTable();
	System.out.println("");
	
	var test = unit;
	
	//Testing contains
	System.out.println("Testing Contains");
	val otherNomType = createNominalType(other);
	test = otherNomType.contains(createID("f"),st);
	System.out.print("\tOther.contains(f,st) = None - ");
	match (test) {
		case Some { fail() }
		case None { ok() }
	};
	test = otherNomType.contains(iFieldName,st);
	System.out.print("\tOther.contains(i,st) = Some(iField) - ");
	match (test) {
		case Some { ok() }
		case None { fail() }
	};
	
	
	

};