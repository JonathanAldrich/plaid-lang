package plaid.ast.types.tests;

import plaid.ast.*;
import plaid.ast.types.*;
import plaid.ast.types.permissions.*;
import plaid.ast.stateTable.*;
import java.lang.System;

method main() {

	nominalTypeTests ();
	unpackedTypeTests ();
	lambdaTypeTests ();
	changeTypeTests ();
	joinPlaidTypeTests ();
	bindingTests ();
	bindingTests2 ();
	bindingTests3 ();
	joinPTtests ();
}

val joinPlaidTypeTests = fn () => {
	//create the state table for testing
	val /*unique Map<immtuable ID,immutable StateType>*/ temp = java.util.HashMap.new();
	
	//unit - just in case
	val u = createID("unit");
	temp.put(u, new StateType { val name = u; val superType = new None; });
	val unique StateTable st = new StateTable { override val states = temp; };
	

};


//print result
val testName = fn (immutable String s) => System.out.println("\tTest Name: " + s);
val testCall = fn (immutable String s) => System.out.println("\t\tTest Call: " + s);
val testResult = fn (immutable String s) => System.out.println("\t\tTest Result: " + s);
val testPassedMsg = fn (immutable Boolean t, immutable String s) => {
	System.out.print("\t\tTest Passed? ");
	match (t) {
		case True { System.out.print(P); }
		case False { System.out.print(F); }
	};
	match (s.equals("")) {
		case True { System.out.println("") }
		case False { System.out.println(" - " + s) }
	};
};
val testPassed = fn (immutable Boolean t) => testPassedMsg(t,"");
val P = "yes";
val F = "no";

val ok = fn () => System.out.println("ok");

val fail = fn () => System.out.println("fail");
val failMsg = fn (immutable String msg) => System.out.println("fail: " + msg);