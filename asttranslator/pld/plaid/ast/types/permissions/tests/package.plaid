package plaid.ast.types.permissions.tests;

import plaid.ast.types.permissions.*;
import java.lang.System;


/**
 *  testing infrastructure for permission operations
 *  Currently only tests unique, immutable, and none since that is
 *  what the typechecker handles
 */
 
val testUnique = fn () => {
	var test = unit;
	System.out.print("Testing Unique:");
	//isWritable
	System.out.print("\tisWritable() - ");
	x = UNIQUE.isWritable();
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	//guaranteesState
	System.out.print("\tguaranteesState() - ");
	x = UNIQUE.guaranteesState();
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	//splitPerm
	System.out.print("\tUNIQUE.splitPerm(UNIQUE) = NONEP - ");
	x = UNIQUE.splitPerm(UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(IMMUTABLE) = IMMUTABLE - ");
	x = UNIQUE.splitPerm(IMMUTABLE);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(NONEP) = UNIQUE - ");
	x = UNIQUE.splitPerm(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	//Join
 	System.out.print("\tUNIQUE.join(UNIQUE) = NONEP - ");
	match (UNIQUE.splitPerm(UNIQUE)) {
		case NonePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(IMMUTABLE) = IMMUTABLE - ");
	match (UNIQUE.splitPerm(IMMUTABLE)) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(NONEP) = UNIQUE - ");
	match (UNIQUE.splitPerm(NONEP)) {
		case UniquePermission { ok() }
		default { fail() }
	};
 
};


//print result
val ok = fn () => System.out.println("ok");

val fail = fn () => System.out.println("fail");