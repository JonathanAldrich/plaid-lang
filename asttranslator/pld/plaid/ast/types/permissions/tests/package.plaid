package plaid.ast.types.permissions.tests;

import plaid.ast.types.permissions.*;
import java.lang.System;


/**
 *  testing infrastructure for permission operations
 *  Currently only tests unique, immutable, and none since that is
 *  what the typechecker handles
 */
 
val testUnique = fn () => {
	var x = unit;
	System.out.println("Testing Unique:");
	//isWritable
	System.out.print("\tisWritable() = true - ");
	x = UNIQUE.isWritable();
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	System.out.println("");
	//guaranteesState
	System.out.print("\tguaranteesState() = true - ");
	x = UNIQUE.guaranteesState();
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	
	System.out.println("");
	//splitPerm
	System.out.print("\tUNIQUE.splitPerm(UNIQUE) = Some(NONEP) - ");
	x = UNIQUE.splitPerm(UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(IMMUTABLE) = Some(IMMUTABLE) - ");
	x = UNIQUE.splitPerm(IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tUNIQUE.splitPerm(NONEP) = Some(UNIQUE) - ");
	x = UNIQUE.splitPerm(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//Join
	System.out.print("\tUNIQUE.join(UNIQUE) = None - ");
	x = UNIQUE.join(UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.join(IMMUTABLE) = None - ");
	x = UNIQUE.join(IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.join(NONEP) = Some(UNIQUE) - ");
	x = UNIQUE.join(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//JoinTo
	System.out.print("\tUNIQUE.joinTo(UNIQUE,UNIQUE) = None - ");
	x = UNIQUE.joinTo(UNIQUE,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.joinTo(IMMUTABLE,UNIQUE) = None - ");
	x = UNIQUE.joinTo(IMM,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};	
	System.out.print("\tUNIQUE.joinTo(NONEP,UNIQUE) = Some(UNIQUE) - ");
	x = UNIQUE.joinTo(NONEP,UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tUNIQUE.joinTo(UNIQUE,IMMUTABLE) = None - ");
	x = UNIQUE.joinTo(UNIQUE,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.joinTo(IMMUTABLE,IMMUTABLE) = None - ");
	x = UNIQUE.joinTo(IMM,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.joinTo(NONEP,IMMUTABLE) = None - ");
	x = UNIQUE.joinTo(NONEP,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
		System.out.print("\tUNIQUE.joinTo(UNIQUE,NONEP) = None - ");
	x = UNIQUE.joinTo(UNIQUE,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.joinTo(IMMUTABLE,NONEP) = None - ");
	x = UNIQUE.joinTo(IMM,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tUNIQUE.joinTo(NONEP,NONEP) = None - ");
	x = UNIQUE.joinTo(NONEP,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	
	System.out.println("");
	//isSubPermOf
	System.out.print("\tUNIQUE.isSubPermOf(UNIQUE) = true - ");
	x = UNIQUE.isSubPermOf(UNIQUE);
	match (x) {
		case False { fail() }
		case True { ok() }
	};
	System.out.print("\tUNIQUE.isSubPermOf(IMMUTABLE) = true - ");
	x = UNIQUE.isSubPermOf(IMM);
	match (x) {
		case False { fail() }
		case True { ok() }
	};
	System.out.print("\tUNIQUE.isSubPermOf(NONEP) = true - ");
	x = UNIQUE.isSubPermOf(NONEP);
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	
	System.out.println("");
	//least upper bound
	System.out.print("\tUNIQUE.leastUpperBound(UNIQUE) = UNIQUE - ");
	x = UNIQUE.leastUpperBound(UNIQUE);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.leastUpperBound(IMMUTABLE) = UNIQUE - ");
	x = UNIQUE.leastUpperBound(IMM);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.leastUpperBound(NONEP) = UNIQUE - ");
	x = UNIQUE.leastUpperBound(NONEP);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	System.out.println("");
	//greatest lower bound
	System.out.print("\tUNIQUE.greatestLowerBound(UNIQUE) = UNIQUE - ");
	x = UNIQUE.greatestLowerBound(UNIQUE);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.greatestLowerBound(IMMUTABLE) = IMMUTABLE - ");
	x = UNIQUE.greatestLowerBound(IMM);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tUNIQUE.greatestLowerBound(NONEP) = NONEP - ");
	x = UNIQUE.greatestLowerBound(NONEP);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
};

val testImmutable = fn () => {
	var x = unit;
	System.out.println("Testing Immutable:");
	//isWritable
	System.out.print("\tisWritable() = false - ");
	x = IMMUTABLE.isWritable();
	match (x) {
		case True { fail() }
		case False { ok() }
	};
	System.out.println("");
	//guaranteesState
	System.out.print("\tguaranteesState() = true - ");
	x = IMMUTABLE.guaranteesState();
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	
	System.out.println("");
	//splitPerm
	System.out.print("\tIMMUTABLE.splitPerm(UNIQUE) = None - ");
	x = IMMUTABLE.splitPerm(UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.splitPerm(IMMUTABLE) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.splitPerm(IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tIMMUTABLE.splitPerm(NONEP) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.splitPerm(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//Join
	System.out.print("\tIMMUTABLE.join(UNIQUE) = None - ");
	x = IMMUTABLE.join(UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.join(IMMUTABLE) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.join(IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tIMMUTABLE.join(NONEP) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.join(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//JoinTo
	System.out.print("\tIMMUTABLE.joinTo(UNIQUE,UNIQUE) = None - ");
	x = IMMUTABLE.joinTo(UNIQUE,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.joinTo(IMMUTABLE,UNIQUE) = Some(UNIQUE) - ");
	x = IMMUTABLE.joinTo(IMM,UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};	
	System.out.print("\tIMMUTABLE.joinTo(NONEP,UNIQUE) = None - ");
	x = IMMUTABLE.joinTo(NONEP,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.joinTo(UNIQUE,IMMUTABLE) = None - ");
	x = IMMUTABLE.joinTo(UNIQUE,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.joinTo(IMMUTABLE,IMMUTABLE) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.joinTo(IMM,IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tIMMUTABLE.joinTo(NONEP,IMMUTABLE) = Some(IMMUTABLE) - ");
	x = IMMUTABLE.joinTo(NONEP,IMM);
	match (x) {
	case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tIMMUTABLE.joinTo(UNIQUE,NONEP) = None - ");
	x = IMMUTABLE.joinTo(UNIQUE,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.joinTo(IMMUTABLE,NONEP) = None - ");
	x = IMMUTABLE.joinTo(IMM,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tIMMUTABLE.joinTo(NONEP,NONEP) = None - ");
	x = IMMUTABLE.joinTo(NONEP,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	
	System.out.println("");
	//isSubPermOf
	System.out.print("\tIMMUTABLE.isSubPermOf(UNIQUE) = false - ");
	x = IMMUTABLE.isSubPermOf(UNIQUE);
	match (x) {
		case False { ok() }
		case True { fail() }
	};
	System.out.print("\tIMMUTABLE.isSubPermOf(IMMUTABLE) = true - ");
	x = IMMUTABLE.isSubPermOf(IMM);
	match (x) {
		case False { fail() }
		case True { ok() }
	};
	System.out.print("\tIMMUTABLE.isSubPermOf(NONEP) = true - ");
	x = IMMUTABLE.isSubPermOf(NONEP);
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	
	System.out.println("");
	//least upper bound
	System.out.print("\tIMMUTABLE.leastUpperBound(UNIQUE) = UNIQUE - ");
	x = IMMUTABLE.leastUpperBound(UNIQUE);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	System.out.print("\tIMMUTABLE.leastUpperBound(IMMUTABLE) = IMMUTABLE - ");
	x = IMMUTABLE.leastUpperBound(IMM);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tIMMUTABLE.leastUpperBound(NONEP) = IMMUTABLE - ");
	x = IMMUTABLE.leastUpperBound(NONEP);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	System.out.println("");
	//greatest lower bound
	System.out.print("\tIMMUTABLE.greatestLowerBound(UNIQUE) = IMMUTABLE - ");
	x = IMMUTABLE.greatestLowerBound(UNIQUE);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tIMMUTABLE.greatestLowerBound(IMMUTABLE) = IMMUTABLE - ");
	x = IMMUTABLE.greatestLowerBound(IMM);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tIMMUTABLE.greatestLowerBound(NONEP) = NONEP - ");
	x = IMMUTABLE.greatestLowerBound(NONEP);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
};

val testNone = fn () => {
	var x = unit;
	System.out.println("Testing None:");
	//isWritable
	System.out.print("\tisWritable() = false - ");
	x = NONEP.isWritable();
	match (x) {
		case True { fail() }
		case False { ok() }
	};
	System.out.println("");
	//guaranteesState
	System.out.print("\tguaranteesState() = false - ");
	x = NONEP.guaranteesState();
	match (x) {
		case True { fail() }
		case False { ok() }
	};
	
	System.out.println("");
	//splitPerm
	System.out.print("\tNONEP.splitPerm(UNIQUE) = None - ");
	x = NONEP.splitPerm(UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.splitPerm(IMMUTABLE) = None - ");
	x = NONEP.splitPerm(IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.splitPerm(NONEP) = Some(NONEP) - ");
	x = NONEP.splitPerm(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//Join
	System.out.print("\tNONEP.join(UNIQUE) = Some(Unique) - ");
	x = NONEP.join(UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tNONEP.join(IMMUTABLE) = Some(IMMUTABLE) - ");
	x = NONEP.join(IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tNONEP.join(NONEP) = Some(NONEP) - ");
	x = NONEP.join(NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//JoinTo
	System.out.print("\tNONEP.joinTo(UNIQUE,UNIQUE) = Some(UNIQUE) - ");
	x = NONEP.joinTo(UNIQUE,UNIQUE);
	match (x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tNONEP.joinTo(IMMUTABLE,UNIQUE) = None - ");
	x = NONEP.joinTo(IMM,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};	
	System.out.print("\tNONEP.joinTo(NONEP,UNIQUE) = None - ");
	x = NONEP.joinTo(NONEP,UNIQUE);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.joinTo(UNIQUE,IMMUTABLE) = None - ");
	x = NONEP.joinTo(UNIQUE,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.joinTo(IMMUTABLE,IMMUTABLE) = Some(IMMUTABLE) - ");
	x = NONEP.joinTo(IMM,IMM);
	match (x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tNONEP.joinTo(NONEP,IMMUTABLE) = None - ");
	x = NONEP.joinTo(NONEP,IMM);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.joinTo(UNIQUE,NONEP) = None - ");
	x = NONEP.joinTo(UNIQUE,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.joinTo(IMMUTABLE,NONEP) = None - ");
	x = NONEP.joinTo(IMM,NONEP);
	match (x) {
		case Some { fail() }
		case None { ok() }
	};
	System.out.print("\tNONEP.joinTo(NONEP,NONEP) = Some(NONEP) - ");
	x = NONEP.joinTo(NONEP,NONEP);
	match (x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.println("");
	//isSubPermOf
	System.out.print("\tNONEP.isSubPermOf(UNIQUE) = false - ");
	x = NONEP.isSubPermOf(UNIQUE);
	match (x) {
		case False { ok() }
		case True { fail() }
	};
	System.out.print("\tNONEP.isSubPermOf(IMMUTABLE) = false - ");
	x = NONEP.isSubPermOf(IMM);
	match (x) {
		case False { ok() }
		case True { fail() }
	};
	System.out.print("\tNONEP.isSubPermOf(NONEP) = true - ");
	x = NONEP.isSubPermOf(NONEP);
	match (x) {
		case True { ok() }
		case False { fail() }
	};
	
	System.out.println("");
	//least upper bound
	System.out.print("\tNONEP.leastUpperBound(UNIQUE) = UNIQUE - ");
	x = NONEP.leastUpperBound(UNIQUE);
	match (x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	System.out.print("\tNONEP.leastUpperBound(IMMUTABLE) = IMMUTABLE - ");
	x = NONEP.leastUpperBound(IMM);
	match (x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	System.out.print("\tNONEP.leastUpperBound(NONEP) = NONEP - ");
	x = NONEP.leastUpperBound(NONEP);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	System.out.println("");
	//greatest lower bound
	System.out.print("\tNONEP.greatestLowerBound(UNIQUE) = NONEP - ");
	x = NONEP.greatestLowerBound(UNIQUE);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
	System.out.print("\tNONEP.greatestLowerBound(IMMUTABLE) = NONEP - ");
	x = NONEP.greatestLowerBound(IMM);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
	System.out.print("\tNONEP.greatestLowerBound(NONEP) = NONEP - ");
	x = NONEP.greatestLowerBound(NONEP);
	match (x) {
		case NonePermission { ok() }
		default { fail() }
	};
};

val testLUB = fn () => {
	var list = makeEmptyList();
	var x = unit;
	System.out.println("Testing LeastUpperBound on lists of Permissions");
	
	System.out.print("\tleastUpperBound({}) = NONEP - ");
	x = leastUpperBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	list.add(UNIQUE);
	System.out.print("\tleastUpperBound({UNIQUE}) = UNIQUE - ");
	x = leastUpperBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(IMMUTABLE);
	System.out.print("\tleastUpperBound({IMMUTABLE}) = IMMUTABLE - ");
	x = leastUpperBound(list);
	match(x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(NONEP);
	System.out.print("\tleastUpperBound({NONEP}) = NONEP - ");
	x = leastUpperBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(NONEP);
	list.add(IMMUTABLE);
	list.add(UNIQUE);
	System.out.print("\tleastUpperBound({NONEP,IMMUTABLE,UNIQUE} = UNIQUE - ");
	x = leastUpperBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
		list = makeEmptyList();
	list.add(NONEP);
	list.add(IMMUTABLE);
	list.add(IMMUTABLE);
	System.out.print("\tleastUpperBound({NONEP,IMMUTABLE,IMMUTABLE} = IMMUTABLE - ");
	x = leastUpperBound(list);
	match(x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(IMMUTABLE);
	list.add(IMMUTABLE);
	System.out.print("\tleastUpperBound({UNIQUE,IMMUTABLE,IMMUTABLE} = UNIQUE - ");
	x = leastUpperBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(IMMUTABLE);
	list.add(UNIQUE);
	System.out.print("\tleastUpperBound({UNIQUE,IMMUTABLE,UNIQUE} = UNIQUE - ");
	x = leastUpperBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(NONEP);
	list.add(UNIQUE);
	System.out.print("\tleastUpperBound({UNIQUE,NONEP,UNIQUE} = UNIQUE - ");
	x = leastUpperBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
};

val testGLB = fn () => {
	var list = makeEmptyList();
	var x = unit;
	System.out.println("Testing greatestLowerBound on lists of Permissions");
	
	System.out.print("\tgreatestLowerBound({}) = UNIQUEP - ");
	x = greatestLowerBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	list.add(UNIQUE);
	System.out.print("\tgreatestLowerBound({UNIQUE}) = UNIQUE - ");
	x = greatestLowerBound(list);
	match(x) {
		case UniquePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(IMMUTABLE);
	System.out.print("\tgreatestLowerBound({IMMUTABLE}) = IMMUTABLE - ");
	x = greatestLowerBound(list);
	match(x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(NONEP);
	System.out.print("\tgreatestLowerBound({NONEP}) = NONEP - ");
	x = greatestLowerBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(NONEP);
	list.add(IMMUTABLE);
	list.add(UNIQUE);
	System.out.print("\tgreatestLowerBound({NONEP,IMMUTABLE,UNIQUE} = NONEP - ");
	x = greatestLowerBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(NONEP);
	list.add(IMMUTABLE);
	list.add(IMMUTABLE);
	System.out.print("\tgreatestLowerBound({NONEP,IMMUTABLE,IMMUTABLE} = NONEP - ");
	x = greatestLowerBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(IMMUTABLE);
	list.add(IMMUTABLE);
	System.out.print("\tgreatestLowerBound({UNIQUE,IMMUTABLE,IMMUTABLE} = IMMUTABLE - ");
	x = greatestLowerBound(list);
	match(x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(IMMUTABLE);
	list.add(UNIQUE);
	System.out.print("\tgreatestLowerBound({UNIQUE,IMMUTABLE,UNIQUE} = IMMUTABLE - ");
	x = greatestLowerBound(list);
	match(x) {
		case ImmutablePermission { ok() }
		default { fail() }
	};
	
	list = makeEmptyList();
	list.add(UNIQUE);
	list.add(NONEP);
	list.add(UNIQUE);
	System.out.print("\tgreatestLowerBound({UNIQUE,NONEP,UNIQUE} = NONEP - ");
	x = greatestLowerBound(list);
	match(x) {
		case NonePermission { ok() }
		default { fail() }
	};
	
};

val testFieldRead = fn () => {
	System.out.println("Testing fieldReadPermission function");
	var x = unit;
	
	System.out.print("\tfieldReadPermission(UNIQUE,UNIQUE,false) = some(UNIQUE) - ");
	x = fieldReadPermission(UNIQUE,UNIQUE,false);
	match(x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(UNIQUE,UNIQUE,true) = some(UNIQUE) - ");
	x = fieldReadPermission(UNIQUE,UNIQUE,false);
	match(x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(UNIQUE,IMMUTABLE,false) = some(UNIQUE) - ");
	x = fieldReadPermission(UNIQUE,IMM,false);
	match(x) {
		case Some {
			match (x.value) {
				case UniquePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(UNIQUE,IMMUTABLE,true) = some(IMMUTABLE) - ");
	x = fieldReadPermission(UNIQUE,IMM,true);
	match(x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(UNIQUE,NONEP,false) = some(NONEP) - ");
	x = fieldReadPermission(UNIQUE,NONEP,false);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(UNIQUE,NONEP,true) = some(NONEP) - ");
	x = fieldReadPermission(UNIQUE,NONEP,true);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.print("\tfieldReadPermission(IMMUTABLE,UNIQUE,false) = None - ");
	x = fieldReadPermission(IMMUTABLE,UNIQUE,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(IMMUTABLE,UNIQUE,true) = None - ");
	x = fieldReadPermission(IMMUTABLE,UNIQUE,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(IMMUTABLE,IMMUTABLE,false) = some(IMMUTABLE) - ");
	x = fieldReadPermission(IMMUTABLE,IMM,false);
	match(x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(IMMUTABLE,IMMUTABLE,true) = some(IMMUTABLE) - ");
	x = fieldReadPermission(IMMUTABLE,IMM,false);
	match(x) {
		case Some {
			match (x.value) {
				case ImmutablePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(IMMUTABLE,NONEP,false) = some(NONEP) - ");
	x = fieldReadPermission(IMMUTABLE,NONEP,false);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(IMMUTABLE,NONEP,true) = some(NONEP) - ");
	x = fieldReadPermission(IMMUTABLE,NONEP,false);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	
	System.out.print("\tfieldReadPermission(NONEP,UNIQUE,false) = None - ");
	x = fieldReadPermission(NONEP,UNIQUE,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(NONEP,UNIQUE,true) = None - ");
	x = fieldReadPermission(NONEP,UNIQUE,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(NONEP,IMMUTABLE,false) = None - ");
	x = fieldReadPermission(NONEP,IMM,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(NONEP,IMMUTABLE,true) = None - ");
	x = fieldReadPermission(NONEP,IMM,false);
	match(x) {
		case Some { fail() } 
		case None { ok() }
	};
	System.out.print("\tfieldReadPermission(NONEP,NONEP,false) = some(NONEP) - ");
	x = fieldReadPermission(NONEP,NONEP,false);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
	System.out.print("\tfieldReadPermission(NONEP,NONEP,true) = some(NONEP) - ");
	x = fieldReadPermission(NONEP,NONEP,false);
	match(x) {
		case Some {
			match (x.value) {
				case NonePermission { ok() }
				default { fail() }
			}
		}
		case None { fail() }
	};
};


method main() {
	testUnique();
	testImmutable();
	testNone();
	testLUB();
	testGLB();
	testFieldRead();
}

//print result
val ok = fn () => System.out.println("ok");

val fail = fn () => System.out.println("fail");