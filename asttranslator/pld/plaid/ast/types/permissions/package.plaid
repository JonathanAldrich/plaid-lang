package plaid.ast.types.permissions;

//globals for permissions
val immutable Permission DYNP = new DynPermission;
val immutable Permission UNIQUE = new UniquePermission;
val immutable Permission FULL = new FullPermission;
val immutable Permission IMM = new ImmutablePermission;
val immutable Permission SHARED = new SharedPermission;
val immutable Permission PURE = new PurePermission;
val immutable Permission NONEP = new NonePermission;


//Take a list of permissions and return the strongest one of them
val /*(unique list<immutable Permission>) -> immutable Permission*/ strongestPerm = fn (permList) => {
	
	

};

//permission for reading a field - check these
val /*(permission,permission) -> permission*/ fieldReadPermission = fn (objectPerm, fieldPerm) => {
	match (objectPerm) {
		case DynPermission { DYNP }
		case UniquePermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PURE }
				case FullPermission { PURE }
				case ImmutablePermission { IMM }
				case SharedPermission { SHARED }
				case PurePermission { PURE }
				case NonePermission { NONEP }
				default { java.lang.System.out.println("not a permission"); }
			}
		}
		case FullPermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PURE }
				case FullPermission { PURE }
				case ImmutablePermission { IMM }
				case SharedPermission { SHARED }
				case PurePermission { PURE }
				case NonePermission { NONEP }
				default { java.lang.System.out.println("not a permission"); }
			}
		}
		case ImmutablePermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PURE }
				case FullPermission { PURE }
				case ImmutablePermission { IMM }
				case SharedPermission { PURE }
				case PurePermission { PURE }
				case NonePermission { NONEP }
				default { java.lang.System.out.println("not a permission"); }
			}
		}
		case SharedPermission {
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PURE }
				case FullPermission { PURE }
				case ImmutablePermission { IMM }
				case SharedPermission { PURE }
				case PurePermission { PURE }
				case NonePermission { NONEP }
				default { java.lang.System.out.println("not a permission"); }
			}
		}
		case PurePermission { 
			match (fieldPerm) {
				case DynPermission { DYNP }
				case UniquePermission { PURE }
				case FullPermission { PURE }
				case ImmutablePermission { IMM }
				case SharedPermission { PURE }
				case PurePermission { PURE }
				case NonePermission { NONEP }
				default { java.lang.System.out.println("not a permission"); }
			}
		}
		case NonePermission {
			NonePermission
		}
		default { java.lang.System.out.println("not a permission"); }
	}
};
