package plaid.ast.types;

/**
 *	ChangeTypes are used in the type of methods and lambdas to 
 *  summarize the way in which the types of inputs to these
 *  abstractions change as a part of the execution.  We represent
 *  the start and end states as TypeBindings.  Change Types
 *  that return a non-none permission will be represented
 *  as BorrowBinding, while anything that ends with a none
 *  permission will simply be represented as a TakeBinding.
 *  We might be able to make these more lightweight by
 *  separating out duplicate information between the two
 *  TypeBindings, however, it is simpler to do it this
 *  way for uniform handling elsewhere.
 */
state ChangeType case of PlaidType {
	
	val immutable TypeBinding input;
	val immutable TypeBinding output;
	
	method immutable Boolean ==(immutable ChangeType other) {
		match (other) {
			case ChangeType {
				this.input == other.input && this.output == other.output;
			}
			default { false }
		}
	}
	
	method toString() {
		input.toString() + " >> " + output.toString()
	}
	
	method immutable Boolean isSubChangeTypeOf(immutable ChangeType other, stateTable) {
		// other.input <: this.input && this.output <: other.output 
		other.input.isSubTypeBindingOf(this.input, stateTable) && 
			this.output.isSubTypeBindingOf(other.output, stateTable);
	}
}