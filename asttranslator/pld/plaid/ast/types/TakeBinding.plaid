package plaid.ast.types;

/* A TakeBinding is a case of TypeBinding used for tracking the types of
   locations in a Plaid program.  It has no additional information other
   than the current PlaidType (currentType field) inherited from TypeBinding.
 */
 
 state TakeBinding case of TypeBinding {
 
 	method /*unique Option<unique TypeBinding>*/ 
 		leastUpperBound(immutable TypeBinding other, unique StateTable st)[immutable TakeBinding]
 	{
 		match (other) {
 			case TakeBinding {
 				val /*unique Option<immutable Permission>*/ newPerm = 
 					other.currentType.perm.greatestLowerBound(this.currentType.perm);
 				
 				val /*unique Option<unique ObjectType>*/ newObjType = 
 					other.currentType.type.leastUpperBound(this.currentType.type,st);
 				match(newObjType) {
 					case Some {
 						createSome(
 							new TakeBinding { 
 								var unique PermType currentType = new PermType {
 									val immutable Permission perm = newPerm;
									val immutable ObjectType type = newObjType.value;
								};
 							}
 						)
 					}
 					case None { new None }
 				}
 			}
 			case BorrowBinding { new None }
 		}
 	}
 
 	method immutable Boolean ==(immutable TypeBinding other) {
 		match (other) {
 			case TakeBinding {
 				this.currentType == other.currentType
 			}
 			default { false }
 		}
 	}
 	
 	method toString() {
 		currentType.toString();
 	}
 	
 	method immutable Boolean isSubTypeBindingOf(immutable TypeBinding other, stateTable) {
 		match (other) {
 			case TakeBinding {
 				this.currentType.isSubPermTypeOf(other.currentType, stateTable)
 			}
 			default { false }
 		}
 	}
 
 }