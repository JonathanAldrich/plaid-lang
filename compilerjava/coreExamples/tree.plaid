/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package coreExamples.tree;

import java.lang.System;
import plaid.lang.*;

state BinaryNode {
	val value;
	val left;
	val right;
}

state Leaf {
	
}

state BinaryTree {
	val root = new Leaf;
	
	method insert(x) {
		match (root) {
			case Leaf {
				root = new BinaryNode{ value = x; left = new Leaf; right = new Leaf; };
			}
			case BinaryNode n {
				insertHelper(n,x);
			}
		};
	}
	
	method insertHelper(topNode,x) {
		match (topNode) {
			case BinaryNode n {
				if (x < n.value) {
					match (n.left) {
						case BinaryNode left {
							insertHelper(left, x);
						}
						case Leaf left {
							n.left = new BinaryNode{ value = x; left = new Leaf; right = new Leaf; };
						}
					};
				};
				if (x > n.value) {
					match( n.right) {
						case BinaryNode right {
							insertHelper(right, x);
						}
						case Leaf right {
							n.right = new BinaryNode{ value = x; left = new Leaf; right = new Leaf; };
						}
					};
				};
				if (x == n.value) { System.out.println("Equal nodes not allowed"); };
			}
			default { System.out.println("insertHelper method failed"); }
		};
	}
	
	method contains(x) {
		match (root) {
			case Leaf {
				new False;
			}
			case BinaryNode n {
				containsHelper(n, x);
			}
		};
		
		
	}
	
	method containsHelper(node, x) {
		match (node) {
			case BinaryNode n {
				ifElse (x < n.value) {
					containsHelper(n.left, x);
				} {
					ifElse (x > n.value) {
						containsHelper(n.right, x);
					} {
						if (x == n.value) {
							new True;
						};
					};
				};
			}
			case Leaf {
				new False;
			}
		};
	}
}

method main() {
	var tree = new BinaryTree;
	tree.insert(1);
	tree.insert(-3);
	tree.insert(5);
	if (tree.contains(1)) { java.lang.System.out.println("the tree contains 1"); };
	if (tree.contains(-3)) { java.lang.System.out.println("the tree contains -3"); };
	if (tree.contains(5)) { java.lang.System.out.println("the tree contains 5"); };
	if (tree.contains(-4)) { java.lang.System.out.println("the tree contains -4"); };
	if (tree.contains(-2)) { java.lang.System.out.println("the tree contains -2"); };
	if (tree.contains(2)) { java.lang.System.out.println("the tree contains 2"); };
	if (tree.contains(6)) { java.lang.System.out.println("the tree contains 6"); };
}
