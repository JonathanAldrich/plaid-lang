package plaid.faststdlibtests.booleans;

import java.lang.System;

method void booleanTests() {

	//check equality method
	val eqOk = match(true == true) {
		case True {
			match (true == false) {
				case True {
					System.out.println("true-false equality broken");
					false
				}
				case False {
					match (false == true) {
						case True {
							System.out.println("false-true equality broken");
							false
						}
						case False {
							match (false == false) {
								case True {
									true;
								}
								case False {
								
									System.out.println("false-false equality broken");
									false
								}
							}
						}
					}
				}
			}
		}
		case False {
			System.out.println("true-true equality broken");	
		}
	};

	val andOk = match(eqOk) {
		case True {
			match(true && true) {
				case True {
					match (true && false) {
						case True {
							System.out.println("true && false broken");
							false
						}
						case False {
							match (false && true) {
								case True {
									System.out.println("false && true broken");
									false
								}
								case False {
									match (false && false) {
										case True {
											System.out.println("true && false broken");
											false
										}
										case False {
											true
										}
									}
								}
							}
						}
					}
				}
				case False {
					System.out.println("true && true broken");	
				}
			}
		}
		case False { false /*broken already*/ }
	};
	
	val xorOk = match (andOk) {
		case True {
			match (	( (false XOR false) == false) &&
					( (false XOR true) == true) &&
					( (true XOR false) == true) &&
					( (true XOR true) == false) ) {
				case True { true }
				case False {
					System.out.println("XOR broken");
					false
				}
			}
		}
		case False { false /* already broken*/ }
	};
	val bangOk = match (xorOk) {
		case True {
			match (	(!true  == false) &&
					(!false == true) ) {
				case True { true }
				case False {
					System.out.println("! broken");
					false
				}
			}
		}
		case False { false /* already broken*/ }
	};
	val orOk = match (bangOk) {
		case True {
			match (	( (false || false) == false) &&
					( (false || true) == true) &&
					( (true || false) == true) &&
					( (true || true) == true) ) {
				case True { true }
				case False {
					System.out.println("|| broken");
					false
				}
			}
		}
		case False { false /* already broken*/ }
	};
	val impOk = match (orOk) {
		case True {
			match (	( (false --> false) == true) &&
					( (false --> true) == true) &&
					( (true --> false) == false) &&
					( (true --> true) == true) ) {
				case True { true }
				case False {
					System.out.println("--> broken");
					false
				}
			}
		}
		case False { false /* already broken*/ }
	};
	val toStringOk = match (impOk) {
		case True {
			match (	(false.toString() == "false" ) &&
					(true.toString() == "true") ){
				case True { true }
				case False {
					System.out.println("toString broken");
					false
				}
			}
		}
		case False { false /* already broken*/ }
	};
	match (toStringOk) {
		case True {System.out.println("success!");}
		case False {/* already failed*/ }
	};


}