package plaid.typecheckertests.methodcall;

state MethodCall2 {

    val unique TopState ms = new OtherMethodState;
    val unique OtherMethodState oms = new OtherMethodState;
    
    method immutable MethodState m1(immutable String s)[unique MethodCall2 this] {
        new MethodState;
    }
    
     //call something not there - test when fixing type resolution
    method void test1()[unique MethodCall2 this] {
        this.notAMethod();
    }
    
    //call something not a method - test when fixing type resolution
    method void test2()[unique MethodCall this] {
        this.f();
    }

    //call a method on a lambda - test when have lambdas implemented
    //method void test3(()->void x) {
    //    x.notAMethod()
    //}
        
    //call a method with the wrong number of args
    method void test4()[unique MethodCall2 this] {
        this.m1();
    }
    
    //error for changing state of non-variable, parameter
    method void test5()[unique MethodCall2 this] {
        val unique TopState temp = this.ms;
        match (temp) {
            case OtherMethodState { temp.changeStateParam(this.ms); }
            default { /*no op*/ }
        }
    }

    //error for changing state of non-variable, parameter
    method void test6()[unique MethodCall2 >> void this] {
        this.oms.changeStateThis();
    }
}