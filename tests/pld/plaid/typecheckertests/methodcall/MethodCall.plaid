package plaid.typecheckertests.methodcall;

state MethodCall {

    val immutable String f = "not a method";

    method immutable MethodState m1(immutable String s)[unique MethodCall this] {
        new MethodState;
    }
    
    method void m2(unique MethodState ms) {
        unit;
    }

    //call something not a method - test when fixing type resolution
    //method void test()[unique MethodCall this] {
    //    this.f();
    //}
    
    //call something not there - test when fixing type resolution
    //method void test1()[unique MethodCall this] {
    //    this.notAMethod();
    //}
    
    //call a method on a lambda - test when have lambdas implemented
    //method void test2(()->void x) {
    //    x.notAMethod()
    //}
    
    //call a method on something not in scope - test once fix name resolution
    //method void test3() {
    //    x.m();
    //}
    
    //call a method with the wrong number of args - test when fixing type resolution
    //method void test4()[unique MethodCall this] {
    //    this.m1();
    //}
    
    //call a method with the wrong argument structure
    method void test5()[unique MethodCall this ] {
        this.m1(1);
    }
    
    //call a method with the wrong permission for an argument (or other problem)
    method void test6()[unique MethodCall this ] {
        val immutable MethodState t = new MethodState;
        this.m2(t);
    }
    
    //need a larger permission than the method call can support
    method void test7()[unique MethodCall this] {
        val unique MethodState t = this.m1("foo")
    }
    



}