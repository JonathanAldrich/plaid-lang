package plaid.typecheckertests.typeresolver;

state TypeResolver {

    val unique Astate a = new Astate;

     //fail - no field
    method void test1()[unique TypeResolver this] {
        this.a.a;
    }
    
    //fail - deref method
    method void test2()[unique TypeResolver this] {
        this.a.m;
    }
    
    //fail - undefined infix
    method void test3()[unique TypeResolver this] {
        this OP 1
    }
    
    //fail - infix op not a method
    method void test4()[unique TypeResolver this] {
        this a 1
    }
    
    //fail - infix op on a lambda
    method void test5(()->void f)[unique TypeResolver this] {
        f a 1
    }
    
    //fail - pattern must be state - currently a parse error
    //method void test6(immutable Integer i)[unique TypeResolver this] {
    //    match (i) {
    //        case this { unit }
    //        default { unit }
    //    }
    //}
    
    //fail - match on non-id
    method void test7()[unique TypeResolver this] {
        match (this.a) {
            default{ unit} 
        }
    }
    
    //fail - match no LUB
    method void test8(()->void f)[unique TypeResolver this] {
        match (this) {
            case TypeResolver { 1 }
            default{ f } 
        }
    }
    
    //fail - no state change on field (non-this)
    method void test9()[unique TypeResolver this] {
        this.a <- Astate;
    }
    
    //fail - no state wipe on field (non-this)
    method void test10()[unique TypeResolver this] {
        this.a <<- Astate;
    }
    
    //fail - undefined unary
    method void test11()[unique TypeResolver this] {
        +this
    }
    
    //fail - unary op not a method - fields cannot be operators
    //method void test12()[unique TypeResolver this] {
    //    -this
    //}
    
    //fail - unary op on a lambda
    method void test13(()->void f)[unique TypeResolver this] {
        +f
    }
}