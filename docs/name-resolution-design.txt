Plaid front end to do
---------------------

identifying Java classes (used in name resolution)
	(minor modification of code that looks up Plaid structures)
	
identifying members within a Java class (used in typechecking)
	is there a reusable library for this?
		probably a bytecode reader - e.g. BCEL

implement some kind of symboltable/scope abstraction (in Plaid),
		using the (Java) PackageRep and (Plaid) StateTable
	interface: lookup(qualified ID) returns 
	
when we load a file
	find the globally visible names
			the things named after the file
			or all things in a package.plaid file
		and add them to the global symboltable/scope abstraction
	if a source file, put on the queue for compilation
	
	
implement a name resolution pass
--------------------------------
for every source file that we're compiling
	traverse the AST
	when we come to an import
		resolve the Qualified ID as below
		add (simple name, result of Qualified ID lookup) to top-level scope
	when we enter a scope (file, state, or function)
		create a new scope object, linking to outer scope
		add all recursively visible declarations in this scope to the
			scope object
	when we hit a definition
		if the definition is recursively visible, it was already added to scope
		otherwise, add it
	when we come to a Qualified ID we:
		look up first ID in scope
			scope has link to enclosing scope
			top level has imported names, but not package info
		if found, transform first ID:
			variable reference (with reference to var decl AST node)
			field reference (with reference to field decl AST node)
			state reference (with reference to state delc AST node)
			Java class reference (with an object representing that class)
		if not found, treat as a package and try next part of qualified ID
			see information up above
		if still not found, report error

